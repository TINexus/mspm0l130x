# [doc = "Register `CMDWEPROTTR` reader"] pub type R = crate :: R < CMDWEPROTTR_SPEC > ; # [doc = "Register `CMDWEPROTTR` writer"] pub type W = crate :: W < CMDWEPROTTR_SPEC > ; # [doc = "Field `CMDWEPROTTR_VAL` reader - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] pub type CMDWEPROTTR_VAL_R = crate :: BitReader ; # [doc = "Field `CMDWEPROTTR_VAL` writer - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] pub type CMDWEPROTTR_VAL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; impl R { # [doc = "Bit 0 - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] # [inline (always)] pub fn cmdweprottr_val (& self) -> CMDWEPROTTR_VAL_R { CMDWEPROTTR_VAL_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] # [inline (always)] # [must_use] pub fn cmdweprottr_val (& mut self) -> CMDWEPROTTR_VAL_W < CMDWEPROTTR_SPEC , 0 > { CMDWEPROTTR_VAL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Command Write Erase Protect Trim Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cmdweprottr::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cmdweprottr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CMDWEPROTTR_SPEC ; impl crate :: RegisterSpec for CMDWEPROTTR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cmdweprottr::R`](R) reader structure"] impl crate :: Readable for CMDWEPROTTR_SPEC { } # [doc = "`write(|w| ..)` method takes [`cmdweprottr::W`](W) writer structure"] impl crate :: Writable for CMDWEPROTTR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CMDWEPROTTR to value 0"] impl crate :: Resettable for CMDWEPROTTR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }