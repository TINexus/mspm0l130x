# [doc = "Register `CFGPCNT` reader"] pub type R = crate :: R < CFGPCNT_SPEC > ; # [doc = "Register `CFGPCNT` writer"] pub type W = crate :: W < CFGPCNT_SPEC > ; # [doc = "Field `CFGPCNT_MAXPCNTOVR` reader - Override hard-wired maximum pulse count. If MAXERSPCNTOVR is not set, then setting this value alone will override the max pulse count for both program and erase. If MAXERSPCNTOVR is set, then this bit will only control the max pulse count setting for program. By default, this bit is 0, and a hard-wired max pulse count is used."] pub type CFGPCNT_MAXPCNTOVR_R = crate :: BitReader < CFGPCNT_MAXPCNTOVR_A > ; # [doc = "Override hard-wired maximum pulse count. If MAXERSPCNTOVR is not set, then setting this value alone will override the max pulse count for both program and erase. If MAXERSPCNTOVR is set, then this bit will only control the max pulse count setting for program. By default, this bit is 0, and a hard-wired max pulse count is used.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CFGPCNT_MAXPCNTOVR_A { # [doc = "0: DEFAULT"] CFGPCNT_MAXPCNTOVR_DEFAULT = 0 , # [doc = "1: OVERRIDE"] CFGPCNT_MAXPCNTOVR_OVERRIDE = 1 , } impl From < CFGPCNT_MAXPCNTOVR_A > for bool { # [inline (always)] fn from (variant : CFGPCNT_MAXPCNTOVR_A) -> Self { variant as u8 != 0 } } impl CFGPCNT_MAXPCNTOVR_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CFGPCNT_MAXPCNTOVR_A { match self . bits { false => CFGPCNT_MAXPCNTOVR_A :: CFGPCNT_MAXPCNTOVR_DEFAULT , true => CFGPCNT_MAXPCNTOVR_A :: CFGPCNT_MAXPCNTOVR_OVERRIDE , } } # [doc = "DEFAULT"] # [inline (always)] pub fn is_cfgpcnt_maxpcntovr_default (& self) -> bool { * self == CFGPCNT_MAXPCNTOVR_A :: CFGPCNT_MAXPCNTOVR_DEFAULT } # [doc = "OVERRIDE"] # [inline (always)] pub fn is_cfgpcnt_maxpcntovr_override (& self) -> bool { * self == CFGPCNT_MAXPCNTOVR_A :: CFGPCNT_MAXPCNTOVR_OVERRIDE } } # [doc = "Field `CFGPCNT_MAXPCNTOVR` writer - Override hard-wired maximum pulse count. If MAXERSPCNTOVR is not set, then setting this value alone will override the max pulse count for both program and erase. If MAXERSPCNTOVR is set, then this bit will only control the max pulse count setting for program. By default, this bit is 0, and a hard-wired max pulse count is used."] pub type CFGPCNT_MAXPCNTOVR_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CFGPCNT_MAXPCNTOVR_A > ; impl < 'a , REG , const O : u8 > CFGPCNT_MAXPCNTOVR_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DEFAULT"] # [inline (always)] pub fn cfgpcnt_maxpcntovr_default (self) -> & 'a mut crate :: W < REG > { self . variant (CFGPCNT_MAXPCNTOVR_A :: CFGPCNT_MAXPCNTOVR_DEFAULT) } # [doc = "OVERRIDE"] # [inline (always)] pub fn cfgpcnt_maxpcntovr_override (self) -> & 'a mut crate :: W < REG > { self . variant (CFGPCNT_MAXPCNTOVR_A :: CFGPCNT_MAXPCNTOVR_OVERRIDE) } } # [doc = "Field `CFGPCNT_MAXPCNTVAL` reader - Override maximum pulse counter with this value. If MAXPCNTOVR = 0, then this field is ignored. If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 0, then this value will be used to override the max pulse count for both program and erase. Full max value will be {4'h0, MAXPCNTVAL} . If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 1, then this value will be used to override the max pulse count for program only. Full max value will be {4'h0, MAXPCNTVAL}."] pub type CFGPCNT_MAXPCNTVAL_R = crate :: FieldReader ; # [doc = "Field `CFGPCNT_MAXPCNTVAL` writer - Override maximum pulse counter with this value. If MAXPCNTOVR = 0, then this field is ignored. If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 0, then this value will be used to override the max pulse count for both program and erase. Full max value will be {4'h0, MAXPCNTVAL} . If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 1, then this value will be used to override the max pulse count for program only. Full max value will be {4'h0, MAXPCNTVAL}."] pub type CFGPCNT_MAXPCNTVAL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O > ; impl R { # [doc = "Bit 0 - Override hard-wired maximum pulse count. If MAXERSPCNTOVR is not set, then setting this value alone will override the max pulse count for both program and erase. If MAXERSPCNTOVR is set, then this bit will only control the max pulse count setting for program. By default, this bit is 0, and a hard-wired max pulse count is used."] # [inline (always)] pub fn cfgpcnt_maxpcntovr (& self) -> CFGPCNT_MAXPCNTOVR_R { CFGPCNT_MAXPCNTOVR_R :: new ((self . bits & 1) != 0) } # [doc = "Bits 4:11 - Override maximum pulse counter with this value. If MAXPCNTOVR = 0, then this field is ignored. If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 0, then this value will be used to override the max pulse count for both program and erase. Full max value will be {4'h0, MAXPCNTVAL} . If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 1, then this value will be used to override the max pulse count for program only. Full max value will be {4'h0, MAXPCNTVAL}."] # [inline (always)] pub fn cfgpcnt_maxpcntval (& self) -> CFGPCNT_MAXPCNTVAL_R { CFGPCNT_MAXPCNTVAL_R :: new (((self . bits >> 4) & 0xff) as u8) } } impl W { # [doc = "Bit 0 - Override hard-wired maximum pulse count. If MAXERSPCNTOVR is not set, then setting this value alone will override the max pulse count for both program and erase. If MAXERSPCNTOVR is set, then this bit will only control the max pulse count setting for program. By default, this bit is 0, and a hard-wired max pulse count is used."] # [inline (always)] # [must_use] pub fn cfgpcnt_maxpcntovr (& mut self) -> CFGPCNT_MAXPCNTOVR_W < CFGPCNT_SPEC , 0 > { CFGPCNT_MAXPCNTOVR_W :: new (self) } # [doc = "Bits 4:11 - Override maximum pulse counter with this value. If MAXPCNTOVR = 0, then this field is ignored. If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 0, then this value will be used to override the max pulse count for both program and erase. Full max value will be {4'h0, MAXPCNTVAL} . If MAXPCNTOVR = 1 and MAXERSPCNTOVR = 1, then this value will be used to override the max pulse count for program only. Full max value will be {4'h0, MAXPCNTVAL}."] # [inline (always)] # [must_use] pub fn cfgpcnt_maxpcntval (& mut self) -> CFGPCNT_MAXPCNTVAL_W < CFGPCNT_SPEC , 4 > { CFGPCNT_MAXPCNTVAL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Pulse Counter Configuration Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cfgpcnt::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cfgpcnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CFGPCNT_SPEC ; impl crate :: RegisterSpec for CFGPCNT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cfgpcnt::R`](R) reader structure"] impl crate :: Readable for CFGPCNT_SPEC { } # [doc = "`write(|w| ..)` method takes [`cfgpcnt::W`](W) writer structure"] impl crate :: Writable for CFGPCNT_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CFGPCNT to value 0"] impl crate :: Resettable for CFGPCNT_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }