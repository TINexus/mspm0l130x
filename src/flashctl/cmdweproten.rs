# [doc = "Register `CMDWEPROTEN` reader"] pub type R = crate :: R < CMDWEPROTEN_SPEC > ; # [doc = "Register `CMDWEPROTEN` writer"] pub type W = crate :: W < CMDWEPROTEN_SPEC > ; # [doc = "Field `CMDWEPROTEN_VAL` reader - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] pub type CMDWEPROTEN_VAL_R = crate :: FieldReader ; # [doc = "Field `CMDWEPROTEN_VAL` writer - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] pub type CMDWEPROTEN_VAL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O > ; impl R { # [doc = "Bits 0:1 - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] # [inline (always)] pub fn cmdweproten_val (& self) -> CMDWEPROTEN_VAL_R { CMDWEPROTEN_VAL_R :: new ((self . bits & 3) as u8) } } impl W { # [doc = "Bits 0:1 - Each bit protects 1 sector. bit \\[0\\]: When 1, sector 0 of the engr region will be protected from program and erase. bit \\[1\\]: When 1, sector 1 of the engr region will be protected from program and erase. : : bit \\[31\\]: When 1, sector 31 of the engr region will be protected from program and erase."] # [inline (always)] # [must_use] pub fn cmdweproten_val (& mut self) -> CMDWEPROTEN_VAL_W < CMDWEPROTEN_SPEC , 0 > { CMDWEPROTEN_VAL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Command Write Erase Protect Engr Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cmdweproten::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cmdweproten::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CMDWEPROTEN_SPEC ; impl crate :: RegisterSpec for CMDWEPROTEN_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cmdweproten::R`](R) reader structure"] impl crate :: Readable for CMDWEPROTEN_SPEC { } # [doc = "`write(|w| ..)` method takes [`cmdweproten::W`](W) writer structure"] impl crate :: Writable for CMDWEPROTEN_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CMDWEPROTEN to value 0"] impl crate :: Resettable for CMDWEPROTEN_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }