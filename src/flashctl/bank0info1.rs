# [doc = "Register `BANK0INFO1` reader"] pub type R = crate :: R < BANK0INFO1_SPEC > ; # [doc = "Field `BANK0INFO1_NONMAINSIZE` reader - Non-main region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)"] pub type BANK0INFO1_NONMAINSIZE_R = crate :: FieldReader < BANK0INFO1_NONMAINSIZE_A > ; # [doc = "Non-main region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum BANK0INFO1_NONMAINSIZE_A { # [doc = "0: MINSECTORS"] BANK0INFO1_NONMAINSIZE_MINSECTORS = 0 , # [doc = "32: MAXSECTORS"] BANK0INFO1_NONMAINSIZE_MAXSECTORS = 32 , } impl From < BANK0INFO1_NONMAINSIZE_A > for u8 { # [inline (always)] fn from (variant : BANK0INFO1_NONMAINSIZE_A) -> Self { variant as _ } } impl crate :: FieldSpec for BANK0INFO1_NONMAINSIZE_A { type Ux = u8 ; } impl BANK0INFO1_NONMAINSIZE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < BANK0INFO1_NONMAINSIZE_A > { match self . bits { 0 => Some (BANK0INFO1_NONMAINSIZE_A :: BANK0INFO1_NONMAINSIZE_MINSECTORS) , 32 => Some (BANK0INFO1_NONMAINSIZE_A :: BANK0INFO1_NONMAINSIZE_MAXSECTORS) , _ => None , } } # [doc = "MINSECTORS"] # [inline (always)] pub fn is_bank0info1_nonmainsize_minsectors (& self) -> bool { * self == BANK0INFO1_NONMAINSIZE_A :: BANK0INFO1_NONMAINSIZE_MINSECTORS } # [doc = "MAXSECTORS"] # [inline (always)] pub fn is_bank0info1_nonmainsize_maxsectors (& self) -> bool { * self == BANK0INFO1_NONMAINSIZE_A :: BANK0INFO1_NONMAINSIZE_MAXSECTORS } } # [doc = "Field `BANK0INFO1_TRIMSIZE` reader - Trim region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)"] pub type BANK0INFO1_TRIMSIZE_R = crate :: FieldReader < BANK0INFO1_TRIMSIZE_A > ; # [doc = "Trim region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum BANK0INFO1_TRIMSIZE_A { # [doc = "0: MINSECTORS"] BANK0INFO1_TRIMSIZE_MINSECTORS = 0 , # [doc = "32: MAXSECTORS"] BANK0INFO1_TRIMSIZE_MAXSECTORS = 32 , } impl From < BANK0INFO1_TRIMSIZE_A > for u8 { # [inline (always)] fn from (variant : BANK0INFO1_TRIMSIZE_A) -> Self { variant as _ } } impl crate :: FieldSpec for BANK0INFO1_TRIMSIZE_A { type Ux = u8 ; } impl BANK0INFO1_TRIMSIZE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < BANK0INFO1_TRIMSIZE_A > { match self . bits { 0 => Some (BANK0INFO1_TRIMSIZE_A :: BANK0INFO1_TRIMSIZE_MINSECTORS) , 32 => Some (BANK0INFO1_TRIMSIZE_A :: BANK0INFO1_TRIMSIZE_MAXSECTORS) , _ => None , } } # [doc = "MINSECTORS"] # [inline (always)] pub fn is_bank0info1_trimsize_minsectors (& self) -> bool { * self == BANK0INFO1_TRIMSIZE_A :: BANK0INFO1_TRIMSIZE_MINSECTORS } # [doc = "MAXSECTORS"] # [inline (always)] pub fn is_bank0info1_trimsize_maxsectors (& self) -> bool { * self == BANK0INFO1_TRIMSIZE_A :: BANK0INFO1_TRIMSIZE_MAXSECTORS } } # [doc = "Field `BANK0INFO1_ENGRSIZE` reader - Engr region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)"] pub type BANK0INFO1_ENGRSIZE_R = crate :: FieldReader < BANK0INFO1_ENGRSIZE_A > ; # [doc = "Engr region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum BANK0INFO1_ENGRSIZE_A { # [doc = "0: MINSECTORS"] BANK0INFO1_ENGRSIZE_MINSECTORS = 0 , # [doc = "32: MAXSECTORS"] BANK0INFO1_ENGRSIZE_MAXSECTORS = 32 , } impl From < BANK0INFO1_ENGRSIZE_A > for u8 { # [inline (always)] fn from (variant : BANK0INFO1_ENGRSIZE_A) -> Self { variant as _ } } impl crate :: FieldSpec for BANK0INFO1_ENGRSIZE_A { type Ux = u8 ; } impl BANK0INFO1_ENGRSIZE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < BANK0INFO1_ENGRSIZE_A > { match self . bits { 0 => Some (BANK0INFO1_ENGRSIZE_A :: BANK0INFO1_ENGRSIZE_MINSECTORS) , 32 => Some (BANK0INFO1_ENGRSIZE_A :: BANK0INFO1_ENGRSIZE_MAXSECTORS) , _ => None , } } # [doc = "MINSECTORS"] # [inline (always)] pub fn is_bank0info1_engrsize_minsectors (& self) -> bool { * self == BANK0INFO1_ENGRSIZE_A :: BANK0INFO1_ENGRSIZE_MINSECTORS } # [doc = "MAXSECTORS"] # [inline (always)] pub fn is_bank0info1_engrsize_maxsectors (& self) -> bool { * self == BANK0INFO1_ENGRSIZE_A :: BANK0INFO1_ENGRSIZE_MAXSECTORS } } impl R { # [doc = "Bits 0:7 - Non-main region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)"] # [inline (always)] pub fn bank0info1_nonmainsize (& self) -> BANK0INFO1_NONMAINSIZE_R { BANK0INFO1_NONMAINSIZE_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - Trim region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)"] # [inline (always)] pub fn bank0info1_trimsize (& self) -> BANK0INFO1_TRIMSIZE_R { BANK0INFO1_TRIMSIZE_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:23 - Engr region size in sectors Minimum: 0x0 (0) Maximum: 0x10 (16)"] # [inline (always)] pub fn bank0info1_engrsize (& self) -> BANK0INFO1_ENGRSIZE_R { BANK0INFO1_ENGRSIZE_R :: new (((self . bits >> 16) & 0xff) as u8) } } # [doc = "Bank Information Register 1 for Bank 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`bank0info1::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BANK0INFO1_SPEC ; impl crate :: RegisterSpec for BANK0INFO1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`bank0info1::R`](R) reader structure"] impl crate :: Readable for BANK0INFO1_SPEC { } # [doc = "`reset()` method sets BANK0INFO1 to value 0"] impl crate :: Resettable for BANK0INFO1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }