# [doc = "Register `CMDEXEC` reader"] pub type R = crate :: R < CMDEXEC_SPEC > ; # [doc = "Register `CMDEXEC` writer"] pub type W = crate :: W < CMDEXEC_SPEC > ; # [doc = "Field `CMDEXEC_VAL` reader - Command Execute value Initiates execution of the command specified in the CMDTYPE register."] pub type CMDEXEC_VAL_R = crate :: BitReader < CMDEXEC_VAL_A > ; # [doc = "Command Execute value Initiates execution of the command specified in the CMDTYPE register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CMDEXEC_VAL_A { # [doc = "0: NOEXECUTE"] CMDEXEC_VAL_NOEXECUTE = 0 , # [doc = "1: EXECUTE"] CMDEXEC_VAL_EXECUTE = 1 , } impl From < CMDEXEC_VAL_A > for bool { # [inline (always)] fn from (variant : CMDEXEC_VAL_A) -> Self { variant as u8 != 0 } } impl CMDEXEC_VAL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CMDEXEC_VAL_A { match self . bits { false => CMDEXEC_VAL_A :: CMDEXEC_VAL_NOEXECUTE , true => CMDEXEC_VAL_A :: CMDEXEC_VAL_EXECUTE , } } # [doc = "NOEXECUTE"] # [inline (always)] pub fn is_cmdexec_val_noexecute (& self) -> bool { * self == CMDEXEC_VAL_A :: CMDEXEC_VAL_NOEXECUTE } # [doc = "EXECUTE"] # [inline (always)] pub fn is_cmdexec_val_execute (& self) -> bool { * self == CMDEXEC_VAL_A :: CMDEXEC_VAL_EXECUTE } } # [doc = "Field `CMDEXEC_VAL` writer - Command Execute value Initiates execution of the command specified in the CMDTYPE register."] pub type CMDEXEC_VAL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CMDEXEC_VAL_A > ; impl < 'a , REG , const O : u8 > CMDEXEC_VAL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NOEXECUTE"] # [inline (always)] pub fn cmdexec_val_noexecute (self) -> & 'a mut crate :: W < REG > { self . variant (CMDEXEC_VAL_A :: CMDEXEC_VAL_NOEXECUTE) } # [doc = "EXECUTE"] # [inline (always)] pub fn cmdexec_val_execute (self) -> & 'a mut crate :: W < REG > { self . variant (CMDEXEC_VAL_A :: CMDEXEC_VAL_EXECUTE) } } impl R { # [doc = "Bit 0 - Command Execute value Initiates execution of the command specified in the CMDTYPE register."] # [inline (always)] pub fn cmdexec_val (& self) -> CMDEXEC_VAL_R { CMDEXEC_VAL_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Command Execute value Initiates execution of the command specified in the CMDTYPE register."] # [inline (always)] # [must_use] pub fn cmdexec_val (& mut self) -> CMDEXEC_VAL_W < CMDEXEC_SPEC , 0 > { CMDEXEC_VAL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Command Execute Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cmdexec::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cmdexec::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CMDEXEC_SPEC ; impl crate :: RegisterSpec for CMDEXEC_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cmdexec::R`](R) reader structure"] impl crate :: Readable for CMDEXEC_SPEC { } # [doc = "`write(|w| ..)` method takes [`cmdexec::W`](W) writer structure"] impl crate :: Writable for CMDEXEC_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CMDEXEC to value 0"] impl crate :: Resettable for CMDEXEC_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }