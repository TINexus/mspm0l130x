# [doc = "Register `CFGCMD` reader"] pub type R = crate :: R < CFGCMD_SPEC > ; # [doc = "Register `CFGCMD` writer"] pub type W = crate :: W < CFGCMD_SPEC > ; # [doc = "Field `CFGCMD_WAITSTATE` reader - Wait State setting for program verify, erase verify and read verify"] pub type CFGCMD_WAITSTATE_R = crate :: FieldReader ; # [doc = "Field `CFGCMD_WAITSTATE` writer - Wait State setting for program verify, erase verify and read verify"] pub type CFGCMD_WAITSTATE_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 4 , O > ; impl R { # [doc = "Bits 0:3 - Wait State setting for program verify, erase verify and read verify"] # [inline (always)] pub fn cfgcmd_waitstate (& self) -> CFGCMD_WAITSTATE_R { CFGCMD_WAITSTATE_R :: new ((self . bits & 0x0f) as u8) } } impl W { # [doc = "Bits 0:3 - Wait State setting for program verify, erase verify and read verify"] # [inline (always)] # [must_use] pub fn cfgcmd_waitstate (& mut self) -> CFGCMD_WAITSTATE_W < CFGCMD_SPEC , 0 > { CFGCMD_WAITSTATE_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Command Configuration Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cfgcmd::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cfgcmd::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CFGCMD_SPEC ; impl crate :: RegisterSpec for CFGCMD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cfgcmd::R`](R) reader structure"] impl crate :: Readable for CFGCMD_SPEC { } # [doc = "`write(|w| ..)` method takes [`cfgcmd::W`](W) writer structure"] impl crate :: Writable for CFGCMD_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CFGCMD to value 0"] impl crate :: Resettable for CFGCMD_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }