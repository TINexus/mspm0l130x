# [doc = "Register `GBLINFO1` reader"] pub type R = crate :: R < GBLINFO1_SPEC > ; # [doc = "Field `GBLINFO1_DATAWIDTH` reader - Data width in bits"] pub type GBLINFO1_DATAWIDTH_R = crate :: FieldReader < GBLINFO1_DATAWIDTH_A > ; # [doc = "Data width in bits\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum GBLINFO1_DATAWIDTH_A { # [doc = "64: W64BIT"] GBLINFO1_DATAWIDTH_W64BIT = 64 , # [doc = "128: W128BIT"] GBLINFO1_DATAWIDTH_W128BIT = 128 , } impl From < GBLINFO1_DATAWIDTH_A > for u8 { # [inline (always)] fn from (variant : GBLINFO1_DATAWIDTH_A) -> Self { variant as _ } } impl crate :: FieldSpec for GBLINFO1_DATAWIDTH_A { type Ux = u8 ; } impl GBLINFO1_DATAWIDTH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < GBLINFO1_DATAWIDTH_A > { match self . bits { 64 => Some (GBLINFO1_DATAWIDTH_A :: GBLINFO1_DATAWIDTH_W64BIT) , 128 => Some (GBLINFO1_DATAWIDTH_A :: GBLINFO1_DATAWIDTH_W128BIT) , _ => None , } } # [doc = "W64BIT"] # [inline (always)] pub fn is_gblinfo1_datawidth_w64bit (& self) -> bool { * self == GBLINFO1_DATAWIDTH_A :: GBLINFO1_DATAWIDTH_W64BIT } # [doc = "W128BIT"] # [inline (always)] pub fn is_gblinfo1_datawidth_w128bit (& self) -> bool { * self == GBLINFO1_DATAWIDTH_A :: GBLINFO1_DATAWIDTH_W128BIT } } # [doc = "Field `GBLINFO1_ECCWIDTH` reader - ECC data width in bits"] pub type GBLINFO1_ECCWIDTH_R = crate :: FieldReader < GBLINFO1_ECCWIDTH_A > ; # [doc = "ECC data width in bits\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum GBLINFO1_ECCWIDTH_A { # [doc = "0: W0BIT"] GBLINFO1_ECCWIDTH_W0BIT = 0 , # [doc = "8: W8BIT"] GBLINFO1_ECCWIDTH_W8BIT = 8 , # [doc = "16: W16BIT"] GBLINFO1_ECCWIDTH_W16BIT = 16 , } impl From < GBLINFO1_ECCWIDTH_A > for u8 { # [inline (always)] fn from (variant : GBLINFO1_ECCWIDTH_A) -> Self { variant as _ } } impl crate :: FieldSpec for GBLINFO1_ECCWIDTH_A { type Ux = u8 ; } impl GBLINFO1_ECCWIDTH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < GBLINFO1_ECCWIDTH_A > { match self . bits { 0 => Some (GBLINFO1_ECCWIDTH_A :: GBLINFO1_ECCWIDTH_W0BIT) , 8 => Some (GBLINFO1_ECCWIDTH_A :: GBLINFO1_ECCWIDTH_W8BIT) , 16 => Some (GBLINFO1_ECCWIDTH_A :: GBLINFO1_ECCWIDTH_W16BIT) , _ => None , } } # [doc = "W0BIT"] # [inline (always)] pub fn is_gblinfo1_eccwidth_w0bit (& self) -> bool { * self == GBLINFO1_ECCWIDTH_A :: GBLINFO1_ECCWIDTH_W0BIT } # [doc = "W8BIT"] # [inline (always)] pub fn is_gblinfo1_eccwidth_w8bit (& self) -> bool { * self == GBLINFO1_ECCWIDTH_A :: GBLINFO1_ECCWIDTH_W8BIT } # [doc = "W16BIT"] # [inline (always)] pub fn is_gblinfo1_eccwidth_w16bit (& self) -> bool { * self == GBLINFO1_ECCWIDTH_A :: GBLINFO1_ECCWIDTH_W16BIT } } # [doc = "Field `GBLINFO1_REDWIDTH` reader - Redundant data width in bits"] pub type GBLINFO1_REDWIDTH_R = crate :: FieldReader < GBLINFO1_REDWIDTH_A > ; # [doc = "Redundant data width in bits\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum GBLINFO1_REDWIDTH_A { # [doc = "0: W0BIT"] GBLINFO1_REDWIDTH_W0BIT = 0 , # [doc = "2: W2BIT"] GBLINFO1_REDWIDTH_W2BIT = 2 , # [doc = "4: W4BIT"] GBLINFO1_REDWIDTH_W4BIT = 4 , } impl From < GBLINFO1_REDWIDTH_A > for u8 { # [inline (always)] fn from (variant : GBLINFO1_REDWIDTH_A) -> Self { variant as _ } } impl crate :: FieldSpec for GBLINFO1_REDWIDTH_A { type Ux = u8 ; } impl GBLINFO1_REDWIDTH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < GBLINFO1_REDWIDTH_A > { match self . bits { 0 => Some (GBLINFO1_REDWIDTH_A :: GBLINFO1_REDWIDTH_W0BIT) , 2 => Some (GBLINFO1_REDWIDTH_A :: GBLINFO1_REDWIDTH_W2BIT) , 4 => Some (GBLINFO1_REDWIDTH_A :: GBLINFO1_REDWIDTH_W4BIT) , _ => None , } } # [doc = "W0BIT"] # [inline (always)] pub fn is_gblinfo1_redwidth_w0bit (& self) -> bool { * self == GBLINFO1_REDWIDTH_A :: GBLINFO1_REDWIDTH_W0BIT } # [doc = "W2BIT"] # [inline (always)] pub fn is_gblinfo1_redwidth_w2bit (& self) -> bool { * self == GBLINFO1_REDWIDTH_A :: GBLINFO1_REDWIDTH_W2BIT } # [doc = "W4BIT"] # [inline (always)] pub fn is_gblinfo1_redwidth_w4bit (& self) -> bool { * self == GBLINFO1_REDWIDTH_A :: GBLINFO1_REDWIDTH_W4BIT } } impl R { # [doc = "Bits 0:7 - Data width in bits"] # [inline (always)] pub fn gblinfo1_datawidth (& self) -> GBLINFO1_DATAWIDTH_R { GBLINFO1_DATAWIDTH_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:12 - ECC data width in bits"] # [inline (always)] pub fn gblinfo1_eccwidth (& self) -> GBLINFO1_ECCWIDTH_R { GBLINFO1_ECCWIDTH_R :: new (((self . bits >> 8) & 0x1f) as u8) } # [doc = "Bits 16:18 - Redundant data width in bits"] # [inline (always)] pub fn gblinfo1_redwidth (& self) -> GBLINFO1_REDWIDTH_R { GBLINFO1_REDWIDTH_R :: new (((self . bits >> 16) & 7) as u8) } } # [doc = "Global Information Register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`gblinfo1::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GBLINFO1_SPEC ; impl crate :: RegisterSpec for GBLINFO1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`gblinfo1::R`](R) reader structure"] impl crate :: Readable for GBLINFO1_SPEC { } # [doc = "`reset()` method sets GBLINFO1 to value 0"] impl crate :: Resettable for GBLINFO1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }