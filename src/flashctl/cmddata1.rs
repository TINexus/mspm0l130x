# [doc = "Register `CMDDATA1` reader"] pub type R = crate :: R < CMDDATA1_SPEC > ; # [doc = "Register `CMDDATA1` writer"] pub type W = crate :: W < CMDDATA1_SPEC > ; # [doc = "Field `CMDDATA1_VAL` reader - A 32-bit data value is placed in this field."] pub type CMDDATA1_VAL_R = crate :: FieldReader < u32 > ; # [doc = "Field `CMDDATA1_VAL` writer - A 32-bit data value is placed in this field."] pub type CMDDATA1_VAL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 32 , O , u32 > ; impl R { # [doc = "Bits 0:31 - A 32-bit data value is placed in this field."] # [inline (always)] pub fn cmddata1_val (& self) -> CMDDATA1_VAL_R { CMDDATA1_VAL_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - A 32-bit data value is placed in this field."] # [inline (always)] # [must_use] pub fn cmddata1_val (& mut self) -> CMDDATA1_VAL_W < CMDDATA1_SPEC , 0 > { CMDDATA1_VAL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Command Data Register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cmddata1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cmddata1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CMDDATA1_SPEC ; impl crate :: RegisterSpec for CMDDATA1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cmddata1::R`](R) reader structure"] impl crate :: Readable for CMDDATA1_SPEC { } # [doc = "`write(|w| ..)` method takes [`cmddata1::W`](W) writer structure"] impl crate :: Writable for CMDDATA1_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CMDDATA1 to value 0"] impl crate :: Resettable for CMDDATA1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }