# [doc = "Register `IIDX` reader"] pub type R = crate :: R < IIDX_SPEC > ; # [doc = "Field `IIDX_STAT` reader - Indicates which interrupt has fired. 0x0 means no event pending. The priority order is fixed. On each read, only one interrupt is indicated. On a read, the current interrupt (highest priority) is automatically cleared by the hardware and the corresponding interrupt flags in the RIS and MIS are cleared as well. After a read from the CPU (not from the debug interface), the register must be updated with the next highest priority interrupt."] pub type IIDX_STAT_R = crate :: BitReader < IIDX_STAT_A > ; # [doc = "Indicates which interrupt has fired. 0x0 means no event pending. The priority order is fixed. On each read, only one interrupt is indicated. On a read, the current interrupt (highest priority) is automatically cleared by the hardware and the corresponding interrupt flags in the RIS and MIS are cleared as well. After a read from the CPU (not from the debug interface), the register must be updated with the next highest priority interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IIDX_STAT_A { # [doc = "0: NO_INTR"] IIDX_STAT_NO_INTR = 0 , # [doc = "1: DONE"] IIDX_STAT_DONE = 1 , } impl From < IIDX_STAT_A > for bool { # [inline (always)] fn from (variant : IIDX_STAT_A) -> Self { variant as u8 != 0 } } impl IIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IIDX_STAT_A { match self . bits { false => IIDX_STAT_A :: IIDX_STAT_NO_INTR , true => IIDX_STAT_A :: IIDX_STAT_DONE , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_iidx_stat_no_intr (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_NO_INTR } # [doc = "DONE"] # [inline (always)] pub fn is_iidx_stat_done (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_DONE } } impl R { # [doc = "Bit 0 - Indicates which interrupt has fired. 0x0 means no event pending. The priority order is fixed. On each read, only one interrupt is indicated. On a read, the current interrupt (highest priority) is automatically cleared by the hardware and the corresponding interrupt flags in the RIS and MIS are cleared as well. After a read from the CPU (not from the debug interface), the register must be updated with the next highest priority interrupt."] # [inline (always)] pub fn iidx_stat (& self) -> IIDX_STAT_R { IIDX_STAT_R :: new ((self . bits & 1) != 0) } } # [doc = "Interrupt Index Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`iidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IIDX_SPEC ; impl crate :: RegisterSpec for IIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`iidx::R`](R) reader structure"] impl crate :: Readable for IIDX_SPEC { } # [doc = "`reset()` method sets IIDX to value 0"] impl crate :: Resettable for IIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }