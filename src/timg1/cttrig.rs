# [doc = "Register `CTTRIG` writer"] pub type W = crate :: W < CTTRIG_SPEC > ; # [doc = "Generate Cross Trigger This bit when programmed will generate a synchronized trigger condition all the cross trigger enabled Timer instances including current timer instance.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTTRIG_TRIG_AW { # [doc = "0: DISABLED"] CTTRIG_TRIG_DISABLED = 0 , # [doc = "1: GENERATE"] CTTRIG_TRIG_GENERATE = 1 , } impl From < CTTRIG_TRIG_AW > for bool { # [inline (always)] fn from (variant : CTTRIG_TRIG_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `CTTRIG_TRIG` writer - Generate Cross Trigger This bit when programmed will generate a synchronized trigger condition all the cross trigger enabled Timer instances including current timer instance."] pub type CTTRIG_TRIG_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CTTRIG_TRIG_AW > ; impl < 'a , REG , const O : u8 > CTTRIG_TRIG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLED"] # [inline (always)] pub fn cttrig_trig_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CTTRIG_TRIG_AW :: CTTRIG_TRIG_DISABLED) } # [doc = "GENERATE"] # [inline (always)] pub fn cttrig_trig_generate (self) -> & 'a mut crate :: W < REG > { self . variant (CTTRIG_TRIG_AW :: CTTRIG_TRIG_GENERATE) } } impl W { # [doc = "Bit 0 - Generate Cross Trigger This bit when programmed will generate a synchronized trigger condition all the cross trigger enabled Timer instances including current timer instance."] # [inline (always)] # [must_use] pub fn cttrig_trig (& mut self) -> CTTRIG_TRIG_W < CTTRIG_SPEC , 0 > { CTTRIG_TRIG_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Timer Cross Trigger Register\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cttrig::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CTTRIG_SPEC ; impl crate :: RegisterSpec for CTTRIG_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`cttrig::W`](W) writer structure"] impl crate :: Writable for CTTRIG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CTTRIG to value 0"] impl crate :: Resettable for CTTRIG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }