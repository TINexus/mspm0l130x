# [doc = "Register `IIDX` reader"] pub type R = crate :: R < IIDX_SPEC > ; # [doc = "Field `IIDX_STAT` reader - Interrupt index status"] pub type IIDX_STAT_R = crate :: FieldReader < IIDX_STAT_A > ; # [doc = "Interrupt index status\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum IIDX_STAT_A { # [doc = "0: NO_INTR"] IIDX_STAT_NO_INTR = 0 , # [doc = "1: Z"] IIDX_STAT_Z = 1 , # [doc = "2: L"] IIDX_STAT_L = 2 , # [doc = "5: CCD0"] IIDX_STAT_CCD0 = 5 , # [doc = "6: CCD1"] IIDX_STAT_CCD1 = 6 , # [doc = "7: CCD2"] IIDX_STAT_CCD2 = 7 , # [doc = "8: CCD3"] IIDX_STAT_CCD3 = 8 , # [doc = "9: CCU0"] IIDX_STAT_CCU0 = 9 , # [doc = "10: CCU1"] IIDX_STAT_CCU1 = 10 , # [doc = "11: CCU2"] IIDX_STAT_CCU2 = 11 , # [doc = "12: CCU3"] IIDX_STAT_CCU3 = 12 , # [doc = "13: CCD4"] IIDX_STAT_CCD4 = 13 , # [doc = "14: CCD5"] IIDX_STAT_CCD5 = 14 , # [doc = "15: CCU4"] IIDX_STAT_CCU4 = 15 , # [doc = "16: CCU5"] IIDX_STAT_CCU5 = 16 , # [doc = "25: F"] IIDX_STAT_F = 25 , # [doc = "26: TOV"] IIDX_STAT_TOV = 26 , # [doc = "27: REPC"] IIDX_STAT_REPC = 27 , # [doc = "28: DC"] IIDX_STAT_DC = 28 , # [doc = "29: QEIERR"] IIDX_STAT_QEIERR = 29 , } impl From < IIDX_STAT_A > for u8 { # [inline (always)] fn from (variant : IIDX_STAT_A) -> Self { variant as _ } } impl crate :: FieldSpec for IIDX_STAT_A { type Ux = u8 ; } impl IIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < IIDX_STAT_A > { match self . bits { 0 => Some (IIDX_STAT_A :: IIDX_STAT_NO_INTR) , 1 => Some (IIDX_STAT_A :: IIDX_STAT_Z) , 2 => Some (IIDX_STAT_A :: IIDX_STAT_L) , 5 => Some (IIDX_STAT_A :: IIDX_STAT_CCD0) , 6 => Some (IIDX_STAT_A :: IIDX_STAT_CCD1) , 7 => Some (IIDX_STAT_A :: IIDX_STAT_CCD2) , 8 => Some (IIDX_STAT_A :: IIDX_STAT_CCD3) , 9 => Some (IIDX_STAT_A :: IIDX_STAT_CCU0) , 10 => Some (IIDX_STAT_A :: IIDX_STAT_CCU1) , 11 => Some (IIDX_STAT_A :: IIDX_STAT_CCU2) , 12 => Some (IIDX_STAT_A :: IIDX_STAT_CCU3) , 13 => Some (IIDX_STAT_A :: IIDX_STAT_CCD4) , 14 => Some (IIDX_STAT_A :: IIDX_STAT_CCD5) , 15 => Some (IIDX_STAT_A :: IIDX_STAT_CCU4) , 16 => Some (IIDX_STAT_A :: IIDX_STAT_CCU5) , 25 => Some (IIDX_STAT_A :: IIDX_STAT_F) , 26 => Some (IIDX_STAT_A :: IIDX_STAT_TOV) , 27 => Some (IIDX_STAT_A :: IIDX_STAT_REPC) , 28 => Some (IIDX_STAT_A :: IIDX_STAT_DC) , 29 => Some (IIDX_STAT_A :: IIDX_STAT_QEIERR) , _ => None , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_iidx_stat_no_intr (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_NO_INTR } # [doc = "Z"] # [inline (always)] pub fn is_iidx_stat_z (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_Z } # [doc = "L"] # [inline (always)] pub fn is_iidx_stat_l (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_L } # [doc = "CCD0"] # [inline (always)] pub fn is_iidx_stat_ccd0 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCD0 } # [doc = "CCD1"] # [inline (always)] pub fn is_iidx_stat_ccd1 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCD1 } # [doc = "CCD2"] # [inline (always)] pub fn is_iidx_stat_ccd2 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCD2 } # [doc = "CCD3"] # [inline (always)] pub fn is_iidx_stat_ccd3 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCD3 } # [doc = "CCU0"] # [inline (always)] pub fn is_iidx_stat_ccu0 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCU0 } # [doc = "CCU1"] # [inline (always)] pub fn is_iidx_stat_ccu1 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCU1 } # [doc = "CCU2"] # [inline (always)] pub fn is_iidx_stat_ccu2 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCU2 } # [doc = "CCU3"] # [inline (always)] pub fn is_iidx_stat_ccu3 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCU3 } # [doc = "CCD4"] # [inline (always)] pub fn is_iidx_stat_ccd4 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCD4 } # [doc = "CCD5"] # [inline (always)] pub fn is_iidx_stat_ccd5 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCD5 } # [doc = "CCU4"] # [inline (always)] pub fn is_iidx_stat_ccu4 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCU4 } # [doc = "CCU5"] # [inline (always)] pub fn is_iidx_stat_ccu5 (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_CCU5 } # [doc = "F"] # [inline (always)] pub fn is_iidx_stat_f (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_F } # [doc = "TOV"] # [inline (always)] pub fn is_iidx_stat_tov (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_TOV } # [doc = "REPC"] # [inline (always)] pub fn is_iidx_stat_repc (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_REPC } # [doc = "DC"] # [inline (always)] pub fn is_iidx_stat_dc (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_DC } # [doc = "QEIERR"] # [inline (always)] pub fn is_iidx_stat_qeierr (& self) -> bool { * self == IIDX_STAT_A :: IIDX_STAT_QEIERR } } impl R { # [doc = "Bits 0:7 - Interrupt index status"] # [inline (always)] pub fn iidx_stat (& self) -> IIDX_STAT_R { IIDX_STAT_R :: new ((self . bits & 0xff) as u8) } } # [doc = "Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`iidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IIDX_SPEC ; impl crate :: RegisterSpec for IIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`iidx::R`](R) reader structure"] impl crate :: Readable for IIDX_SPEC { } # [doc = "`reset()` method sets IIDX to value 0"] impl crate :: Resettable for IIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }