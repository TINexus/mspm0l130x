# [doc = "Register `CTL1` reader"] pub type R = crate :: R < CTL1_SPEC > ; # [doc = "Register `CTL1` writer"] pub type W = crate :: W < CTL1_SPEC > ; # [doc = "Field `CTL1_READY` reader - These bits defines status of VREF"] pub type CTL1_READY_R = crate :: BitReader < CTL1_READY_A > ; # [doc = "These bits defines status of VREF\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTL1_READY_A { # [doc = "0: NOTRDY"] CTL1_READY_NOTRDY = 0 , # [doc = "1: RDY"] CTL1_READY_RDY = 1 , } impl From < CTL1_READY_A > for bool { # [inline (always)] fn from (variant : CTL1_READY_A) -> Self { variant as u8 != 0 } } impl CTL1_READY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_READY_A { match self . bits { false => CTL1_READY_A :: CTL1_READY_NOTRDY , true => CTL1_READY_A :: CTL1_READY_RDY , } } # [doc = "NOTRDY"] # [inline (always)] pub fn is_ctl1_ready_notrdy (& self) -> bool { * self == CTL1_READY_A :: CTL1_READY_NOTRDY } # [doc = "RDY"] # [inline (always)] pub fn is_ctl1_ready_rdy (& self) -> bool { * self == CTL1_READY_A :: CTL1_READY_RDY } } # [doc = "Field `CTL1_VREFLOSEL` reader - This bit select VREFLO pin"] pub type CTL1_VREFLOSEL_R = crate :: BitReader ; # [doc = "Field `CTL1_VREFLOSEL` writer - This bit select VREFLO pin"] pub type CTL1_VREFLOSEL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; impl R { # [doc = "Bit 0 - These bits defines status of VREF"] # [inline (always)] pub fn ctl1_ready (& self) -> CTL1_READY_R { CTL1_READY_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - This bit select VREFLO pin"] # [inline (always)] pub fn ctl1_vreflosel (& self) -> CTL1_VREFLOSEL_R { CTL1_VREFLOSEL_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 1 - This bit select VREFLO pin"] # [inline (always)] # [must_use] pub fn ctl1_vreflosel (& mut self) -> CTL1_VREFLOSEL_W < CTL1_SPEC , 1 > { CTL1_VREFLOSEL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Control 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CTL1_SPEC ; impl crate :: RegisterSpec for CTL1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ctl1::R`](R) reader structure"] impl crate :: Readable for CTL1_SPEC { } # [doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"] impl crate :: Writable for CTL1_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CTL1 to value 0"] impl crate :: Resettable for CTL1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }