# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { _reserved0 : [u8 ; 0x10e0] , # [doc = "0x10e0 - Event Mode"] pub evt_mode : EVT_MODE , _reserved1 : [u8 ; 0x18] , # [doc = "0x10fc - Module Description"] pub desc : DESC , # [doc = "0x1100 - Interrupt index"] pub int_group0_iidx : INT_GROUP0_IIDX , _reserved3 : [u8 ; 0x04] , # [doc = "0x1108 - Interrupt mask"] pub int_group0_imask : INT_GROUP0_IMASK , _reserved4 : [u8 ; 0x04] , # [doc = "0x1110 - Raw interrupt status"] pub int_group0_ris : INT_GROUP0_RIS , _reserved5 : [u8 ; 0x04] , # [doc = "0x1118 - Masked interrupt status"] pub int_group0_mis : INT_GROUP0_MIS , _reserved6 : [u8 ; 0x04] , # [doc = "0x1120 - Interrupt set"] pub int_group0_iset : INT_GROUP0_ISET , _reserved7 : [u8 ; 0x04] , # [doc = "0x1128 - Interrupt clear"] pub int_group0_iclr : INT_GROUP0_ICLR , _reserved8 : [u8 ; 0x04] , # [doc = "0x1130 - Interrupt index"] pub int_group1_iidx : INT_GROUP1_IIDX , _reserved9 : [u8 ; 0x04] , # [doc = "0x1138 - Interrupt mask"] pub int_group1_imask : INT_GROUP1_IMASK , _reserved10 : [u8 ; 0x04] , # [doc = "0x1140 - Raw interrupt status"] pub int_group1_ris : INT_GROUP1_RIS , _reserved11 : [u8 ; 0x04] , # [doc = "0x1148 - Masked interrupt status"] pub int_group1_mis : INT_GROUP1_MIS , _reserved12 : [u8 ; 0x04] , # [doc = "0x1150 - Interrupt set"] pub int_group1_iset : INT_GROUP1_ISET , _reserved13 : [u8 ; 0x04] , # [doc = "0x1158 - Interrupt clear"] pub int_group1_iclr : INT_GROUP1_ICLR , _reserved14 : [u8 ; 0x01a4] , # [doc = "0x1300 - Prefetch/Cache control"] pub ctl : CTL , } # [doc = "EVT_MODE (r) register accessor: Event Mode\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evt_mode::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evt_mode`]
module"] pub type EVT_MODE = crate :: Reg < evt_mode :: EVT_MODE_SPEC > ; # [doc = "Event Mode"] pub mod evt_mode ; # [doc = "DESC (r) register accessor: Module Description\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`desc::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@desc`]
module"] pub type DESC = crate :: Reg < desc :: DESC_SPEC > ; # [doc = "Module Description"] pub mod desc ; # [doc = "INT_GROUP0_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group0_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group0_iidx`]
module"] pub type INT_GROUP0_IIDX = crate :: Reg < int_group0_iidx :: INT_GROUP0_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_group0_iidx ; # [doc = "INT_GROUP0_IMASK (r) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group0_imask::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group0_imask`]
module"] pub type INT_GROUP0_IMASK = crate :: Reg < int_group0_imask :: INT_GROUP0_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_group0_imask ; # [doc = "INT_GROUP0_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group0_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group0_ris`]
module"] pub type INT_GROUP0_RIS = crate :: Reg < int_group0_ris :: INT_GROUP0_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_group0_ris ; # [doc = "INT_GROUP0_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group0_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group0_mis`]
module"] pub type INT_GROUP0_MIS = crate :: Reg < int_group0_mis :: INT_GROUP0_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_group0_mis ; # [doc = "INT_GROUP0_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_group0_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group0_iset`]
module"] pub type INT_GROUP0_ISET = crate :: Reg < int_group0_iset :: INT_GROUP0_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_group0_iset ; # [doc = "INT_GROUP0_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_group0_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group0_iclr`]
module"] pub type INT_GROUP0_ICLR = crate :: Reg < int_group0_iclr :: INT_GROUP0_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_group0_iclr ; # [doc = "INT_GROUP1_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group1_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group1_iidx`]
module"] pub type INT_GROUP1_IIDX = crate :: Reg < int_group1_iidx :: INT_GROUP1_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_group1_iidx ; # [doc = "INT_GROUP1_IMASK (r) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group1_imask::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group1_imask`]
module"] pub type INT_GROUP1_IMASK = crate :: Reg < int_group1_imask :: INT_GROUP1_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_group1_imask ; # [doc = "INT_GROUP1_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group1_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group1_ris`]
module"] pub type INT_GROUP1_RIS = crate :: Reg < int_group1_ris :: INT_GROUP1_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_group1_ris ; # [doc = "INT_GROUP1_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group1_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group1_mis`]
module"] pub type INT_GROUP1_MIS = crate :: Reg < int_group1_mis :: INT_GROUP1_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_group1_mis ; # [doc = "INT_GROUP1_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_group1_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group1_iset`]
module"] pub type INT_GROUP1_ISET = crate :: Reg < int_group1_iset :: INT_GROUP1_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_group1_iset ; # [doc = "INT_GROUP1_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_group1_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_group1_iclr`]
module"] pub type INT_GROUP1_ICLR = crate :: Reg < int_group1_iclr :: INT_GROUP1_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_group1_iclr ; # [doc = "CTL (rw) register accessor: Prefetch/Cache control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"] pub type CTL = crate :: Reg < ctl :: CTL_SPEC > ; # [doc = "Prefetch/Cache control"] pub mod ctl ;