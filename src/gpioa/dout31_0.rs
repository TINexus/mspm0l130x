# [doc = "Register `DOUT31_0` reader"] pub type R = crate :: R < DOUT31_0_SPEC > ; # [doc = "Register `DOUT31_0` writer"] pub type W = crate :: W < DOUT31_0_SPEC > ; # [doc = "Field `DOUT31_0_DIO0` reader - This bit sets the value of the pin configured as DIO0 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO0_R = crate :: BitReader < DOUT31_0_DIO0_A > ; # [doc = "This bit sets the value of the pin configured as DIO0 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO0_A { # [doc = "0: ZERO"] DOUT31_0_DIO0_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO0_ONE = 1 , } impl From < DOUT31_0_DIO0_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO0_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO0_A { match self . bits { false => DOUT31_0_DIO0_A :: DOUT31_0_DIO0_ZERO , true => DOUT31_0_DIO0_A :: DOUT31_0_DIO0_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio0_zero (& self) -> bool { * self == DOUT31_0_DIO0_A :: DOUT31_0_DIO0_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio0_one (& self) -> bool { * self == DOUT31_0_DIO0_A :: DOUT31_0_DIO0_ONE } } # [doc = "Field `DOUT31_0_DIO0` writer - This bit sets the value of the pin configured as DIO0 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO0_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio0_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO0_A :: DOUT31_0_DIO0_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio0_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO0_A :: DOUT31_0_DIO0_ONE) } } # [doc = "Field `DOUT31_0_DIO1` reader - This bit sets the value of the pin configured as DIO1 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO1_R = crate :: BitReader < DOUT31_0_DIO1_A > ; # [doc = "This bit sets the value of the pin configured as DIO1 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO1_A { # [doc = "0: ZERO"] DOUT31_0_DIO1_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO1_ONE = 1 , } impl From < DOUT31_0_DIO1_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO1_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO1_A { match self . bits { false => DOUT31_0_DIO1_A :: DOUT31_0_DIO1_ZERO , true => DOUT31_0_DIO1_A :: DOUT31_0_DIO1_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio1_zero (& self) -> bool { * self == DOUT31_0_DIO1_A :: DOUT31_0_DIO1_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio1_one (& self) -> bool { * self == DOUT31_0_DIO1_A :: DOUT31_0_DIO1_ONE } } # [doc = "Field `DOUT31_0_DIO1` writer - This bit sets the value of the pin configured as DIO1 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO1_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio1_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO1_A :: DOUT31_0_DIO1_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio1_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO1_A :: DOUT31_0_DIO1_ONE) } } # [doc = "Field `DOUT31_0_DIO2` reader - This bit sets the value of the pin configured as DIO2 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO2_R = crate :: BitReader < DOUT31_0_DIO2_A > ; # [doc = "This bit sets the value of the pin configured as DIO2 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO2_A { # [doc = "0: ZERO"] DOUT31_0_DIO2_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO2_ONE = 1 , } impl From < DOUT31_0_DIO2_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO2_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO2_A { match self . bits { false => DOUT31_0_DIO2_A :: DOUT31_0_DIO2_ZERO , true => DOUT31_0_DIO2_A :: DOUT31_0_DIO2_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio2_zero (& self) -> bool { * self == DOUT31_0_DIO2_A :: DOUT31_0_DIO2_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio2_one (& self) -> bool { * self == DOUT31_0_DIO2_A :: DOUT31_0_DIO2_ONE } } # [doc = "Field `DOUT31_0_DIO2` writer - This bit sets the value of the pin configured as DIO2 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO2_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio2_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO2_A :: DOUT31_0_DIO2_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio2_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO2_A :: DOUT31_0_DIO2_ONE) } } # [doc = "Field `DOUT31_0_DIO3` reader - This bit sets the value of the pin configured as DIO3 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO3_R = crate :: BitReader < DOUT31_0_DIO3_A > ; # [doc = "This bit sets the value of the pin configured as DIO3 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO3_A { # [doc = "0: ZERO"] DOUT31_0_DIO3_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO3_ONE = 1 , } impl From < DOUT31_0_DIO3_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO3_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO3_A { match self . bits { false => DOUT31_0_DIO3_A :: DOUT31_0_DIO3_ZERO , true => DOUT31_0_DIO3_A :: DOUT31_0_DIO3_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio3_zero (& self) -> bool { * self == DOUT31_0_DIO3_A :: DOUT31_0_DIO3_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio3_one (& self) -> bool { * self == DOUT31_0_DIO3_A :: DOUT31_0_DIO3_ONE } } # [doc = "Field `DOUT31_0_DIO3` writer - This bit sets the value of the pin configured as DIO3 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO3_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO3_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio3_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO3_A :: DOUT31_0_DIO3_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio3_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO3_A :: DOUT31_0_DIO3_ONE) } } # [doc = "Field `DOUT31_0_DIO4` reader - This bit sets the value of the pin configured as DIO4 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO4_R = crate :: BitReader < DOUT31_0_DIO4_A > ; # [doc = "This bit sets the value of the pin configured as DIO4 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO4_A { # [doc = "0: ZERO"] DOUT31_0_DIO4_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO4_ONE = 1 , } impl From < DOUT31_0_DIO4_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO4_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO4_A { match self . bits { false => DOUT31_0_DIO4_A :: DOUT31_0_DIO4_ZERO , true => DOUT31_0_DIO4_A :: DOUT31_0_DIO4_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio4_zero (& self) -> bool { * self == DOUT31_0_DIO4_A :: DOUT31_0_DIO4_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio4_one (& self) -> bool { * self == DOUT31_0_DIO4_A :: DOUT31_0_DIO4_ONE } } # [doc = "Field `DOUT31_0_DIO4` writer - This bit sets the value of the pin configured as DIO4 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO4_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO4_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio4_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO4_A :: DOUT31_0_DIO4_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio4_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO4_A :: DOUT31_0_DIO4_ONE) } } # [doc = "Field `DOUT31_0_DIO5` reader - This bit sets the value of the pin configured as DIO5 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO5_R = crate :: BitReader < DOUT31_0_DIO5_A > ; # [doc = "This bit sets the value of the pin configured as DIO5 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO5_A { # [doc = "0: ZERO"] DOUT31_0_DIO5_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO5_ONE = 1 , } impl From < DOUT31_0_DIO5_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO5_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO5_A { match self . bits { false => DOUT31_0_DIO5_A :: DOUT31_0_DIO5_ZERO , true => DOUT31_0_DIO5_A :: DOUT31_0_DIO5_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio5_zero (& self) -> bool { * self == DOUT31_0_DIO5_A :: DOUT31_0_DIO5_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio5_one (& self) -> bool { * self == DOUT31_0_DIO5_A :: DOUT31_0_DIO5_ONE } } # [doc = "Field `DOUT31_0_DIO5` writer - This bit sets the value of the pin configured as DIO5 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO5_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO5_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio5_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO5_A :: DOUT31_0_DIO5_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio5_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO5_A :: DOUT31_0_DIO5_ONE) } } # [doc = "Field `DOUT31_0_DIO6` reader - This bit sets the value of the pin configured as DIO6 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO6_R = crate :: BitReader < DOUT31_0_DIO6_A > ; # [doc = "This bit sets the value of the pin configured as DIO6 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO6_A { # [doc = "0: ZERO"] DOUT31_0_DIO6_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO6_ONE = 1 , } impl From < DOUT31_0_DIO6_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO6_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO6_A { match self . bits { false => DOUT31_0_DIO6_A :: DOUT31_0_DIO6_ZERO , true => DOUT31_0_DIO6_A :: DOUT31_0_DIO6_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio6_zero (& self) -> bool { * self == DOUT31_0_DIO6_A :: DOUT31_0_DIO6_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio6_one (& self) -> bool { * self == DOUT31_0_DIO6_A :: DOUT31_0_DIO6_ONE } } # [doc = "Field `DOUT31_0_DIO6` writer - This bit sets the value of the pin configured as DIO6 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO6_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO6_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio6_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO6_A :: DOUT31_0_DIO6_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio6_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO6_A :: DOUT31_0_DIO6_ONE) } } # [doc = "Field `DOUT31_0_DIO7` reader - This bit sets the value of the pin configured as DIO7 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO7_R = crate :: BitReader < DOUT31_0_DIO7_A > ; # [doc = "This bit sets the value of the pin configured as DIO7 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO7_A { # [doc = "0: ZERO"] DOUT31_0_DIO7_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO7_ONE = 1 , } impl From < DOUT31_0_DIO7_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO7_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO7_A { match self . bits { false => DOUT31_0_DIO7_A :: DOUT31_0_DIO7_ZERO , true => DOUT31_0_DIO7_A :: DOUT31_0_DIO7_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio7_zero (& self) -> bool { * self == DOUT31_0_DIO7_A :: DOUT31_0_DIO7_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio7_one (& self) -> bool { * self == DOUT31_0_DIO7_A :: DOUT31_0_DIO7_ONE } } # [doc = "Field `DOUT31_0_DIO7` writer - This bit sets the value of the pin configured as DIO7 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO7_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO7_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio7_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO7_A :: DOUT31_0_DIO7_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio7_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO7_A :: DOUT31_0_DIO7_ONE) } } # [doc = "Field `DOUT31_0_DIO8` reader - This bit sets the value of the pin configured as DIO8 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO8_R = crate :: BitReader < DOUT31_0_DIO8_A > ; # [doc = "This bit sets the value of the pin configured as DIO8 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO8_A { # [doc = "0: ZERO"] DOUT31_0_DIO8_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO8_ONE = 1 , } impl From < DOUT31_0_DIO8_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO8_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO8_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO8_A { match self . bits { false => DOUT31_0_DIO8_A :: DOUT31_0_DIO8_ZERO , true => DOUT31_0_DIO8_A :: DOUT31_0_DIO8_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio8_zero (& self) -> bool { * self == DOUT31_0_DIO8_A :: DOUT31_0_DIO8_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio8_one (& self) -> bool { * self == DOUT31_0_DIO8_A :: DOUT31_0_DIO8_ONE } } # [doc = "Field `DOUT31_0_DIO8` writer - This bit sets the value of the pin configured as DIO8 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO8_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO8_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio8_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO8_A :: DOUT31_0_DIO8_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio8_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO8_A :: DOUT31_0_DIO8_ONE) } } # [doc = "Field `DOUT31_0_DIO9` reader - This bit sets the value of the pin configured as DIO9 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO9_R = crate :: BitReader < DOUT31_0_DIO9_A > ; # [doc = "This bit sets the value of the pin configured as DIO9 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO9_A { # [doc = "0: ZERO"] DOUT31_0_DIO9_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO9_ONE = 1 , } impl From < DOUT31_0_DIO9_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO9_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO9_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO9_A { match self . bits { false => DOUT31_0_DIO9_A :: DOUT31_0_DIO9_ZERO , true => DOUT31_0_DIO9_A :: DOUT31_0_DIO9_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio9_zero (& self) -> bool { * self == DOUT31_0_DIO9_A :: DOUT31_0_DIO9_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio9_one (& self) -> bool { * self == DOUT31_0_DIO9_A :: DOUT31_0_DIO9_ONE } } # [doc = "Field `DOUT31_0_DIO9` writer - This bit sets the value of the pin configured as DIO9 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO9_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO9_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio9_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO9_A :: DOUT31_0_DIO9_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio9_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO9_A :: DOUT31_0_DIO9_ONE) } } # [doc = "Field `DOUT31_0_DIO10` reader - This bit sets the value of the pin configured as DIO10 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO10_R = crate :: BitReader < DOUT31_0_DIO10_A > ; # [doc = "This bit sets the value of the pin configured as DIO10 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO10_A { # [doc = "0: ZERO"] DOUT31_0_DIO10_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO10_ONE = 1 , } impl From < DOUT31_0_DIO10_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO10_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO10_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO10_A { match self . bits { false => DOUT31_0_DIO10_A :: DOUT31_0_DIO10_ZERO , true => DOUT31_0_DIO10_A :: DOUT31_0_DIO10_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio10_zero (& self) -> bool { * self == DOUT31_0_DIO10_A :: DOUT31_0_DIO10_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio10_one (& self) -> bool { * self == DOUT31_0_DIO10_A :: DOUT31_0_DIO10_ONE } } # [doc = "Field `DOUT31_0_DIO10` writer - This bit sets the value of the pin configured as DIO10 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO10_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO10_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio10_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO10_A :: DOUT31_0_DIO10_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio10_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO10_A :: DOUT31_0_DIO10_ONE) } } # [doc = "Field `DOUT31_0_DIO11` reader - This bit sets the value of the pin configured as DIO11 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO11_R = crate :: BitReader < DOUT31_0_DIO11_A > ; # [doc = "This bit sets the value of the pin configured as DIO11 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO11_A { # [doc = "0: ZERO"] DOUT31_0_DIO11_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO11_ONE = 1 , } impl From < DOUT31_0_DIO11_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO11_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO11_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO11_A { match self . bits { false => DOUT31_0_DIO11_A :: DOUT31_0_DIO11_ZERO , true => DOUT31_0_DIO11_A :: DOUT31_0_DIO11_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio11_zero (& self) -> bool { * self == DOUT31_0_DIO11_A :: DOUT31_0_DIO11_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio11_one (& self) -> bool { * self == DOUT31_0_DIO11_A :: DOUT31_0_DIO11_ONE } } # [doc = "Field `DOUT31_0_DIO11` writer - This bit sets the value of the pin configured as DIO11 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO11_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO11_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio11_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO11_A :: DOUT31_0_DIO11_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio11_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO11_A :: DOUT31_0_DIO11_ONE) } } # [doc = "Field `DOUT31_0_DIO12` reader - This bit sets the value of the pin configured as DIO12 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO12_R = crate :: BitReader < DOUT31_0_DIO12_A > ; # [doc = "This bit sets the value of the pin configured as DIO12 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO12_A { # [doc = "0: ZERO"] DOUT31_0_DIO12_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO12_ONE = 1 , } impl From < DOUT31_0_DIO12_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO12_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO12_A { match self . bits { false => DOUT31_0_DIO12_A :: DOUT31_0_DIO12_ZERO , true => DOUT31_0_DIO12_A :: DOUT31_0_DIO12_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio12_zero (& self) -> bool { * self == DOUT31_0_DIO12_A :: DOUT31_0_DIO12_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio12_one (& self) -> bool { * self == DOUT31_0_DIO12_A :: DOUT31_0_DIO12_ONE } } # [doc = "Field `DOUT31_0_DIO12` writer - This bit sets the value of the pin configured as DIO12 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO12_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO12_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio12_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO12_A :: DOUT31_0_DIO12_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio12_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO12_A :: DOUT31_0_DIO12_ONE) } } # [doc = "Field `DOUT31_0_DIO13` reader - This bit sets the value of the pin configured as DIO13 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO13_R = crate :: BitReader < DOUT31_0_DIO13_A > ; # [doc = "This bit sets the value of the pin configured as DIO13 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO13_A { # [doc = "0: ZERO"] DOUT31_0_DIO13_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO13_ONE = 1 , } impl From < DOUT31_0_DIO13_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO13_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO13_A { match self . bits { false => DOUT31_0_DIO13_A :: DOUT31_0_DIO13_ZERO , true => DOUT31_0_DIO13_A :: DOUT31_0_DIO13_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio13_zero (& self) -> bool { * self == DOUT31_0_DIO13_A :: DOUT31_0_DIO13_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio13_one (& self) -> bool { * self == DOUT31_0_DIO13_A :: DOUT31_0_DIO13_ONE } } # [doc = "Field `DOUT31_0_DIO13` writer - This bit sets the value of the pin configured as DIO13 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO13_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO13_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio13_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO13_A :: DOUT31_0_DIO13_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio13_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO13_A :: DOUT31_0_DIO13_ONE) } } # [doc = "Field `DOUT31_0_DIO14` reader - This bit sets the value of the pin configured as DIO14 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO14_R = crate :: BitReader < DOUT31_0_DIO14_A > ; # [doc = "This bit sets the value of the pin configured as DIO14 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO14_A { # [doc = "0: ZERO"] DOUT31_0_DIO14_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO14_ONE = 1 , } impl From < DOUT31_0_DIO14_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO14_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO14_A { match self . bits { false => DOUT31_0_DIO14_A :: DOUT31_0_DIO14_ZERO , true => DOUT31_0_DIO14_A :: DOUT31_0_DIO14_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio14_zero (& self) -> bool { * self == DOUT31_0_DIO14_A :: DOUT31_0_DIO14_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio14_one (& self) -> bool { * self == DOUT31_0_DIO14_A :: DOUT31_0_DIO14_ONE } } # [doc = "Field `DOUT31_0_DIO14` writer - This bit sets the value of the pin configured as DIO14 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO14_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO14_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio14_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO14_A :: DOUT31_0_DIO14_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio14_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO14_A :: DOUT31_0_DIO14_ONE) } } # [doc = "Field `DOUT31_0_DIO15` reader - This bit sets the value of the pin configured as DIO15 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO15_R = crate :: BitReader < DOUT31_0_DIO15_A > ; # [doc = "This bit sets the value of the pin configured as DIO15 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO15_A { # [doc = "0: ZERO"] DOUT31_0_DIO15_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO15_ONE = 1 , } impl From < DOUT31_0_DIO15_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO15_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO15_A { match self . bits { false => DOUT31_0_DIO15_A :: DOUT31_0_DIO15_ZERO , true => DOUT31_0_DIO15_A :: DOUT31_0_DIO15_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio15_zero (& self) -> bool { * self == DOUT31_0_DIO15_A :: DOUT31_0_DIO15_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio15_one (& self) -> bool { * self == DOUT31_0_DIO15_A :: DOUT31_0_DIO15_ONE } } # [doc = "Field `DOUT31_0_DIO15` writer - This bit sets the value of the pin configured as DIO15 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO15_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO15_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio15_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO15_A :: DOUT31_0_DIO15_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio15_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO15_A :: DOUT31_0_DIO15_ONE) } } # [doc = "Field `DOUT31_0_DIO16` reader - This bit sets the value of the pin configured as DIO16 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO16_R = crate :: BitReader < DOUT31_0_DIO16_A > ; # [doc = "This bit sets the value of the pin configured as DIO16 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO16_A { # [doc = "0: ZERO"] DOUT31_0_DIO16_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO16_ONE = 1 , } impl From < DOUT31_0_DIO16_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO16_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO16_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO16_A { match self . bits { false => DOUT31_0_DIO16_A :: DOUT31_0_DIO16_ZERO , true => DOUT31_0_DIO16_A :: DOUT31_0_DIO16_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio16_zero (& self) -> bool { * self == DOUT31_0_DIO16_A :: DOUT31_0_DIO16_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio16_one (& self) -> bool { * self == DOUT31_0_DIO16_A :: DOUT31_0_DIO16_ONE } } # [doc = "Field `DOUT31_0_DIO16` writer - This bit sets the value of the pin configured as DIO16 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO16_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO16_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO16_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio16_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO16_A :: DOUT31_0_DIO16_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio16_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO16_A :: DOUT31_0_DIO16_ONE) } } # [doc = "Field `DOUT31_0_DIO17` reader - This bit sets the value of the pin configured as DIO17 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO17_R = crate :: BitReader < DOUT31_0_DIO17_A > ; # [doc = "This bit sets the value of the pin configured as DIO17 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO17_A { # [doc = "0: ZERO"] DOUT31_0_DIO17_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO17_ONE = 1 , } impl From < DOUT31_0_DIO17_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO17_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO17_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO17_A { match self . bits { false => DOUT31_0_DIO17_A :: DOUT31_0_DIO17_ZERO , true => DOUT31_0_DIO17_A :: DOUT31_0_DIO17_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio17_zero (& self) -> bool { * self == DOUT31_0_DIO17_A :: DOUT31_0_DIO17_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio17_one (& self) -> bool { * self == DOUT31_0_DIO17_A :: DOUT31_0_DIO17_ONE } } # [doc = "Field `DOUT31_0_DIO17` writer - This bit sets the value of the pin configured as DIO17 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO17_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO17_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO17_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio17_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO17_A :: DOUT31_0_DIO17_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio17_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO17_A :: DOUT31_0_DIO17_ONE) } } # [doc = "Field `DOUT31_0_DIO18` reader - This bit sets the value of the pin configured as DIO18 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO18_R = crate :: BitReader < DOUT31_0_DIO18_A > ; # [doc = "This bit sets the value of the pin configured as DIO18 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO18_A { # [doc = "0: ZERO"] DOUT31_0_DIO18_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO18_ONE = 1 , } impl From < DOUT31_0_DIO18_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO18_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO18_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO18_A { match self . bits { false => DOUT31_0_DIO18_A :: DOUT31_0_DIO18_ZERO , true => DOUT31_0_DIO18_A :: DOUT31_0_DIO18_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio18_zero (& self) -> bool { * self == DOUT31_0_DIO18_A :: DOUT31_0_DIO18_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio18_one (& self) -> bool { * self == DOUT31_0_DIO18_A :: DOUT31_0_DIO18_ONE } } # [doc = "Field `DOUT31_0_DIO18` writer - This bit sets the value of the pin configured as DIO18 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO18_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO18_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO18_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio18_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO18_A :: DOUT31_0_DIO18_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio18_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO18_A :: DOUT31_0_DIO18_ONE) } } # [doc = "Field `DOUT31_0_DIO19` reader - This bit sets the value of the pin configured as DIO19 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO19_R = crate :: BitReader < DOUT31_0_DIO19_A > ; # [doc = "This bit sets the value of the pin configured as DIO19 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO19_A { # [doc = "0: ZERO"] DOUT31_0_DIO19_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO19_ONE = 1 , } impl From < DOUT31_0_DIO19_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO19_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO19_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO19_A { match self . bits { false => DOUT31_0_DIO19_A :: DOUT31_0_DIO19_ZERO , true => DOUT31_0_DIO19_A :: DOUT31_0_DIO19_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio19_zero (& self) -> bool { * self == DOUT31_0_DIO19_A :: DOUT31_0_DIO19_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio19_one (& self) -> bool { * self == DOUT31_0_DIO19_A :: DOUT31_0_DIO19_ONE } } # [doc = "Field `DOUT31_0_DIO19` writer - This bit sets the value of the pin configured as DIO19 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO19_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO19_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO19_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio19_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO19_A :: DOUT31_0_DIO19_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio19_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO19_A :: DOUT31_0_DIO19_ONE) } } # [doc = "Field `DOUT31_0_DIO20` reader - This bit sets the value of the pin configured as DIO20 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO20_R = crate :: BitReader < DOUT31_0_DIO20_A > ; # [doc = "This bit sets the value of the pin configured as DIO20 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO20_A { # [doc = "0: ZERO"] DOUT31_0_DIO20_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO20_ONE = 1 , } impl From < DOUT31_0_DIO20_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO20_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO20_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO20_A { match self . bits { false => DOUT31_0_DIO20_A :: DOUT31_0_DIO20_ZERO , true => DOUT31_0_DIO20_A :: DOUT31_0_DIO20_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio20_zero (& self) -> bool { * self == DOUT31_0_DIO20_A :: DOUT31_0_DIO20_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio20_one (& self) -> bool { * self == DOUT31_0_DIO20_A :: DOUT31_0_DIO20_ONE } } # [doc = "Field `DOUT31_0_DIO20` writer - This bit sets the value of the pin configured as DIO20 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO20_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO20_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO20_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio20_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO20_A :: DOUT31_0_DIO20_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio20_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO20_A :: DOUT31_0_DIO20_ONE) } } # [doc = "Field `DOUT31_0_DIO21` reader - This bit sets the value of the pin configured as DIO21 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO21_R = crate :: BitReader < DOUT31_0_DIO21_A > ; # [doc = "This bit sets the value of the pin configured as DIO21 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO21_A { # [doc = "0: ZERO"] DOUT31_0_DIO21_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO21_ONE = 1 , } impl From < DOUT31_0_DIO21_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO21_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO21_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO21_A { match self . bits { false => DOUT31_0_DIO21_A :: DOUT31_0_DIO21_ZERO , true => DOUT31_0_DIO21_A :: DOUT31_0_DIO21_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio21_zero (& self) -> bool { * self == DOUT31_0_DIO21_A :: DOUT31_0_DIO21_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio21_one (& self) -> bool { * self == DOUT31_0_DIO21_A :: DOUT31_0_DIO21_ONE } } # [doc = "Field `DOUT31_0_DIO21` writer - This bit sets the value of the pin configured as DIO21 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO21_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO21_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO21_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio21_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO21_A :: DOUT31_0_DIO21_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio21_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO21_A :: DOUT31_0_DIO21_ONE) } } # [doc = "Field `DOUT31_0_DIO22` reader - This bit sets the value of the pin configured as DIO22 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO22_R = crate :: BitReader < DOUT31_0_DIO22_A > ; # [doc = "This bit sets the value of the pin configured as DIO22 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO22_A { # [doc = "0: ZERO"] DOUT31_0_DIO22_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO22_ONE = 1 , } impl From < DOUT31_0_DIO22_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO22_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO22_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO22_A { match self . bits { false => DOUT31_0_DIO22_A :: DOUT31_0_DIO22_ZERO , true => DOUT31_0_DIO22_A :: DOUT31_0_DIO22_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio22_zero (& self) -> bool { * self == DOUT31_0_DIO22_A :: DOUT31_0_DIO22_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio22_one (& self) -> bool { * self == DOUT31_0_DIO22_A :: DOUT31_0_DIO22_ONE } } # [doc = "Field `DOUT31_0_DIO22` writer - This bit sets the value of the pin configured as DIO22 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO22_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO22_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO22_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio22_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO22_A :: DOUT31_0_DIO22_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio22_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO22_A :: DOUT31_0_DIO22_ONE) } } # [doc = "Field `DOUT31_0_DIO23` reader - This bit sets the value of the pin configured as DIO23 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO23_R = crate :: BitReader < DOUT31_0_DIO23_A > ; # [doc = "This bit sets the value of the pin configured as DIO23 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO23_A { # [doc = "0: ZERO"] DOUT31_0_DIO23_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO23_ONE = 1 , } impl From < DOUT31_0_DIO23_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO23_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO23_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO23_A { match self . bits { false => DOUT31_0_DIO23_A :: DOUT31_0_DIO23_ZERO , true => DOUT31_0_DIO23_A :: DOUT31_0_DIO23_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio23_zero (& self) -> bool { * self == DOUT31_0_DIO23_A :: DOUT31_0_DIO23_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio23_one (& self) -> bool { * self == DOUT31_0_DIO23_A :: DOUT31_0_DIO23_ONE } } # [doc = "Field `DOUT31_0_DIO23` writer - This bit sets the value of the pin configured as DIO23 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO23_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO23_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO23_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio23_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO23_A :: DOUT31_0_DIO23_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio23_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO23_A :: DOUT31_0_DIO23_ONE) } } # [doc = "Field `DOUT31_0_DIO24` reader - This bit sets the value of the pin configured as DIO24 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO24_R = crate :: BitReader < DOUT31_0_DIO24_A > ; # [doc = "This bit sets the value of the pin configured as DIO24 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO24_A { # [doc = "0: ZERO"] DOUT31_0_DIO24_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO24_ONE = 1 , } impl From < DOUT31_0_DIO24_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO24_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO24_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO24_A { match self . bits { false => DOUT31_0_DIO24_A :: DOUT31_0_DIO24_ZERO , true => DOUT31_0_DIO24_A :: DOUT31_0_DIO24_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio24_zero (& self) -> bool { * self == DOUT31_0_DIO24_A :: DOUT31_0_DIO24_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio24_one (& self) -> bool { * self == DOUT31_0_DIO24_A :: DOUT31_0_DIO24_ONE } } # [doc = "Field `DOUT31_0_DIO24` writer - This bit sets the value of the pin configured as DIO24 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO24_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO24_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO24_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio24_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO24_A :: DOUT31_0_DIO24_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio24_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO24_A :: DOUT31_0_DIO24_ONE) } } # [doc = "Field `DOUT31_0_DIO25` reader - This bit sets the value of the pin configured as DIO25 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO25_R = crate :: BitReader < DOUT31_0_DIO25_A > ; # [doc = "This bit sets the value of the pin configured as DIO25 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO25_A { # [doc = "0: ZERO"] DOUT31_0_DIO25_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO25_ONE = 1 , } impl From < DOUT31_0_DIO25_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO25_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO25_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO25_A { match self . bits { false => DOUT31_0_DIO25_A :: DOUT31_0_DIO25_ZERO , true => DOUT31_0_DIO25_A :: DOUT31_0_DIO25_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio25_zero (& self) -> bool { * self == DOUT31_0_DIO25_A :: DOUT31_0_DIO25_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio25_one (& self) -> bool { * self == DOUT31_0_DIO25_A :: DOUT31_0_DIO25_ONE } } # [doc = "Field `DOUT31_0_DIO25` writer - This bit sets the value of the pin configured as DIO25 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO25_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO25_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO25_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio25_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO25_A :: DOUT31_0_DIO25_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio25_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO25_A :: DOUT31_0_DIO25_ONE) } } # [doc = "Field `DOUT31_0_DIO26` reader - This bit sets the value of the pin configured as DIO26 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO26_R = crate :: BitReader < DOUT31_0_DIO26_A > ; # [doc = "This bit sets the value of the pin configured as DIO26 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO26_A { # [doc = "0: ZERO"] DOUT31_0_DIO26_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO26_ONE = 1 , } impl From < DOUT31_0_DIO26_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO26_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO26_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO26_A { match self . bits { false => DOUT31_0_DIO26_A :: DOUT31_0_DIO26_ZERO , true => DOUT31_0_DIO26_A :: DOUT31_0_DIO26_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio26_zero (& self) -> bool { * self == DOUT31_0_DIO26_A :: DOUT31_0_DIO26_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio26_one (& self) -> bool { * self == DOUT31_0_DIO26_A :: DOUT31_0_DIO26_ONE } } # [doc = "Field `DOUT31_0_DIO26` writer - This bit sets the value of the pin configured as DIO26 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO26_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO26_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO26_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio26_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO26_A :: DOUT31_0_DIO26_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio26_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO26_A :: DOUT31_0_DIO26_ONE) } } # [doc = "Field `DOUT31_0_DIO27` reader - This bit sets the value of the pin configured as DIO27 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO27_R = crate :: BitReader < DOUT31_0_DIO27_A > ; # [doc = "This bit sets the value of the pin configured as DIO27 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO27_A { # [doc = "0: ZERO"] DOUT31_0_DIO27_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO27_ONE = 1 , } impl From < DOUT31_0_DIO27_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO27_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO27_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO27_A { match self . bits { false => DOUT31_0_DIO27_A :: DOUT31_0_DIO27_ZERO , true => DOUT31_0_DIO27_A :: DOUT31_0_DIO27_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio27_zero (& self) -> bool { * self == DOUT31_0_DIO27_A :: DOUT31_0_DIO27_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio27_one (& self) -> bool { * self == DOUT31_0_DIO27_A :: DOUT31_0_DIO27_ONE } } # [doc = "Field `DOUT31_0_DIO27` writer - This bit sets the value of the pin configured as DIO27 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO27_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO27_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO27_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio27_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO27_A :: DOUT31_0_DIO27_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio27_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO27_A :: DOUT31_0_DIO27_ONE) } } # [doc = "Field `DOUT31_0_DIO28` reader - This bit sets the value of the pin configured as DIO28 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO28_R = crate :: BitReader < DOUT31_0_DIO28_A > ; # [doc = "This bit sets the value of the pin configured as DIO28 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO28_A { # [doc = "0: ZERO"] DOUT31_0_DIO28_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO28_ONE = 1 , } impl From < DOUT31_0_DIO28_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO28_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO28_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO28_A { match self . bits { false => DOUT31_0_DIO28_A :: DOUT31_0_DIO28_ZERO , true => DOUT31_0_DIO28_A :: DOUT31_0_DIO28_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio28_zero (& self) -> bool { * self == DOUT31_0_DIO28_A :: DOUT31_0_DIO28_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio28_one (& self) -> bool { * self == DOUT31_0_DIO28_A :: DOUT31_0_DIO28_ONE } } # [doc = "Field `DOUT31_0_DIO28` writer - This bit sets the value of the pin configured as DIO28 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO28_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO28_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO28_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio28_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO28_A :: DOUT31_0_DIO28_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio28_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO28_A :: DOUT31_0_DIO28_ONE) } } # [doc = "Field `DOUT31_0_DIO29` reader - This bit sets the value of the pin configured as DIO29 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO29_R = crate :: BitReader < DOUT31_0_DIO29_A > ; # [doc = "This bit sets the value of the pin configured as DIO29 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO29_A { # [doc = "0: ZERO"] DOUT31_0_DIO29_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO29_ONE = 1 , } impl From < DOUT31_0_DIO29_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO29_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO29_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO29_A { match self . bits { false => DOUT31_0_DIO29_A :: DOUT31_0_DIO29_ZERO , true => DOUT31_0_DIO29_A :: DOUT31_0_DIO29_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio29_zero (& self) -> bool { * self == DOUT31_0_DIO29_A :: DOUT31_0_DIO29_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio29_one (& self) -> bool { * self == DOUT31_0_DIO29_A :: DOUT31_0_DIO29_ONE } } # [doc = "Field `DOUT31_0_DIO29` writer - This bit sets the value of the pin configured as DIO29 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO29_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO29_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO29_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio29_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO29_A :: DOUT31_0_DIO29_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio29_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO29_A :: DOUT31_0_DIO29_ONE) } } # [doc = "Field `DOUT31_0_DIO30` reader - This bit sets the value of the pin configured as DIO30 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO30_R = crate :: BitReader < DOUT31_0_DIO30_A > ; # [doc = "This bit sets the value of the pin configured as DIO30 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO30_A { # [doc = "0: ZERO"] DOUT31_0_DIO30_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO30_ONE = 1 , } impl From < DOUT31_0_DIO30_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO30_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO30_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO30_A { match self . bits { false => DOUT31_0_DIO30_A :: DOUT31_0_DIO30_ZERO , true => DOUT31_0_DIO30_A :: DOUT31_0_DIO30_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio30_zero (& self) -> bool { * self == DOUT31_0_DIO30_A :: DOUT31_0_DIO30_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio30_one (& self) -> bool { * self == DOUT31_0_DIO30_A :: DOUT31_0_DIO30_ONE } } # [doc = "Field `DOUT31_0_DIO30` writer - This bit sets the value of the pin configured as DIO30 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO30_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO30_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO30_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio30_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO30_A :: DOUT31_0_DIO30_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio30_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO30_A :: DOUT31_0_DIO30_ONE) } } # [doc = "Field `DOUT31_0_DIO31` reader - This bit sets the value of the pin configured as DIO31 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO31_R = crate :: BitReader < DOUT31_0_DIO31_A > ; # [doc = "This bit sets the value of the pin configured as DIO31 when the output is enabled through DOE31_0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUT31_0_DIO31_A { # [doc = "0: ZERO"] DOUT31_0_DIO31_ZERO = 0 , # [doc = "1: ONE"] DOUT31_0_DIO31_ONE = 1 , } impl From < DOUT31_0_DIO31_A > for bool { # [inline (always)] fn from (variant : DOUT31_0_DIO31_A) -> Self { variant as u8 != 0 } } impl DOUT31_0_DIO31_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DOUT31_0_DIO31_A { match self . bits { false => DOUT31_0_DIO31_A :: DOUT31_0_DIO31_ZERO , true => DOUT31_0_DIO31_A :: DOUT31_0_DIO31_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_dout31_0_dio31_zero (& self) -> bool { * self == DOUT31_0_DIO31_A :: DOUT31_0_DIO31_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_dout31_0_dio31_one (& self) -> bool { * self == DOUT31_0_DIO31_A :: DOUT31_0_DIO31_ONE } } # [doc = "Field `DOUT31_0_DIO31` writer - This bit sets the value of the pin configured as DIO31 when the output is enabled through DOE31_0 register."] pub type DOUT31_0_DIO31_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUT31_0_DIO31_A > ; impl < 'a , REG , const O : u8 > DOUT31_0_DIO31_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "ZERO"] # [inline (always)] pub fn dout31_0_dio31_zero (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO31_A :: DOUT31_0_DIO31_ZERO) } # [doc = "ONE"] # [inline (always)] pub fn dout31_0_dio31_one (self) -> & 'a mut crate :: W < REG > { self . variant (DOUT31_0_DIO31_A :: DOUT31_0_DIO31_ONE) } } impl R { # [doc = "Bit 0 - This bit sets the value of the pin configured as DIO0 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio0 (& self) -> DOUT31_0_DIO0_R { DOUT31_0_DIO0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - This bit sets the value of the pin configured as DIO1 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio1 (& self) -> DOUT31_0_DIO1_R { DOUT31_0_DIO1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - This bit sets the value of the pin configured as DIO2 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio2 (& self) -> DOUT31_0_DIO2_R { DOUT31_0_DIO2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - This bit sets the value of the pin configured as DIO3 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio3 (& self) -> DOUT31_0_DIO3_R { DOUT31_0_DIO3_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - This bit sets the value of the pin configured as DIO4 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio4 (& self) -> DOUT31_0_DIO4_R { DOUT31_0_DIO4_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - This bit sets the value of the pin configured as DIO5 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio5 (& self) -> DOUT31_0_DIO5_R { DOUT31_0_DIO5_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - This bit sets the value of the pin configured as DIO6 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio6 (& self) -> DOUT31_0_DIO6_R { DOUT31_0_DIO6_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - This bit sets the value of the pin configured as DIO7 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio7 (& self) -> DOUT31_0_DIO7_R { DOUT31_0_DIO7_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - This bit sets the value of the pin configured as DIO8 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio8 (& self) -> DOUT31_0_DIO8_R { DOUT31_0_DIO8_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - This bit sets the value of the pin configured as DIO9 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio9 (& self) -> DOUT31_0_DIO9_R { DOUT31_0_DIO9_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - This bit sets the value of the pin configured as DIO10 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio10 (& self) -> DOUT31_0_DIO10_R { DOUT31_0_DIO10_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - This bit sets the value of the pin configured as DIO11 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio11 (& self) -> DOUT31_0_DIO11_R { DOUT31_0_DIO11_R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - This bit sets the value of the pin configured as DIO12 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio12 (& self) -> DOUT31_0_DIO12_R { DOUT31_0_DIO12_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - This bit sets the value of the pin configured as DIO13 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio13 (& self) -> DOUT31_0_DIO13_R { DOUT31_0_DIO13_R :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - This bit sets the value of the pin configured as DIO14 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio14 (& self) -> DOUT31_0_DIO14_R { DOUT31_0_DIO14_R :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - This bit sets the value of the pin configured as DIO15 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio15 (& self) -> DOUT31_0_DIO15_R { DOUT31_0_DIO15_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - This bit sets the value of the pin configured as DIO16 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio16 (& self) -> DOUT31_0_DIO16_R { DOUT31_0_DIO16_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - This bit sets the value of the pin configured as DIO17 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio17 (& self) -> DOUT31_0_DIO17_R { DOUT31_0_DIO17_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - This bit sets the value of the pin configured as DIO18 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio18 (& self) -> DOUT31_0_DIO18_R { DOUT31_0_DIO18_R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - This bit sets the value of the pin configured as DIO19 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio19 (& self) -> DOUT31_0_DIO19_R { DOUT31_0_DIO19_R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - This bit sets the value of the pin configured as DIO20 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio20 (& self) -> DOUT31_0_DIO20_R { DOUT31_0_DIO20_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - This bit sets the value of the pin configured as DIO21 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio21 (& self) -> DOUT31_0_DIO21_R { DOUT31_0_DIO21_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - This bit sets the value of the pin configured as DIO22 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio22 (& self) -> DOUT31_0_DIO22_R { DOUT31_0_DIO22_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - This bit sets the value of the pin configured as DIO23 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio23 (& self) -> DOUT31_0_DIO23_R { DOUT31_0_DIO23_R :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - This bit sets the value of the pin configured as DIO24 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio24 (& self) -> DOUT31_0_DIO24_R { DOUT31_0_DIO24_R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - This bit sets the value of the pin configured as DIO25 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio25 (& self) -> DOUT31_0_DIO25_R { DOUT31_0_DIO25_R :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - This bit sets the value of the pin configured as DIO26 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio26 (& self) -> DOUT31_0_DIO26_R { DOUT31_0_DIO26_R :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - This bit sets the value of the pin configured as DIO27 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio27 (& self) -> DOUT31_0_DIO27_R { DOUT31_0_DIO27_R :: new (((self . bits >> 27) & 1) != 0) } # [doc = "Bit 28 - This bit sets the value of the pin configured as DIO28 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio28 (& self) -> DOUT31_0_DIO28_R { DOUT31_0_DIO28_R :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - This bit sets the value of the pin configured as DIO29 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio29 (& self) -> DOUT31_0_DIO29_R { DOUT31_0_DIO29_R :: new (((self . bits >> 29) & 1) != 0) } # [doc = "Bit 30 - This bit sets the value of the pin configured as DIO30 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio30 (& self) -> DOUT31_0_DIO30_R { DOUT31_0_DIO30_R :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - This bit sets the value of the pin configured as DIO31 when the output is enabled through DOE31_0 register."] # [inline (always)] pub fn dout31_0_dio31 (& self) -> DOUT31_0_DIO31_R { DOUT31_0_DIO31_R :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - This bit sets the value of the pin configured as DIO0 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio0 (& mut self) -> DOUT31_0_DIO0_W < DOUT31_0_SPEC , 0 > { DOUT31_0_DIO0_W :: new (self) } # [doc = "Bit 1 - This bit sets the value of the pin configured as DIO1 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio1 (& mut self) -> DOUT31_0_DIO1_W < DOUT31_0_SPEC , 1 > { DOUT31_0_DIO1_W :: new (self) } # [doc = "Bit 2 - This bit sets the value of the pin configured as DIO2 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio2 (& mut self) -> DOUT31_0_DIO2_W < DOUT31_0_SPEC , 2 > { DOUT31_0_DIO2_W :: new (self) } # [doc = "Bit 3 - This bit sets the value of the pin configured as DIO3 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio3 (& mut self) -> DOUT31_0_DIO3_W < DOUT31_0_SPEC , 3 > { DOUT31_0_DIO3_W :: new (self) } # [doc = "Bit 4 - This bit sets the value of the pin configured as DIO4 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio4 (& mut self) -> DOUT31_0_DIO4_W < DOUT31_0_SPEC , 4 > { DOUT31_0_DIO4_W :: new (self) } # [doc = "Bit 5 - This bit sets the value of the pin configured as DIO5 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio5 (& mut self) -> DOUT31_0_DIO5_W < DOUT31_0_SPEC , 5 > { DOUT31_0_DIO5_W :: new (self) } # [doc = "Bit 6 - This bit sets the value of the pin configured as DIO6 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio6 (& mut self) -> DOUT31_0_DIO6_W < DOUT31_0_SPEC , 6 > { DOUT31_0_DIO6_W :: new (self) } # [doc = "Bit 7 - This bit sets the value of the pin configured as DIO7 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio7 (& mut self) -> DOUT31_0_DIO7_W < DOUT31_0_SPEC , 7 > { DOUT31_0_DIO7_W :: new (self) } # [doc = "Bit 8 - This bit sets the value of the pin configured as DIO8 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio8 (& mut self) -> DOUT31_0_DIO8_W < DOUT31_0_SPEC , 8 > { DOUT31_0_DIO8_W :: new (self) } # [doc = "Bit 9 - This bit sets the value of the pin configured as DIO9 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio9 (& mut self) -> DOUT31_0_DIO9_W < DOUT31_0_SPEC , 9 > { DOUT31_0_DIO9_W :: new (self) } # [doc = "Bit 10 - This bit sets the value of the pin configured as DIO10 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio10 (& mut self) -> DOUT31_0_DIO10_W < DOUT31_0_SPEC , 10 > { DOUT31_0_DIO10_W :: new (self) } # [doc = "Bit 11 - This bit sets the value of the pin configured as DIO11 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio11 (& mut self) -> DOUT31_0_DIO11_W < DOUT31_0_SPEC , 11 > { DOUT31_0_DIO11_W :: new (self) } # [doc = "Bit 12 - This bit sets the value of the pin configured as DIO12 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio12 (& mut self) -> DOUT31_0_DIO12_W < DOUT31_0_SPEC , 12 > { DOUT31_0_DIO12_W :: new (self) } # [doc = "Bit 13 - This bit sets the value of the pin configured as DIO13 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio13 (& mut self) -> DOUT31_0_DIO13_W < DOUT31_0_SPEC , 13 > { DOUT31_0_DIO13_W :: new (self) } # [doc = "Bit 14 - This bit sets the value of the pin configured as DIO14 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio14 (& mut self) -> DOUT31_0_DIO14_W < DOUT31_0_SPEC , 14 > { DOUT31_0_DIO14_W :: new (self) } # [doc = "Bit 15 - This bit sets the value of the pin configured as DIO15 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio15 (& mut self) -> DOUT31_0_DIO15_W < DOUT31_0_SPEC , 15 > { DOUT31_0_DIO15_W :: new (self) } # [doc = "Bit 16 - This bit sets the value of the pin configured as DIO16 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio16 (& mut self) -> DOUT31_0_DIO16_W < DOUT31_0_SPEC , 16 > { DOUT31_0_DIO16_W :: new (self) } # [doc = "Bit 17 - This bit sets the value of the pin configured as DIO17 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio17 (& mut self) -> DOUT31_0_DIO17_W < DOUT31_0_SPEC , 17 > { DOUT31_0_DIO17_W :: new (self) } # [doc = "Bit 18 - This bit sets the value of the pin configured as DIO18 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio18 (& mut self) -> DOUT31_0_DIO18_W < DOUT31_0_SPEC , 18 > { DOUT31_0_DIO18_W :: new (self) } # [doc = "Bit 19 - This bit sets the value of the pin configured as DIO19 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio19 (& mut self) -> DOUT31_0_DIO19_W < DOUT31_0_SPEC , 19 > { DOUT31_0_DIO19_W :: new (self) } # [doc = "Bit 20 - This bit sets the value of the pin configured as DIO20 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio20 (& mut self) -> DOUT31_0_DIO20_W < DOUT31_0_SPEC , 20 > { DOUT31_0_DIO20_W :: new (self) } # [doc = "Bit 21 - This bit sets the value of the pin configured as DIO21 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio21 (& mut self) -> DOUT31_0_DIO21_W < DOUT31_0_SPEC , 21 > { DOUT31_0_DIO21_W :: new (self) } # [doc = "Bit 22 - This bit sets the value of the pin configured as DIO22 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio22 (& mut self) -> DOUT31_0_DIO22_W < DOUT31_0_SPEC , 22 > { DOUT31_0_DIO22_W :: new (self) } # [doc = "Bit 23 - This bit sets the value of the pin configured as DIO23 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio23 (& mut self) -> DOUT31_0_DIO23_W < DOUT31_0_SPEC , 23 > { DOUT31_0_DIO23_W :: new (self) } # [doc = "Bit 24 - This bit sets the value of the pin configured as DIO24 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio24 (& mut self) -> DOUT31_0_DIO24_W < DOUT31_0_SPEC , 24 > { DOUT31_0_DIO24_W :: new (self) } # [doc = "Bit 25 - This bit sets the value of the pin configured as DIO25 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio25 (& mut self) -> DOUT31_0_DIO25_W < DOUT31_0_SPEC , 25 > { DOUT31_0_DIO25_W :: new (self) } # [doc = "Bit 26 - This bit sets the value of the pin configured as DIO26 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio26 (& mut self) -> DOUT31_0_DIO26_W < DOUT31_0_SPEC , 26 > { DOUT31_0_DIO26_W :: new (self) } # [doc = "Bit 27 - This bit sets the value of the pin configured as DIO27 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio27 (& mut self) -> DOUT31_0_DIO27_W < DOUT31_0_SPEC , 27 > { DOUT31_0_DIO27_W :: new (self) } # [doc = "Bit 28 - This bit sets the value of the pin configured as DIO28 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio28 (& mut self) -> DOUT31_0_DIO28_W < DOUT31_0_SPEC , 28 > { DOUT31_0_DIO28_W :: new (self) } # [doc = "Bit 29 - This bit sets the value of the pin configured as DIO29 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio29 (& mut self) -> DOUT31_0_DIO29_W < DOUT31_0_SPEC , 29 > { DOUT31_0_DIO29_W :: new (self) } # [doc = "Bit 30 - This bit sets the value of the pin configured as DIO30 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio30 (& mut self) -> DOUT31_0_DIO30_W < DOUT31_0_SPEC , 30 > { DOUT31_0_DIO30_W :: new (self) } # [doc = "Bit 31 - This bit sets the value of the pin configured as DIO31 when the output is enabled through DOE31_0 register."] # [inline (always)] # [must_use] pub fn dout31_0_dio31 (& mut self) -> DOUT31_0_DIO31_W < DOUT31_0_SPEC , 31 > { DOUT31_0_DIO31_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Data output 31 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dout31_0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout31_0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DOUT31_0_SPEC ; impl crate :: RegisterSpec for DOUT31_0_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`dout31_0::R`](R) reader structure"] impl crate :: Readable for DOUT31_0_SPEC { } # [doc = "`write(|w| ..)` method takes [`dout31_0::W`](W) writer structure"] impl crate :: Writable for DOUT31_0_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DOUT31_0 to value 0"] impl crate :: Resettable for DOUT31_0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }