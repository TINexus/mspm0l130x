# [doc = "Register `DOUTTGL31_0` writer"] pub type W = crate :: W < DOUTTGL31_0_SPEC > ; # [doc = "This bit is used to toggle DIO0 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO0_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO0_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO0_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO0_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO0` writer - This bit is used to toggle DIO0 output."] pub type DOUTTGL31_0_DIO0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO0_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio0_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO0_AW :: DOUTTGL31_0_DIO0_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio0_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO0_AW :: DOUTTGL31_0_DIO0_TOGGLE) } } # [doc = "This bit is used to toggle DIO1 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO1_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO1_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO1_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO1_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO1_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO1` writer - This bit is used to toggle DIO1 output."] pub type DOUTTGL31_0_DIO1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO1_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio1_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO1_AW :: DOUTTGL31_0_DIO1_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio1_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO1_AW :: DOUTTGL31_0_DIO1_TOGGLE) } } # [doc = "This bit is used to toggle DIO2 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO2_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO2_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO2_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO2_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO2_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO2` writer - This bit is used to toggle DIO2 output."] pub type DOUTTGL31_0_DIO2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO2_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio2_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO2_AW :: DOUTTGL31_0_DIO2_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio2_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO2_AW :: DOUTTGL31_0_DIO2_TOGGLE) } } # [doc = "This bit is used to toggle DIO3 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO3_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO3_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO3_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO3_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO3_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO3` writer - This bit is used to toggle DIO3 output."] pub type DOUTTGL31_0_DIO3_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO3_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio3_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO3_AW :: DOUTTGL31_0_DIO3_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio3_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO3_AW :: DOUTTGL31_0_DIO3_TOGGLE) } } # [doc = "This bit is used to toggle DIO4 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO4_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO4_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO4_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO4_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO4_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO4` writer - This bit is used to toggle DIO4 output."] pub type DOUTTGL31_0_DIO4_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO4_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio4_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO4_AW :: DOUTTGL31_0_DIO4_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio4_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO4_AW :: DOUTTGL31_0_DIO4_TOGGLE) } } # [doc = "This bit is used to toggle DIO5 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO5_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO5_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO5_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO5_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO5_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO5` writer - This bit is used to toggle DIO5 output."] pub type DOUTTGL31_0_DIO5_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO5_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio5_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO5_AW :: DOUTTGL31_0_DIO5_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio5_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO5_AW :: DOUTTGL31_0_DIO5_TOGGLE) } } # [doc = "This bit is used to toggle DIO6 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO6_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO6_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO6_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO6_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO6_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO6` writer - This bit is used to toggle DIO6 output."] pub type DOUTTGL31_0_DIO6_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO6_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio6_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO6_AW :: DOUTTGL31_0_DIO6_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio6_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO6_AW :: DOUTTGL31_0_DIO6_TOGGLE) } } # [doc = "This bit is used to toggle DIO7 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO7_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO7_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO7_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO7_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO7_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO7` writer - This bit is used to toggle DIO7 output."] pub type DOUTTGL31_0_DIO7_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO7_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio7_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO7_AW :: DOUTTGL31_0_DIO7_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio7_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO7_AW :: DOUTTGL31_0_DIO7_TOGGLE) } } # [doc = "This bit is used to toggle DIO8 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO8_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO8_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO8_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO8_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO8_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO8` writer - This bit is used to toggle DIO8 output."] pub type DOUTTGL31_0_DIO8_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO8_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio8_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO8_AW :: DOUTTGL31_0_DIO8_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio8_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO8_AW :: DOUTTGL31_0_DIO8_TOGGLE) } } # [doc = "This bit is used to toggle DIO9 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO9_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO9_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO9_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO9_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO9_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO9` writer - This bit is used to toggle DIO9 output."] pub type DOUTTGL31_0_DIO9_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO9_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio9_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO9_AW :: DOUTTGL31_0_DIO9_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio9_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO9_AW :: DOUTTGL31_0_DIO9_TOGGLE) } } # [doc = "This bit is used to toggle DIO10 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO10_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO10_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO10_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO10_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO10_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO10` writer - This bit is used to toggle DIO10 output."] pub type DOUTTGL31_0_DIO10_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO10_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio10_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO10_AW :: DOUTTGL31_0_DIO10_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio10_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO10_AW :: DOUTTGL31_0_DIO10_TOGGLE) } } # [doc = "This bit is used to toggle DIO11 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO11_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO11_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO11_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO11_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO11_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO11` writer - This bit is used to toggle DIO11 output."] pub type DOUTTGL31_0_DIO11_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO11_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio11_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO11_AW :: DOUTTGL31_0_DIO11_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio11_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO11_AW :: DOUTTGL31_0_DIO11_TOGGLE) } } # [doc = "This bit is used to toggle DIO12 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO12_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO12_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO12_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO12_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO12_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO12` writer - This bit is used to toggle DIO12 output."] pub type DOUTTGL31_0_DIO12_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO12_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio12_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO12_AW :: DOUTTGL31_0_DIO12_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio12_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO12_AW :: DOUTTGL31_0_DIO12_TOGGLE) } } # [doc = "This bit is used to toggle DIO13 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO13_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO13_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO13_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO13_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO13_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO13` writer - This bit is used to toggle DIO13 output."] pub type DOUTTGL31_0_DIO13_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO13_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio13_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO13_AW :: DOUTTGL31_0_DIO13_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio13_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO13_AW :: DOUTTGL31_0_DIO13_TOGGLE) } } # [doc = "This bit is used to toggle DIO14 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO14_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO14_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO14_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO14_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO14_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO14` writer - This bit is used to toggle DIO14 output."] pub type DOUTTGL31_0_DIO14_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO14_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio14_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO14_AW :: DOUTTGL31_0_DIO14_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio14_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO14_AW :: DOUTTGL31_0_DIO14_TOGGLE) } } # [doc = "This bit is used to toggle DIO15 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO15_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO15_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO15_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO15_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO15_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO15` writer - This bit is used to toggle DIO15 output."] pub type DOUTTGL31_0_DIO15_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO15_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio15_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO15_AW :: DOUTTGL31_0_DIO15_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio15_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO15_AW :: DOUTTGL31_0_DIO15_TOGGLE) } } # [doc = "This bit is used to toggle DIO16 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO16_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO16_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO16_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO16_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO16_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO16` writer - This bit is used to toggle DIO16 output."] pub type DOUTTGL31_0_DIO16_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO16_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO16_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio16_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO16_AW :: DOUTTGL31_0_DIO16_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio16_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO16_AW :: DOUTTGL31_0_DIO16_TOGGLE) } } # [doc = "This bit is used to toggle DIO17 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO17_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO17_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO17_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO17_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO17_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO17` writer - This bit is used to toggle DIO17 output."] pub type DOUTTGL31_0_DIO17_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO17_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO17_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio17_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO17_AW :: DOUTTGL31_0_DIO17_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio17_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO17_AW :: DOUTTGL31_0_DIO17_TOGGLE) } } # [doc = "This bit is used to toggle DIO18 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO18_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO18_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO18_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO18_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO18_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO18` writer - This bit is used to toggle DIO18 output."] pub type DOUTTGL31_0_DIO18_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO18_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO18_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio18_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO18_AW :: DOUTTGL31_0_DIO18_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio18_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO18_AW :: DOUTTGL31_0_DIO18_TOGGLE) } } # [doc = "This bit is used to toggle DIO19 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO19_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO19_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO19_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO19_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO19_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO19` writer - This bit is used to toggle DIO19 output."] pub type DOUTTGL31_0_DIO19_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO19_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO19_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio19_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO19_AW :: DOUTTGL31_0_DIO19_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio19_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO19_AW :: DOUTTGL31_0_DIO19_TOGGLE) } } # [doc = "This bit is used to toggle DIO20 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO20_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO20_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO20_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO20_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO20_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO20` writer - This bit is used to toggle DIO20 output."] pub type DOUTTGL31_0_DIO20_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO20_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO20_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio20_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO20_AW :: DOUTTGL31_0_DIO20_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio20_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO20_AW :: DOUTTGL31_0_DIO20_TOGGLE) } } # [doc = "This bit is used to toggle DIO21 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO21_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO21_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO21_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO21_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO21_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO21` writer - This bit is used to toggle DIO21 output."] pub type DOUTTGL31_0_DIO21_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO21_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO21_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio21_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO21_AW :: DOUTTGL31_0_DIO21_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio21_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO21_AW :: DOUTTGL31_0_DIO21_TOGGLE) } } # [doc = "This bit is used to toggle DIO22 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO22_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO22_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO22_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO22_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO22_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO22` writer - This bit is used to toggle DIO22 output."] pub type DOUTTGL31_0_DIO22_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO22_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO22_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio22_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO22_AW :: DOUTTGL31_0_DIO22_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio22_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO22_AW :: DOUTTGL31_0_DIO22_TOGGLE) } } # [doc = "This bit is used to toggle DIO23 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO23_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO23_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO23_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO23_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO23_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO23` writer - This bit is used to toggle DIO23 output."] pub type DOUTTGL31_0_DIO23_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO23_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO23_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio23_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO23_AW :: DOUTTGL31_0_DIO23_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio23_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO23_AW :: DOUTTGL31_0_DIO23_TOGGLE) } } # [doc = "This bit is used to toggle DIO24 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO24_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO24_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO24_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO24_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO24_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO24` writer - This bit is used to toggle DIO24 output."] pub type DOUTTGL31_0_DIO24_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO24_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO24_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio24_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO24_AW :: DOUTTGL31_0_DIO24_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio24_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO24_AW :: DOUTTGL31_0_DIO24_TOGGLE) } } # [doc = "This bit is used to toggle DIO25 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO25_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO25_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO25_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO25_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO25_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO25` writer - This bit is used to toggle DIO25 output."] pub type DOUTTGL31_0_DIO25_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO25_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO25_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio25_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO25_AW :: DOUTTGL31_0_DIO25_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio25_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO25_AW :: DOUTTGL31_0_DIO25_TOGGLE) } } # [doc = "This bit is used to toggle DIO26 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO26_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO26_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO26_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO26_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO26_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO26` writer - This bit is used to toggle DIO26 output."] pub type DOUTTGL31_0_DIO26_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO26_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO26_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio26_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO26_AW :: DOUTTGL31_0_DIO26_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio26_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO26_AW :: DOUTTGL31_0_DIO26_TOGGLE) } } # [doc = "This bit is used to toggle DIO27 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO27_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO27_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO27_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO27_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO27_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO27` writer - This bit is used to toggle DIO27 output."] pub type DOUTTGL31_0_DIO27_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO27_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO27_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio27_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO27_AW :: DOUTTGL31_0_DIO27_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio27_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO27_AW :: DOUTTGL31_0_DIO27_TOGGLE) } } # [doc = "This bit is used to toggle DIO28 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO28_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO28_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO28_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO28_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO28_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO28` writer - This bit is used to toggle DIO28 output."] pub type DOUTTGL31_0_DIO28_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO28_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO28_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio28_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO28_AW :: DOUTTGL31_0_DIO28_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio28_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO28_AW :: DOUTTGL31_0_DIO28_TOGGLE) } } # [doc = "This bit is used to toggle DIO29 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO29_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO29_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO29_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO29_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO29_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO29` writer - This bit is used to toggle DIO29 output."] pub type DOUTTGL31_0_DIO29_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO29_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO29_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio29_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO29_AW :: DOUTTGL31_0_DIO29_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio29_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO29_AW :: DOUTTGL31_0_DIO29_TOGGLE) } } # [doc = "This bit is used to toggle DIO30 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO30_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO30_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO30_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO30_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO30_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO30` writer - This bit is used to toggle DIO30 output."] pub type DOUTTGL31_0_DIO30_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO30_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO30_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio30_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO30_AW :: DOUTTGL31_0_DIO30_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio30_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO30_AW :: DOUTTGL31_0_DIO30_TOGGLE) } } # [doc = "This bit is used to toggle DIO31 output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DOUTTGL31_0_DIO31_AW { # [doc = "0: NO_EFFECT"] DOUTTGL31_0_DIO31_NO_EFFECT = 0 , # [doc = "1: TOGGLE"] DOUTTGL31_0_DIO31_TOGGLE = 1 , } impl From < DOUTTGL31_0_DIO31_AW > for bool { # [inline (always)] fn from (variant : DOUTTGL31_0_DIO31_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `DOUTTGL31_0_DIO31` writer - This bit is used to toggle DIO31 output."] pub type DOUTTGL31_0_DIO31_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DOUTTGL31_0_DIO31_AW > ; impl < 'a , REG , const O : u8 > DOUTTGL31_0_DIO31_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn douttgl31_0_dio31_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO31_AW :: DOUTTGL31_0_DIO31_NO_EFFECT) } # [doc = "TOGGLE"] # [inline (always)] pub fn douttgl31_0_dio31_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (DOUTTGL31_0_DIO31_AW :: DOUTTGL31_0_DIO31_TOGGLE) } } impl W { # [doc = "Bit 0 - This bit is used to toggle DIO0 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio0 (& mut self) -> DOUTTGL31_0_DIO0_W < DOUTTGL31_0_SPEC , 0 > { DOUTTGL31_0_DIO0_W :: new (self) } # [doc = "Bit 1 - This bit is used to toggle DIO1 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio1 (& mut self) -> DOUTTGL31_0_DIO1_W < DOUTTGL31_0_SPEC , 1 > { DOUTTGL31_0_DIO1_W :: new (self) } # [doc = "Bit 2 - This bit is used to toggle DIO2 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio2 (& mut self) -> DOUTTGL31_0_DIO2_W < DOUTTGL31_0_SPEC , 2 > { DOUTTGL31_0_DIO2_W :: new (self) } # [doc = "Bit 3 - This bit is used to toggle DIO3 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio3 (& mut self) -> DOUTTGL31_0_DIO3_W < DOUTTGL31_0_SPEC , 3 > { DOUTTGL31_0_DIO3_W :: new (self) } # [doc = "Bit 4 - This bit is used to toggle DIO4 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio4 (& mut self) -> DOUTTGL31_0_DIO4_W < DOUTTGL31_0_SPEC , 4 > { DOUTTGL31_0_DIO4_W :: new (self) } # [doc = "Bit 5 - This bit is used to toggle DIO5 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio5 (& mut self) -> DOUTTGL31_0_DIO5_W < DOUTTGL31_0_SPEC , 5 > { DOUTTGL31_0_DIO5_W :: new (self) } # [doc = "Bit 6 - This bit is used to toggle DIO6 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio6 (& mut self) -> DOUTTGL31_0_DIO6_W < DOUTTGL31_0_SPEC , 6 > { DOUTTGL31_0_DIO6_W :: new (self) } # [doc = "Bit 7 - This bit is used to toggle DIO7 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio7 (& mut self) -> DOUTTGL31_0_DIO7_W < DOUTTGL31_0_SPEC , 7 > { DOUTTGL31_0_DIO7_W :: new (self) } # [doc = "Bit 8 - This bit is used to toggle DIO8 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio8 (& mut self) -> DOUTTGL31_0_DIO8_W < DOUTTGL31_0_SPEC , 8 > { DOUTTGL31_0_DIO8_W :: new (self) } # [doc = "Bit 9 - This bit is used to toggle DIO9 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio9 (& mut self) -> DOUTTGL31_0_DIO9_W < DOUTTGL31_0_SPEC , 9 > { DOUTTGL31_0_DIO9_W :: new (self) } # [doc = "Bit 10 - This bit is used to toggle DIO10 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio10 (& mut self) -> DOUTTGL31_0_DIO10_W < DOUTTGL31_0_SPEC , 10 > { DOUTTGL31_0_DIO10_W :: new (self) } # [doc = "Bit 11 - This bit is used to toggle DIO11 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio11 (& mut self) -> DOUTTGL31_0_DIO11_W < DOUTTGL31_0_SPEC , 11 > { DOUTTGL31_0_DIO11_W :: new (self) } # [doc = "Bit 12 - This bit is used to toggle DIO12 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio12 (& mut self) -> DOUTTGL31_0_DIO12_W < DOUTTGL31_0_SPEC , 12 > { DOUTTGL31_0_DIO12_W :: new (self) } # [doc = "Bit 13 - This bit is used to toggle DIO13 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio13 (& mut self) -> DOUTTGL31_0_DIO13_W < DOUTTGL31_0_SPEC , 13 > { DOUTTGL31_0_DIO13_W :: new (self) } # [doc = "Bit 14 - This bit is used to toggle DIO14 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio14 (& mut self) -> DOUTTGL31_0_DIO14_W < DOUTTGL31_0_SPEC , 14 > { DOUTTGL31_0_DIO14_W :: new (self) } # [doc = "Bit 15 - This bit is used to toggle DIO15 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio15 (& mut self) -> DOUTTGL31_0_DIO15_W < DOUTTGL31_0_SPEC , 15 > { DOUTTGL31_0_DIO15_W :: new (self) } # [doc = "Bit 16 - This bit is used to toggle DIO16 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio16 (& mut self) -> DOUTTGL31_0_DIO16_W < DOUTTGL31_0_SPEC , 16 > { DOUTTGL31_0_DIO16_W :: new (self) } # [doc = "Bit 17 - This bit is used to toggle DIO17 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio17 (& mut self) -> DOUTTGL31_0_DIO17_W < DOUTTGL31_0_SPEC , 17 > { DOUTTGL31_0_DIO17_W :: new (self) } # [doc = "Bit 18 - This bit is used to toggle DIO18 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio18 (& mut self) -> DOUTTGL31_0_DIO18_W < DOUTTGL31_0_SPEC , 18 > { DOUTTGL31_0_DIO18_W :: new (self) } # [doc = "Bit 19 - This bit is used to toggle DIO19 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio19 (& mut self) -> DOUTTGL31_0_DIO19_W < DOUTTGL31_0_SPEC , 19 > { DOUTTGL31_0_DIO19_W :: new (self) } # [doc = "Bit 20 - This bit is used to toggle DIO20 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio20 (& mut self) -> DOUTTGL31_0_DIO20_W < DOUTTGL31_0_SPEC , 20 > { DOUTTGL31_0_DIO20_W :: new (self) } # [doc = "Bit 21 - This bit is used to toggle DIO21 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio21 (& mut self) -> DOUTTGL31_0_DIO21_W < DOUTTGL31_0_SPEC , 21 > { DOUTTGL31_0_DIO21_W :: new (self) } # [doc = "Bit 22 - This bit is used to toggle DIO22 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio22 (& mut self) -> DOUTTGL31_0_DIO22_W < DOUTTGL31_0_SPEC , 22 > { DOUTTGL31_0_DIO22_W :: new (self) } # [doc = "Bit 23 - This bit is used to toggle DIO23 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio23 (& mut self) -> DOUTTGL31_0_DIO23_W < DOUTTGL31_0_SPEC , 23 > { DOUTTGL31_0_DIO23_W :: new (self) } # [doc = "Bit 24 - This bit is used to toggle DIO24 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio24 (& mut self) -> DOUTTGL31_0_DIO24_W < DOUTTGL31_0_SPEC , 24 > { DOUTTGL31_0_DIO24_W :: new (self) } # [doc = "Bit 25 - This bit is used to toggle DIO25 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio25 (& mut self) -> DOUTTGL31_0_DIO25_W < DOUTTGL31_0_SPEC , 25 > { DOUTTGL31_0_DIO25_W :: new (self) } # [doc = "Bit 26 - This bit is used to toggle DIO26 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio26 (& mut self) -> DOUTTGL31_0_DIO26_W < DOUTTGL31_0_SPEC , 26 > { DOUTTGL31_0_DIO26_W :: new (self) } # [doc = "Bit 27 - This bit is used to toggle DIO27 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio27 (& mut self) -> DOUTTGL31_0_DIO27_W < DOUTTGL31_0_SPEC , 27 > { DOUTTGL31_0_DIO27_W :: new (self) } # [doc = "Bit 28 - This bit is used to toggle DIO28 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio28 (& mut self) -> DOUTTGL31_0_DIO28_W < DOUTTGL31_0_SPEC , 28 > { DOUTTGL31_0_DIO28_W :: new (self) } # [doc = "Bit 29 - This bit is used to toggle DIO29 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio29 (& mut self) -> DOUTTGL31_0_DIO29_W < DOUTTGL31_0_SPEC , 29 > { DOUTTGL31_0_DIO29_W :: new (self) } # [doc = "Bit 30 - This bit is used to toggle DIO30 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio30 (& mut self) -> DOUTTGL31_0_DIO30_W < DOUTTGL31_0_SPEC , 30 > { DOUTTGL31_0_DIO30_W :: new (self) } # [doc = "Bit 31 - This bit is used to toggle DIO31 output."] # [inline (always)] # [must_use] pub fn douttgl31_0_dio31 (& mut self) -> DOUTTGL31_0_DIO31_W < DOUTTGL31_0_SPEC , 31 > { DOUTTGL31_0_DIO31_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Data output toggle 31 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`douttgl31_0::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DOUTTGL31_0_SPEC ; impl crate :: RegisterSpec for DOUTTGL31_0_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`douttgl31_0::W`](W) writer structure"] impl crate :: Writable for DOUTTGL31_0_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DOUTTGL31_0 to value 0"] impl crate :: Resettable for DOUTTGL31_0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }