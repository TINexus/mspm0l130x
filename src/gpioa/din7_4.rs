# [doc = "Register `DIN7_4` reader"] pub type R = crate :: R < DIN7_4_SPEC > ; # [doc = "Field `DIN7_4_DIO4` reader - This bit reads the data input value of DIO4."] pub type DIN7_4_DIO4_R = crate :: BitReader < DIN7_4_DIO4_A > ; # [doc = "This bit reads the data input value of DIO4.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN7_4_DIO4_A { # [doc = "0: ZERO"] DIN7_4_DIO4_ZERO = 0 , # [doc = "1: ONE"] DIN7_4_DIO4_ONE = 1 , } impl From < DIN7_4_DIO4_A > for bool { # [inline (always)] fn from (variant : DIN7_4_DIO4_A) -> Self { variant as u8 != 0 } } impl DIN7_4_DIO4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN7_4_DIO4_A { match self . bits { false => DIN7_4_DIO4_A :: DIN7_4_DIO4_ZERO , true => DIN7_4_DIO4_A :: DIN7_4_DIO4_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din7_4_dio4_zero (& self) -> bool { * self == DIN7_4_DIO4_A :: DIN7_4_DIO4_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din7_4_dio4_one (& self) -> bool { * self == DIN7_4_DIO4_A :: DIN7_4_DIO4_ONE } } # [doc = "Field `DIN7_4_DIO5` reader - This bit reads the data input value of DIO5."] pub type DIN7_4_DIO5_R = crate :: BitReader < DIN7_4_DIO5_A > ; # [doc = "This bit reads the data input value of DIO5.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN7_4_DIO5_A { # [doc = "0: ZERO"] DIN7_4_DIO5_ZERO = 0 , # [doc = "1: ONE"] DIN7_4_DIO5_ONE = 1 , } impl From < DIN7_4_DIO5_A > for bool { # [inline (always)] fn from (variant : DIN7_4_DIO5_A) -> Self { variant as u8 != 0 } } impl DIN7_4_DIO5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN7_4_DIO5_A { match self . bits { false => DIN7_4_DIO5_A :: DIN7_4_DIO5_ZERO , true => DIN7_4_DIO5_A :: DIN7_4_DIO5_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din7_4_dio5_zero (& self) -> bool { * self == DIN7_4_DIO5_A :: DIN7_4_DIO5_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din7_4_dio5_one (& self) -> bool { * self == DIN7_4_DIO5_A :: DIN7_4_DIO5_ONE } } # [doc = "Field `DIN7_4_DIO6` reader - This bit reads the data input value of DIO6."] pub type DIN7_4_DIO6_R = crate :: BitReader < DIN7_4_DIO6_A > ; # [doc = "This bit reads the data input value of DIO6.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN7_4_DIO6_A { # [doc = "0: ZERO"] DIN7_4_DIO6_ZERO = 0 , # [doc = "1: ONE"] DIN7_4_DIO6_ONE = 1 , } impl From < DIN7_4_DIO6_A > for bool { # [inline (always)] fn from (variant : DIN7_4_DIO6_A) -> Self { variant as u8 != 0 } } impl DIN7_4_DIO6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN7_4_DIO6_A { match self . bits { false => DIN7_4_DIO6_A :: DIN7_4_DIO6_ZERO , true => DIN7_4_DIO6_A :: DIN7_4_DIO6_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din7_4_dio6_zero (& self) -> bool { * self == DIN7_4_DIO6_A :: DIN7_4_DIO6_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din7_4_dio6_one (& self) -> bool { * self == DIN7_4_DIO6_A :: DIN7_4_DIO6_ONE } } # [doc = "Field `DIN7_4_DIO7` reader - This bit reads the data input value of DIO7."] pub type DIN7_4_DIO7_R = crate :: BitReader < DIN7_4_DIO7_A > ; # [doc = "This bit reads the data input value of DIO7.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN7_4_DIO7_A { # [doc = "0: ZERO"] DIN7_4_DIO7_ZERO = 0 , # [doc = "1: ONE"] DIN7_4_DIO7_ONE = 1 , } impl From < DIN7_4_DIO7_A > for bool { # [inline (always)] fn from (variant : DIN7_4_DIO7_A) -> Self { variant as u8 != 0 } } impl DIN7_4_DIO7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN7_4_DIO7_A { match self . bits { false => DIN7_4_DIO7_A :: DIN7_4_DIO7_ZERO , true => DIN7_4_DIO7_A :: DIN7_4_DIO7_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din7_4_dio7_zero (& self) -> bool { * self == DIN7_4_DIO7_A :: DIN7_4_DIO7_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din7_4_dio7_one (& self) -> bool { * self == DIN7_4_DIO7_A :: DIN7_4_DIO7_ONE } } impl R { # [doc = "Bit 0 - This bit reads the data input value of DIO4."] # [inline (always)] pub fn din7_4_dio4 (& self) -> DIN7_4_DIO4_R { DIN7_4_DIO4_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - This bit reads the data input value of DIO5."] # [inline (always)] pub fn din7_4_dio5 (& self) -> DIN7_4_DIO5_R { DIN7_4_DIO5_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 16 - This bit reads the data input value of DIO6."] # [inline (always)] pub fn din7_4_dio6 (& self) -> DIN7_4_DIO6_R { DIN7_4_DIO6_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - This bit reads the data input value of DIO7."] # [inline (always)] pub fn din7_4_dio7 (& self) -> DIN7_4_DIO7_R { DIN7_4_DIO7_R :: new (((self . bits >> 24) & 1) != 0) } } # [doc = "Data input 7 to 4\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din7_4::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DIN7_4_SPEC ; impl crate :: RegisterSpec for DIN7_4_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`din7_4::R`](R) reader structure"] impl crate :: Readable for DIN7_4_SPEC { } # [doc = "`reset()` method sets DIN7_4 to value 0"] impl crate :: Resettable for DIN7_4_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }