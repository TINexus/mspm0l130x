# [doc = "Register `INT_EVENT0_IIDX` reader"] pub type R = crate :: R < INT_EVENT0_IIDX_SPEC > ; # [doc = "Field `INT_EVENT0_IIDX_STAT` reader - Interrupt index status"] pub type INT_EVENT0_IIDX_STAT_R = crate :: FieldReader < INT_EVENT0_IIDX_STAT_A > ; # [doc = "Interrupt index status\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum INT_EVENT0_IIDX_STAT_A { # [doc = "0: NO_INTR"] INT_EVENT0_IIDX_STAT_NO_INTR = 0 , # [doc = "1: DIO0"] INT_EVENT0_IIDX_STAT_DIO0 = 1 , # [doc = "2: DIO1"] INT_EVENT0_IIDX_STAT_DIO1 = 2 , # [doc = "3: DIO2"] INT_EVENT0_IIDX_STAT_DIO2 = 3 , # [doc = "4: DIO3"] INT_EVENT0_IIDX_STAT_DIO3 = 4 , # [doc = "5: DIO4"] INT_EVENT0_IIDX_STAT_DIO4 = 5 , # [doc = "6: DIO5"] INT_EVENT0_IIDX_STAT_DIO5 = 6 , # [doc = "7: DIO6"] INT_EVENT0_IIDX_STAT_DIO6 = 7 , # [doc = "8: DIO7"] INT_EVENT0_IIDX_STAT_DIO7 = 8 , # [doc = "9: DIO8"] INT_EVENT0_IIDX_STAT_DIO8 = 9 , # [doc = "10: DIO9"] INT_EVENT0_IIDX_STAT_DIO9 = 10 , # [doc = "11: DIO10"] INT_EVENT0_IIDX_STAT_DIO10 = 11 , # [doc = "12: DIO11"] INT_EVENT0_IIDX_STAT_DIO11 = 12 , # [doc = "13: DIO12"] INT_EVENT0_IIDX_STAT_DIO12 = 13 , # [doc = "14: DIO13"] INT_EVENT0_IIDX_STAT_DIO13 = 14 , # [doc = "15: DIO14"] INT_EVENT0_IIDX_STAT_DIO14 = 15 , # [doc = "16: DIO15"] INT_EVENT0_IIDX_STAT_DIO15 = 16 , # [doc = "17: DIO16"] INT_EVENT0_IIDX_STAT_DIO16 = 17 , # [doc = "18: DIO17"] INT_EVENT0_IIDX_STAT_DIO17 = 18 , # [doc = "19: DIO18"] INT_EVENT0_IIDX_STAT_DIO18 = 19 , # [doc = "20: DIO19"] INT_EVENT0_IIDX_STAT_DIO19 = 20 , # [doc = "21: DIO20"] INT_EVENT0_IIDX_STAT_DIO20 = 21 , # [doc = "22: DIO21"] INT_EVENT0_IIDX_STAT_DIO21 = 22 , # [doc = "23: DIO22"] INT_EVENT0_IIDX_STAT_DIO22 = 23 , # [doc = "24: DIO23"] INT_EVENT0_IIDX_STAT_DIO23 = 24 , # [doc = "25: DIO24"] INT_EVENT0_IIDX_STAT_DIO24 = 25 , # [doc = "26: DIO25"] INT_EVENT0_IIDX_STAT_DIO25 = 26 , # [doc = "27: DIO26"] INT_EVENT0_IIDX_STAT_DIO26 = 27 , # [doc = "28: DIO27"] INT_EVENT0_IIDX_STAT_DIO27 = 28 , # [doc = "29: DIO28"] INT_EVENT0_IIDX_STAT_DIO28 = 29 , # [doc = "30: DIO29"] INT_EVENT0_IIDX_STAT_DIO29 = 30 , # [doc = "31: DIO30"] INT_EVENT0_IIDX_STAT_DIO30 = 31 , # [doc = "32: DIO31"] INT_EVENT0_IIDX_STAT_DIO31 = 32 , } impl From < INT_EVENT0_IIDX_STAT_A > for u8 { # [inline (always)] fn from (variant : INT_EVENT0_IIDX_STAT_A) -> Self { variant as _ } } impl crate :: FieldSpec for INT_EVENT0_IIDX_STAT_A { type Ux = u8 ; } impl INT_EVENT0_IIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < INT_EVENT0_IIDX_STAT_A > { match self . bits { 0 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NO_INTR) , 1 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO0) , 2 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO1) , 3 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO2) , 4 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO3) , 5 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO4) , 6 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO5) , 7 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO6) , 8 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO7) , 9 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO8) , 10 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO9) , 11 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO10) , 12 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO11) , 13 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO12) , 14 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO13) , 15 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO14) , 16 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO15) , 17 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO16) , 18 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO17) , 19 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO18) , 20 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO19) , 21 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO20) , 22 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO21) , 23 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO22) , 24 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO23) , 25 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO24) , 26 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO25) , 27 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO26) , 28 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO27) , 29 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO28) , 30 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO29) , 31 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO30) , 32 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO31) , _ => None , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_int_event0_iidx_stat_no_intr (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NO_INTR } # [doc = "DIO0"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio0 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO0 } # [doc = "DIO1"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio1 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO1 } # [doc = "DIO2"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio2 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO2 } # [doc = "DIO3"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio3 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO3 } # [doc = "DIO4"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio4 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO4 } # [doc = "DIO5"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio5 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO5 } # [doc = "DIO6"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio6 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO6 } # [doc = "DIO7"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio7 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO7 } # [doc = "DIO8"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio8 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO8 } # [doc = "DIO9"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio9 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO9 } # [doc = "DIO10"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio10 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO10 } # [doc = "DIO11"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio11 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO11 } # [doc = "DIO12"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio12 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO12 } # [doc = "DIO13"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio13 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO13 } # [doc = "DIO14"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio14 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO14 } # [doc = "DIO15"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio15 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO15 } # [doc = "DIO16"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio16 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO16 } # [doc = "DIO17"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio17 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO17 } # [doc = "DIO18"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio18 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO18 } # [doc = "DIO19"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio19 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO19 } # [doc = "DIO20"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio20 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO20 } # [doc = "DIO21"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio21 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO21 } # [doc = "DIO22"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio22 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO22 } # [doc = "DIO23"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio23 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO23 } # [doc = "DIO24"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio24 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO24 } # [doc = "DIO25"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio25 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO25 } # [doc = "DIO26"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio26 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO26 } # [doc = "DIO27"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio27 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO27 } # [doc = "DIO28"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio28 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO28 } # [doc = "DIO29"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio29 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO29 } # [doc = "DIO30"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio30 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO30 } # [doc = "DIO31"] # [inline (always)] pub fn is_int_event0_iidx_stat_dio31 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DIO31 } } impl R { # [doc = "Bits 0:7 - Interrupt index status"] # [inline (always)] pub fn int_event0_iidx_stat (& self) -> INT_EVENT0_IIDX_STAT_R { INT_EVENT0_IIDX_STAT_R :: new ((self . bits & 0xff) as u8) } } # [doc = "Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_iidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_IIDX_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_IIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_iidx::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_IIDX_SPEC { } # [doc = "`reset()` method sets INT_EVENT0_IIDX to value 0"] impl crate :: Resettable for INT_EVENT0_IIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }