# [doc = "Register `DIN19_16` reader"] pub type R = crate :: R < DIN19_16_SPEC > ; # [doc = "Field `DIN19_16_DIO16` reader - This bit reads the data input value of DIO16."] pub type DIN19_16_DIO16_R = crate :: BitReader < DIN19_16_DIO16_A > ; # [doc = "This bit reads the data input value of DIO16.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN19_16_DIO16_A { # [doc = "0: ZERO"] DIN19_16_DIO16_ZERO = 0 , # [doc = "1: ONE"] DIN19_16_DIO16_ONE = 1 , } impl From < DIN19_16_DIO16_A > for bool { # [inline (always)] fn from (variant : DIN19_16_DIO16_A) -> Self { variant as u8 != 0 } } impl DIN19_16_DIO16_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN19_16_DIO16_A { match self . bits { false => DIN19_16_DIO16_A :: DIN19_16_DIO16_ZERO , true => DIN19_16_DIO16_A :: DIN19_16_DIO16_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din19_16_dio16_zero (& self) -> bool { * self == DIN19_16_DIO16_A :: DIN19_16_DIO16_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din19_16_dio16_one (& self) -> bool { * self == DIN19_16_DIO16_A :: DIN19_16_DIO16_ONE } } # [doc = "Field `DIN19_16_DIO17` reader - This bit reads the data input value of DIO17."] pub type DIN19_16_DIO17_R = crate :: BitReader < DIN19_16_DIO17_A > ; # [doc = "This bit reads the data input value of DIO17.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN19_16_DIO17_A { # [doc = "0: ZERO"] DIN19_16_DIO17_ZERO = 0 , # [doc = "1: ONE"] DIN19_16_DIO17_ONE = 1 , } impl From < DIN19_16_DIO17_A > for bool { # [inline (always)] fn from (variant : DIN19_16_DIO17_A) -> Self { variant as u8 != 0 } } impl DIN19_16_DIO17_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN19_16_DIO17_A { match self . bits { false => DIN19_16_DIO17_A :: DIN19_16_DIO17_ZERO , true => DIN19_16_DIO17_A :: DIN19_16_DIO17_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din19_16_dio17_zero (& self) -> bool { * self == DIN19_16_DIO17_A :: DIN19_16_DIO17_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din19_16_dio17_one (& self) -> bool { * self == DIN19_16_DIO17_A :: DIN19_16_DIO17_ONE } } # [doc = "Field `DIN19_16_DIO18` reader - This bit reads the data input value of DIO18."] pub type DIN19_16_DIO18_R = crate :: BitReader < DIN19_16_DIO18_A > ; # [doc = "This bit reads the data input value of DIO18.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN19_16_DIO18_A { # [doc = "0: ZERO"] DIN19_16_DIO18_ZERO = 0 , # [doc = "1: ONE"] DIN19_16_DIO18_ONE = 1 , } impl From < DIN19_16_DIO18_A > for bool { # [inline (always)] fn from (variant : DIN19_16_DIO18_A) -> Self { variant as u8 != 0 } } impl DIN19_16_DIO18_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN19_16_DIO18_A { match self . bits { false => DIN19_16_DIO18_A :: DIN19_16_DIO18_ZERO , true => DIN19_16_DIO18_A :: DIN19_16_DIO18_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din19_16_dio18_zero (& self) -> bool { * self == DIN19_16_DIO18_A :: DIN19_16_DIO18_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din19_16_dio18_one (& self) -> bool { * self == DIN19_16_DIO18_A :: DIN19_16_DIO18_ONE } } # [doc = "Field `DIN19_16_DIO19` reader - This bit reads the data input value of DIO19."] pub type DIN19_16_DIO19_R = crate :: BitReader < DIN19_16_DIO19_A > ; # [doc = "This bit reads the data input value of DIO19.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN19_16_DIO19_A { # [doc = "0: ZERO"] DIN19_16_DIO19_ZERO = 0 , # [doc = "1: ONE"] DIN19_16_DIO19_ONE = 1 , } impl From < DIN19_16_DIO19_A > for bool { # [inline (always)] fn from (variant : DIN19_16_DIO19_A) -> Self { variant as u8 != 0 } } impl DIN19_16_DIO19_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN19_16_DIO19_A { match self . bits { false => DIN19_16_DIO19_A :: DIN19_16_DIO19_ZERO , true => DIN19_16_DIO19_A :: DIN19_16_DIO19_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din19_16_dio19_zero (& self) -> bool { * self == DIN19_16_DIO19_A :: DIN19_16_DIO19_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din19_16_dio19_one (& self) -> bool { * self == DIN19_16_DIO19_A :: DIN19_16_DIO19_ONE } } impl R { # [doc = "Bit 0 - This bit reads the data input value of DIO16."] # [inline (always)] pub fn din19_16_dio16 (& self) -> DIN19_16_DIO16_R { DIN19_16_DIO16_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - This bit reads the data input value of DIO17."] # [inline (always)] pub fn din19_16_dio17 (& self) -> DIN19_16_DIO17_R { DIN19_16_DIO17_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 16 - This bit reads the data input value of DIO18."] # [inline (always)] pub fn din19_16_dio18 (& self) -> DIN19_16_DIO18_R { DIN19_16_DIO18_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - This bit reads the data input value of DIO19."] # [inline (always)] pub fn din19_16_dio19 (& self) -> DIN19_16_DIO19_R { DIN19_16_DIO19_R :: new (((self . bits >> 24) & 1) != 0) } } # [doc = "Data input 19 to 16\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din19_16::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DIN19_16_SPEC ; impl crate :: RegisterSpec for DIN19_16_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`din19_16::R`](R) reader structure"] impl crate :: Readable for DIN19_16_SPEC { } # [doc = "`reset()` method sets DIN19_16 to value 0"] impl crate :: Resettable for DIN19_16_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }