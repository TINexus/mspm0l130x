# [doc = "Register `INT_EVENT1_ICLR` writer"] pub type W = crate :: W < INT_EVENT1_ICLR_SPEC > ; # [doc = "DIO0 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO0_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO0_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO0_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO0_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO0` writer - DIO0 event"] pub type INT_EVENT1_ICLR_DIO0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO0_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio0_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO0_AW :: INT_EVENT1_ICLR_DIO0_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio0_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO0_AW :: INT_EVENT1_ICLR_DIO0_CLR) } } # [doc = "DIO1 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO1_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO1_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO1_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO1_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO1_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO1` writer - DIO1 event"] pub type INT_EVENT1_ICLR_DIO1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO1_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio1_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO1_AW :: INT_EVENT1_ICLR_DIO1_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio1_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO1_AW :: INT_EVENT1_ICLR_DIO1_CLR) } } # [doc = "DIO2 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO2_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO2_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO2_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO2_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO2_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO2` writer - DIO2 event"] pub type INT_EVENT1_ICLR_DIO2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO2_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio2_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO2_AW :: INT_EVENT1_ICLR_DIO2_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio2_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO2_AW :: INT_EVENT1_ICLR_DIO2_CLR) } } # [doc = "DIO3 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO3_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO3_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO3_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO3_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO3_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO3` writer - DIO3 event"] pub type INT_EVENT1_ICLR_DIO3_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO3_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio3_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO3_AW :: INT_EVENT1_ICLR_DIO3_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio3_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO3_AW :: INT_EVENT1_ICLR_DIO3_CLR) } } # [doc = "DIO4 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO4_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO4_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO4_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO4_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO4_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO4` writer - DIO4 event"] pub type INT_EVENT1_ICLR_DIO4_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO4_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio4_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO4_AW :: INT_EVENT1_ICLR_DIO4_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio4_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO4_AW :: INT_EVENT1_ICLR_DIO4_CLR) } } # [doc = "DIO5 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO5_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO5_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO5_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO5_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO5_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO5` writer - DIO5 event"] pub type INT_EVENT1_ICLR_DIO5_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO5_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio5_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO5_AW :: INT_EVENT1_ICLR_DIO5_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio5_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO5_AW :: INT_EVENT1_ICLR_DIO5_CLR) } } # [doc = "DIO6 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO6_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO6_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO6_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO6_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO6_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO6` writer - DIO6 event"] pub type INT_EVENT1_ICLR_DIO6_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO6_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio6_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO6_AW :: INT_EVENT1_ICLR_DIO6_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio6_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO6_AW :: INT_EVENT1_ICLR_DIO6_CLR) } } # [doc = "DIO7 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO7_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO7_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO7_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO7_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO7_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO7` writer - DIO7 event"] pub type INT_EVENT1_ICLR_DIO7_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO7_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio7_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO7_AW :: INT_EVENT1_ICLR_DIO7_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio7_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO7_AW :: INT_EVENT1_ICLR_DIO7_CLR) } } # [doc = "DIO8 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO8_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO8_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO8_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO8_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO8_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO8` writer - DIO8 event"] pub type INT_EVENT1_ICLR_DIO8_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO8_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio8_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO8_AW :: INT_EVENT1_ICLR_DIO8_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio8_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO8_AW :: INT_EVENT1_ICLR_DIO8_CLR) } } # [doc = "DIO9 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO9_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO9_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO9_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO9_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO9_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO9` writer - DIO9 event"] pub type INT_EVENT1_ICLR_DIO9_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO9_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio9_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO9_AW :: INT_EVENT1_ICLR_DIO9_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio9_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO9_AW :: INT_EVENT1_ICLR_DIO9_CLR) } } # [doc = "DIO10 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO10_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO10_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO10_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO10_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO10_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO10` writer - DIO10 event"] pub type INT_EVENT1_ICLR_DIO10_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO10_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio10_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO10_AW :: INT_EVENT1_ICLR_DIO10_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio10_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO10_AW :: INT_EVENT1_ICLR_DIO10_CLR) } } # [doc = "DIO11 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO11_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO11_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO11_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO11_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO11_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO11` writer - DIO11 event"] pub type INT_EVENT1_ICLR_DIO11_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO11_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio11_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO11_AW :: INT_EVENT1_ICLR_DIO11_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio11_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO11_AW :: INT_EVENT1_ICLR_DIO11_CLR) } } # [doc = "DIO12 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO12_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO12_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO12_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO12_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO12_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO12` writer - DIO12 event"] pub type INT_EVENT1_ICLR_DIO12_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO12_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio12_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO12_AW :: INT_EVENT1_ICLR_DIO12_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio12_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO12_AW :: INT_EVENT1_ICLR_DIO12_CLR) } } # [doc = "DIO13 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO13_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO13_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO13_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO13_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO13_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO13` writer - DIO13 event"] pub type INT_EVENT1_ICLR_DIO13_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO13_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio13_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO13_AW :: INT_EVENT1_ICLR_DIO13_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio13_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO13_AW :: INT_EVENT1_ICLR_DIO13_CLR) } } # [doc = "DIO14 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO14_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO14_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO14_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO14_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO14_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO14` writer - DIO14 event"] pub type INT_EVENT1_ICLR_DIO14_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO14_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio14_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO14_AW :: INT_EVENT1_ICLR_DIO14_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio14_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO14_AW :: INT_EVENT1_ICLR_DIO14_CLR) } } # [doc = "DIO15 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_ICLR_DIO15_AW { # [doc = "0: NO_EFFECT"] INT_EVENT1_ICLR_DIO15_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT1_ICLR_DIO15_CLR = 1 , } impl From < INT_EVENT1_ICLR_DIO15_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT1_ICLR_DIO15_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT1_ICLR_DIO15` writer - DIO15 event"] pub type INT_EVENT1_ICLR_DIO15_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT1_ICLR_DIO15_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT1_ICLR_DIO15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event1_iclr_dio15_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO15_AW :: INT_EVENT1_ICLR_DIO15_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event1_iclr_dio15_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT1_ICLR_DIO15_AW :: INT_EVENT1_ICLR_DIO15_CLR) } } impl W { # [doc = "Bit 0 - DIO0 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio0 (& mut self) -> INT_EVENT1_ICLR_DIO0_W < INT_EVENT1_ICLR_SPEC , 0 > { INT_EVENT1_ICLR_DIO0_W :: new (self) } # [doc = "Bit 1 - DIO1 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio1 (& mut self) -> INT_EVENT1_ICLR_DIO1_W < INT_EVENT1_ICLR_SPEC , 1 > { INT_EVENT1_ICLR_DIO1_W :: new (self) } # [doc = "Bit 2 - DIO2 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio2 (& mut self) -> INT_EVENT1_ICLR_DIO2_W < INT_EVENT1_ICLR_SPEC , 2 > { INT_EVENT1_ICLR_DIO2_W :: new (self) } # [doc = "Bit 3 - DIO3 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio3 (& mut self) -> INT_EVENT1_ICLR_DIO3_W < INT_EVENT1_ICLR_SPEC , 3 > { INT_EVENT1_ICLR_DIO3_W :: new (self) } # [doc = "Bit 4 - DIO4 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio4 (& mut self) -> INT_EVENT1_ICLR_DIO4_W < INT_EVENT1_ICLR_SPEC , 4 > { INT_EVENT1_ICLR_DIO4_W :: new (self) } # [doc = "Bit 5 - DIO5 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio5 (& mut self) -> INT_EVENT1_ICLR_DIO5_W < INT_EVENT1_ICLR_SPEC , 5 > { INT_EVENT1_ICLR_DIO5_W :: new (self) } # [doc = "Bit 6 - DIO6 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio6 (& mut self) -> INT_EVENT1_ICLR_DIO6_W < INT_EVENT1_ICLR_SPEC , 6 > { INT_EVENT1_ICLR_DIO6_W :: new (self) } # [doc = "Bit 7 - DIO7 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio7 (& mut self) -> INT_EVENT1_ICLR_DIO7_W < INT_EVENT1_ICLR_SPEC , 7 > { INT_EVENT1_ICLR_DIO7_W :: new (self) } # [doc = "Bit 8 - DIO8 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio8 (& mut self) -> INT_EVENT1_ICLR_DIO8_W < INT_EVENT1_ICLR_SPEC , 8 > { INT_EVENT1_ICLR_DIO8_W :: new (self) } # [doc = "Bit 9 - DIO9 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio9 (& mut self) -> INT_EVENT1_ICLR_DIO9_W < INT_EVENT1_ICLR_SPEC , 9 > { INT_EVENT1_ICLR_DIO9_W :: new (self) } # [doc = "Bit 10 - DIO10 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio10 (& mut self) -> INT_EVENT1_ICLR_DIO10_W < INT_EVENT1_ICLR_SPEC , 10 > { INT_EVENT1_ICLR_DIO10_W :: new (self) } # [doc = "Bit 11 - DIO11 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio11 (& mut self) -> INT_EVENT1_ICLR_DIO11_W < INT_EVENT1_ICLR_SPEC , 11 > { INT_EVENT1_ICLR_DIO11_W :: new (self) } # [doc = "Bit 12 - DIO12 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio12 (& mut self) -> INT_EVENT1_ICLR_DIO12_W < INT_EVENT1_ICLR_SPEC , 12 > { INT_EVENT1_ICLR_DIO12_W :: new (self) } # [doc = "Bit 13 - DIO13 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio13 (& mut self) -> INT_EVENT1_ICLR_DIO13_W < INT_EVENT1_ICLR_SPEC , 13 > { INT_EVENT1_ICLR_DIO13_W :: new (self) } # [doc = "Bit 14 - DIO14 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio14 (& mut self) -> INT_EVENT1_ICLR_DIO14_W < INT_EVENT1_ICLR_SPEC , 14 > { INT_EVENT1_ICLR_DIO14_W :: new (self) } # [doc = "Bit 15 - DIO15 event"] # [inline (always)] # [must_use] pub fn int_event1_iclr_dio15 (& mut self) -> INT_EVENT1_ICLR_DIO15_W < INT_EVENT1_ICLR_SPEC , 15 > { INT_EVENT1_ICLR_DIO15_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iclr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT1_ICLR_SPEC ; impl crate :: RegisterSpec for INT_EVENT1_ICLR_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`int_event1_iclr::W`](W) writer structure"] impl crate :: Writable for INT_EVENT1_ICLR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets INT_EVENT1_ICLR to value 0"] impl crate :: Resettable for INT_EVENT1_ICLR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }