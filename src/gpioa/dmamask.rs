# [doc = "Register `DMAMASK` reader"] pub type R = crate :: R < DMAMASK_SPEC > ; # [doc = "Register `DMAMASK` writer"] pub type W = crate :: W < DMAMASK_SPEC > ; # [doc = "Field `DMAMASK_DOUT0` reader - DMA is allowed to modify DOUT0"] pub type DMAMASK_DOUT0_R = crate :: BitReader < DMAMASK_DOUT0_A > ; # [doc = "DMA is allowed to modify DOUT0\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT0_A { # [doc = "0: DISABLE"] DMAMASK_DOUT0_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT0_ENABLE = 1 , } impl From < DMAMASK_DOUT0_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT0_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT0_A { match self . bits { false => DMAMASK_DOUT0_A :: DMAMASK_DOUT0_DISABLE , true => DMAMASK_DOUT0_A :: DMAMASK_DOUT0_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout0_disable (& self) -> bool { * self == DMAMASK_DOUT0_A :: DMAMASK_DOUT0_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout0_enable (& self) -> bool { * self == DMAMASK_DOUT0_A :: DMAMASK_DOUT0_ENABLE } } # [doc = "Field `DMAMASK_DOUT0` writer - DMA is allowed to modify DOUT0"] pub type DMAMASK_DOUT0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT0_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout0_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT0_A :: DMAMASK_DOUT0_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout0_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT0_A :: DMAMASK_DOUT0_ENABLE) } } # [doc = "Field `DMAMASK_DOUT1` reader - DMA is allowed to modify DOUT1"] pub type DMAMASK_DOUT1_R = crate :: BitReader < DMAMASK_DOUT1_A > ; # [doc = "DMA is allowed to modify DOUT1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT1_A { # [doc = "0: DISABLE"] DMAMASK_DOUT1_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT1_ENABLE = 1 , } impl From < DMAMASK_DOUT1_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT1_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT1_A { match self . bits { false => DMAMASK_DOUT1_A :: DMAMASK_DOUT1_DISABLE , true => DMAMASK_DOUT1_A :: DMAMASK_DOUT1_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout1_disable (& self) -> bool { * self == DMAMASK_DOUT1_A :: DMAMASK_DOUT1_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout1_enable (& self) -> bool { * self == DMAMASK_DOUT1_A :: DMAMASK_DOUT1_ENABLE } } # [doc = "Field `DMAMASK_DOUT1` writer - DMA is allowed to modify DOUT1"] pub type DMAMASK_DOUT1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT1_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout1_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT1_A :: DMAMASK_DOUT1_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout1_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT1_A :: DMAMASK_DOUT1_ENABLE) } } # [doc = "Field `DMAMASK_DOUT2` reader - DMA is allowed to modify DOUT2"] pub type DMAMASK_DOUT2_R = crate :: BitReader < DMAMASK_DOUT2_A > ; # [doc = "DMA is allowed to modify DOUT2\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT2_A { # [doc = "0: DISABLE"] DMAMASK_DOUT2_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT2_ENABLE = 1 , } impl From < DMAMASK_DOUT2_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT2_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT2_A { match self . bits { false => DMAMASK_DOUT2_A :: DMAMASK_DOUT2_DISABLE , true => DMAMASK_DOUT2_A :: DMAMASK_DOUT2_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout2_disable (& self) -> bool { * self == DMAMASK_DOUT2_A :: DMAMASK_DOUT2_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout2_enable (& self) -> bool { * self == DMAMASK_DOUT2_A :: DMAMASK_DOUT2_ENABLE } } # [doc = "Field `DMAMASK_DOUT2` writer - DMA is allowed to modify DOUT2"] pub type DMAMASK_DOUT2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT2_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout2_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT2_A :: DMAMASK_DOUT2_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout2_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT2_A :: DMAMASK_DOUT2_ENABLE) } } # [doc = "Field `DMAMASK_DOUT3` reader - DMA is allowed to modify DOUT3"] pub type DMAMASK_DOUT3_R = crate :: BitReader < DMAMASK_DOUT3_A > ; # [doc = "DMA is allowed to modify DOUT3\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT3_A { # [doc = "0: DISABLE"] DMAMASK_DOUT3_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT3_ENABLE = 1 , } impl From < DMAMASK_DOUT3_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT3_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT3_A { match self . bits { false => DMAMASK_DOUT3_A :: DMAMASK_DOUT3_DISABLE , true => DMAMASK_DOUT3_A :: DMAMASK_DOUT3_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout3_disable (& self) -> bool { * self == DMAMASK_DOUT3_A :: DMAMASK_DOUT3_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout3_enable (& self) -> bool { * self == DMAMASK_DOUT3_A :: DMAMASK_DOUT3_ENABLE } } # [doc = "Field `DMAMASK_DOUT3` writer - DMA is allowed to modify DOUT3"] pub type DMAMASK_DOUT3_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT3_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout3_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT3_A :: DMAMASK_DOUT3_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout3_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT3_A :: DMAMASK_DOUT3_ENABLE) } } # [doc = "Field `DMAMASK_DOUT4` reader - DMA is allowed to modify DOUT4"] pub type DMAMASK_DOUT4_R = crate :: BitReader < DMAMASK_DOUT4_A > ; # [doc = "DMA is allowed to modify DOUT4\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT4_A { # [doc = "0: DISABLE"] DMAMASK_DOUT4_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT4_ENABLE = 1 , } impl From < DMAMASK_DOUT4_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT4_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT4_A { match self . bits { false => DMAMASK_DOUT4_A :: DMAMASK_DOUT4_DISABLE , true => DMAMASK_DOUT4_A :: DMAMASK_DOUT4_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout4_disable (& self) -> bool { * self == DMAMASK_DOUT4_A :: DMAMASK_DOUT4_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout4_enable (& self) -> bool { * self == DMAMASK_DOUT4_A :: DMAMASK_DOUT4_ENABLE } } # [doc = "Field `DMAMASK_DOUT4` writer - DMA is allowed to modify DOUT4"] pub type DMAMASK_DOUT4_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT4_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout4_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT4_A :: DMAMASK_DOUT4_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout4_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT4_A :: DMAMASK_DOUT4_ENABLE) } } # [doc = "Field `DMAMASK_DOUT5` reader - DMA is allowed to modify DOUT5"] pub type DMAMASK_DOUT5_R = crate :: BitReader < DMAMASK_DOUT5_A > ; # [doc = "DMA is allowed to modify DOUT5\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT5_A { # [doc = "0: DISABLE"] DMAMASK_DOUT5_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT5_ENABLE = 1 , } impl From < DMAMASK_DOUT5_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT5_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT5_A { match self . bits { false => DMAMASK_DOUT5_A :: DMAMASK_DOUT5_DISABLE , true => DMAMASK_DOUT5_A :: DMAMASK_DOUT5_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout5_disable (& self) -> bool { * self == DMAMASK_DOUT5_A :: DMAMASK_DOUT5_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout5_enable (& self) -> bool { * self == DMAMASK_DOUT5_A :: DMAMASK_DOUT5_ENABLE } } # [doc = "Field `DMAMASK_DOUT5` writer - DMA is allowed to modify DOUT5"] pub type DMAMASK_DOUT5_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT5_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout5_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT5_A :: DMAMASK_DOUT5_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout5_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT5_A :: DMAMASK_DOUT5_ENABLE) } } # [doc = "Field `DMAMASK_DOUT6` reader - DMA is allowed to modify DOUT6"] pub type DMAMASK_DOUT6_R = crate :: BitReader < DMAMASK_DOUT6_A > ; # [doc = "DMA is allowed to modify DOUT6\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT6_A { # [doc = "0: DISABLE"] DMAMASK_DOUT6_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT6_ENABLE = 1 , } impl From < DMAMASK_DOUT6_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT6_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT6_A { match self . bits { false => DMAMASK_DOUT6_A :: DMAMASK_DOUT6_DISABLE , true => DMAMASK_DOUT6_A :: DMAMASK_DOUT6_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout6_disable (& self) -> bool { * self == DMAMASK_DOUT6_A :: DMAMASK_DOUT6_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout6_enable (& self) -> bool { * self == DMAMASK_DOUT6_A :: DMAMASK_DOUT6_ENABLE } } # [doc = "Field `DMAMASK_DOUT6` writer - DMA is allowed to modify DOUT6"] pub type DMAMASK_DOUT6_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT6_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout6_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT6_A :: DMAMASK_DOUT6_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout6_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT6_A :: DMAMASK_DOUT6_ENABLE) } } # [doc = "Field `DMAMASK_DOUT7` reader - DMA is allowed to modify DOUT7"] pub type DMAMASK_DOUT7_R = crate :: BitReader < DMAMASK_DOUT7_A > ; # [doc = "DMA is allowed to modify DOUT7\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT7_A { # [doc = "0: DISABLE"] DMAMASK_DOUT7_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT7_ENABLE = 1 , } impl From < DMAMASK_DOUT7_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT7_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT7_A { match self . bits { false => DMAMASK_DOUT7_A :: DMAMASK_DOUT7_DISABLE , true => DMAMASK_DOUT7_A :: DMAMASK_DOUT7_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout7_disable (& self) -> bool { * self == DMAMASK_DOUT7_A :: DMAMASK_DOUT7_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout7_enable (& self) -> bool { * self == DMAMASK_DOUT7_A :: DMAMASK_DOUT7_ENABLE } } # [doc = "Field `DMAMASK_DOUT7` writer - DMA is allowed to modify DOUT7"] pub type DMAMASK_DOUT7_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT7_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout7_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT7_A :: DMAMASK_DOUT7_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout7_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT7_A :: DMAMASK_DOUT7_ENABLE) } } # [doc = "Field `DMAMASK_DOUT8` reader - DMA is allowed to modify DOUT8"] pub type DMAMASK_DOUT8_R = crate :: BitReader < DMAMASK_DOUT8_A > ; # [doc = "DMA is allowed to modify DOUT8\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT8_A { # [doc = "0: DISABLE"] DMAMASK_DOUT8_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT8_ENABLE = 1 , } impl From < DMAMASK_DOUT8_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT8_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT8_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT8_A { match self . bits { false => DMAMASK_DOUT8_A :: DMAMASK_DOUT8_DISABLE , true => DMAMASK_DOUT8_A :: DMAMASK_DOUT8_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout8_disable (& self) -> bool { * self == DMAMASK_DOUT8_A :: DMAMASK_DOUT8_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout8_enable (& self) -> bool { * self == DMAMASK_DOUT8_A :: DMAMASK_DOUT8_ENABLE } } # [doc = "Field `DMAMASK_DOUT8` writer - DMA is allowed to modify DOUT8"] pub type DMAMASK_DOUT8_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT8_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout8_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT8_A :: DMAMASK_DOUT8_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout8_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT8_A :: DMAMASK_DOUT8_ENABLE) } } # [doc = "Field `DMAMASK_DOUT9` reader - DMA is allowed to modify DOUT9"] pub type DMAMASK_DOUT9_R = crate :: BitReader < DMAMASK_DOUT9_A > ; # [doc = "DMA is allowed to modify DOUT9\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT9_A { # [doc = "0: DISABLE"] DMAMASK_DOUT9_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT9_ENABLE = 1 , } impl From < DMAMASK_DOUT9_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT9_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT9_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT9_A { match self . bits { false => DMAMASK_DOUT9_A :: DMAMASK_DOUT9_DISABLE , true => DMAMASK_DOUT9_A :: DMAMASK_DOUT9_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout9_disable (& self) -> bool { * self == DMAMASK_DOUT9_A :: DMAMASK_DOUT9_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout9_enable (& self) -> bool { * self == DMAMASK_DOUT9_A :: DMAMASK_DOUT9_ENABLE } } # [doc = "Field `DMAMASK_DOUT9` writer - DMA is allowed to modify DOUT9"] pub type DMAMASK_DOUT9_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT9_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout9_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT9_A :: DMAMASK_DOUT9_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout9_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT9_A :: DMAMASK_DOUT9_ENABLE) } } # [doc = "Field `DMAMASK_DOUT10` reader - DMA is allowed to modify DOUT10"] pub type DMAMASK_DOUT10_R = crate :: BitReader < DMAMASK_DOUT10_A > ; # [doc = "DMA is allowed to modify DOUT10\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT10_A { # [doc = "0: DISABLE"] DMAMASK_DOUT10_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT10_ENABLE = 1 , } impl From < DMAMASK_DOUT10_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT10_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT10_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT10_A { match self . bits { false => DMAMASK_DOUT10_A :: DMAMASK_DOUT10_DISABLE , true => DMAMASK_DOUT10_A :: DMAMASK_DOUT10_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout10_disable (& self) -> bool { * self == DMAMASK_DOUT10_A :: DMAMASK_DOUT10_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout10_enable (& self) -> bool { * self == DMAMASK_DOUT10_A :: DMAMASK_DOUT10_ENABLE } } # [doc = "Field `DMAMASK_DOUT10` writer - DMA is allowed to modify DOUT10"] pub type DMAMASK_DOUT10_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT10_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout10_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT10_A :: DMAMASK_DOUT10_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout10_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT10_A :: DMAMASK_DOUT10_ENABLE) } } # [doc = "Field `DMAMASK_DOUT11` reader - DMA is allowed to modify DOUT11"] pub type DMAMASK_DOUT11_R = crate :: BitReader < DMAMASK_DOUT11_A > ; # [doc = "DMA is allowed to modify DOUT11\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT11_A { # [doc = "0: DISABLE"] DMAMASK_DOUT11_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT11_ENABLE = 1 , } impl From < DMAMASK_DOUT11_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT11_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT11_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT11_A { match self . bits { false => DMAMASK_DOUT11_A :: DMAMASK_DOUT11_DISABLE , true => DMAMASK_DOUT11_A :: DMAMASK_DOUT11_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout11_disable (& self) -> bool { * self == DMAMASK_DOUT11_A :: DMAMASK_DOUT11_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout11_enable (& self) -> bool { * self == DMAMASK_DOUT11_A :: DMAMASK_DOUT11_ENABLE } } # [doc = "Field `DMAMASK_DOUT11` writer - DMA is allowed to modify DOUT11"] pub type DMAMASK_DOUT11_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT11_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout11_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT11_A :: DMAMASK_DOUT11_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout11_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT11_A :: DMAMASK_DOUT11_ENABLE) } } # [doc = "Field `DMAMASK_DOUT12` reader - DMA is allowed to modify DOUT12"] pub type DMAMASK_DOUT12_R = crate :: BitReader < DMAMASK_DOUT12_A > ; # [doc = "DMA is allowed to modify DOUT12\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT12_A { # [doc = "0: DISABLE"] DMAMASK_DOUT12_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT12_ENABLE = 1 , } impl From < DMAMASK_DOUT12_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT12_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT12_A { match self . bits { false => DMAMASK_DOUT12_A :: DMAMASK_DOUT12_DISABLE , true => DMAMASK_DOUT12_A :: DMAMASK_DOUT12_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout12_disable (& self) -> bool { * self == DMAMASK_DOUT12_A :: DMAMASK_DOUT12_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout12_enable (& self) -> bool { * self == DMAMASK_DOUT12_A :: DMAMASK_DOUT12_ENABLE } } # [doc = "Field `DMAMASK_DOUT12` writer - DMA is allowed to modify DOUT12"] pub type DMAMASK_DOUT12_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT12_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout12_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT12_A :: DMAMASK_DOUT12_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout12_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT12_A :: DMAMASK_DOUT12_ENABLE) } } # [doc = "Field `DMAMASK_DOUT13` reader - DMA is allowed to modify DOUT13"] pub type DMAMASK_DOUT13_R = crate :: BitReader < DMAMASK_DOUT13_A > ; # [doc = "DMA is allowed to modify DOUT13\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT13_A { # [doc = "0: DISABLE"] DMAMASK_DOUT13_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT13_ENABLE = 1 , } impl From < DMAMASK_DOUT13_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT13_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT13_A { match self . bits { false => DMAMASK_DOUT13_A :: DMAMASK_DOUT13_DISABLE , true => DMAMASK_DOUT13_A :: DMAMASK_DOUT13_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout13_disable (& self) -> bool { * self == DMAMASK_DOUT13_A :: DMAMASK_DOUT13_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout13_enable (& self) -> bool { * self == DMAMASK_DOUT13_A :: DMAMASK_DOUT13_ENABLE } } # [doc = "Field `DMAMASK_DOUT13` writer - DMA is allowed to modify DOUT13"] pub type DMAMASK_DOUT13_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT13_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout13_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT13_A :: DMAMASK_DOUT13_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout13_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT13_A :: DMAMASK_DOUT13_ENABLE) } } # [doc = "Field `DMAMASK_DOUT14` reader - DMA is allowed to modify DOUT14"] pub type DMAMASK_DOUT14_R = crate :: BitReader < DMAMASK_DOUT14_A > ; # [doc = "DMA is allowed to modify DOUT14\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT14_A { # [doc = "0: DISABLE"] DMAMASK_DOUT14_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT14_ENABLE = 1 , } impl From < DMAMASK_DOUT14_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT14_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT14_A { match self . bits { false => DMAMASK_DOUT14_A :: DMAMASK_DOUT14_DISABLE , true => DMAMASK_DOUT14_A :: DMAMASK_DOUT14_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout14_disable (& self) -> bool { * self == DMAMASK_DOUT14_A :: DMAMASK_DOUT14_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout14_enable (& self) -> bool { * self == DMAMASK_DOUT14_A :: DMAMASK_DOUT14_ENABLE } } # [doc = "Field `DMAMASK_DOUT14` writer - DMA is allowed to modify DOUT14"] pub type DMAMASK_DOUT14_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT14_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout14_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT14_A :: DMAMASK_DOUT14_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout14_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT14_A :: DMAMASK_DOUT14_ENABLE) } } # [doc = "Field `DMAMASK_DOUT15` reader - DMA is allowed to modify DOUT15"] pub type DMAMASK_DOUT15_R = crate :: BitReader < DMAMASK_DOUT15_A > ; # [doc = "DMA is allowed to modify DOUT15\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT15_A { # [doc = "0: DISABLE"] DMAMASK_DOUT15_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT15_ENABLE = 1 , } impl From < DMAMASK_DOUT15_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT15_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT15_A { match self . bits { false => DMAMASK_DOUT15_A :: DMAMASK_DOUT15_DISABLE , true => DMAMASK_DOUT15_A :: DMAMASK_DOUT15_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout15_disable (& self) -> bool { * self == DMAMASK_DOUT15_A :: DMAMASK_DOUT15_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout15_enable (& self) -> bool { * self == DMAMASK_DOUT15_A :: DMAMASK_DOUT15_ENABLE } } # [doc = "Field `DMAMASK_DOUT15` writer - DMA is allowed to modify DOUT15"] pub type DMAMASK_DOUT15_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT15_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout15_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT15_A :: DMAMASK_DOUT15_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout15_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT15_A :: DMAMASK_DOUT15_ENABLE) } } # [doc = "Field `DMAMASK_DOUT16` reader - DMA is allowed to modify DOUT16"] pub type DMAMASK_DOUT16_R = crate :: BitReader < DMAMASK_DOUT16_A > ; # [doc = "DMA is allowed to modify DOUT16\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT16_A { # [doc = "0: DISABLE"] DMAMASK_DOUT16_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT16_ENABLE = 1 , } impl From < DMAMASK_DOUT16_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT16_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT16_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT16_A { match self . bits { false => DMAMASK_DOUT16_A :: DMAMASK_DOUT16_DISABLE , true => DMAMASK_DOUT16_A :: DMAMASK_DOUT16_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout16_disable (& self) -> bool { * self == DMAMASK_DOUT16_A :: DMAMASK_DOUT16_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout16_enable (& self) -> bool { * self == DMAMASK_DOUT16_A :: DMAMASK_DOUT16_ENABLE } } # [doc = "Field `DMAMASK_DOUT16` writer - DMA is allowed to modify DOUT16"] pub type DMAMASK_DOUT16_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT16_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT16_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout16_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT16_A :: DMAMASK_DOUT16_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout16_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT16_A :: DMAMASK_DOUT16_ENABLE) } } # [doc = "Field `DMAMASK_DOUT17` reader - DMA is allowed to modify DOUT17"] pub type DMAMASK_DOUT17_R = crate :: BitReader < DMAMASK_DOUT17_A > ; # [doc = "DMA is allowed to modify DOUT17\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT17_A { # [doc = "0: DISABLE"] DMAMASK_DOUT17_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT17_ENABLE = 1 , } impl From < DMAMASK_DOUT17_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT17_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT17_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT17_A { match self . bits { false => DMAMASK_DOUT17_A :: DMAMASK_DOUT17_DISABLE , true => DMAMASK_DOUT17_A :: DMAMASK_DOUT17_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout17_disable (& self) -> bool { * self == DMAMASK_DOUT17_A :: DMAMASK_DOUT17_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout17_enable (& self) -> bool { * self == DMAMASK_DOUT17_A :: DMAMASK_DOUT17_ENABLE } } # [doc = "Field `DMAMASK_DOUT17` writer - DMA is allowed to modify DOUT17"] pub type DMAMASK_DOUT17_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT17_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT17_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout17_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT17_A :: DMAMASK_DOUT17_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout17_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT17_A :: DMAMASK_DOUT17_ENABLE) } } # [doc = "Field `DMAMASK_DOUT18` reader - DMA is allowed to modify DOUT18"] pub type DMAMASK_DOUT18_R = crate :: BitReader < DMAMASK_DOUT18_A > ; # [doc = "DMA is allowed to modify DOUT18\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT18_A { # [doc = "0: DISABLE"] DMAMASK_DOUT18_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT18_ENABLE = 1 , } impl From < DMAMASK_DOUT18_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT18_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT18_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT18_A { match self . bits { false => DMAMASK_DOUT18_A :: DMAMASK_DOUT18_DISABLE , true => DMAMASK_DOUT18_A :: DMAMASK_DOUT18_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout18_disable (& self) -> bool { * self == DMAMASK_DOUT18_A :: DMAMASK_DOUT18_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout18_enable (& self) -> bool { * self == DMAMASK_DOUT18_A :: DMAMASK_DOUT18_ENABLE } } # [doc = "Field `DMAMASK_DOUT18` writer - DMA is allowed to modify DOUT18"] pub type DMAMASK_DOUT18_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT18_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT18_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout18_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT18_A :: DMAMASK_DOUT18_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout18_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT18_A :: DMAMASK_DOUT18_ENABLE) } } # [doc = "Field `DMAMASK_DOUT19` reader - DMA is allowed to modify DOUT19"] pub type DMAMASK_DOUT19_R = crate :: BitReader < DMAMASK_DOUT19_A > ; # [doc = "DMA is allowed to modify DOUT19\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT19_A { # [doc = "0: DISABLE"] DMAMASK_DOUT19_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT19_ENABLE = 1 , } impl From < DMAMASK_DOUT19_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT19_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT19_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT19_A { match self . bits { false => DMAMASK_DOUT19_A :: DMAMASK_DOUT19_DISABLE , true => DMAMASK_DOUT19_A :: DMAMASK_DOUT19_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout19_disable (& self) -> bool { * self == DMAMASK_DOUT19_A :: DMAMASK_DOUT19_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout19_enable (& self) -> bool { * self == DMAMASK_DOUT19_A :: DMAMASK_DOUT19_ENABLE } } # [doc = "Field `DMAMASK_DOUT19` writer - DMA is allowed to modify DOUT19"] pub type DMAMASK_DOUT19_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT19_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT19_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout19_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT19_A :: DMAMASK_DOUT19_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout19_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT19_A :: DMAMASK_DOUT19_ENABLE) } } # [doc = "Field `DMAMASK_DOUT20` reader - DMA is allowed to modify DOUT20"] pub type DMAMASK_DOUT20_R = crate :: BitReader < DMAMASK_DOUT20_A > ; # [doc = "DMA is allowed to modify DOUT20\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT20_A { # [doc = "0: DISABLE"] DMAMASK_DOUT20_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT20_ENABLE = 1 , } impl From < DMAMASK_DOUT20_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT20_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT20_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT20_A { match self . bits { false => DMAMASK_DOUT20_A :: DMAMASK_DOUT20_DISABLE , true => DMAMASK_DOUT20_A :: DMAMASK_DOUT20_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout20_disable (& self) -> bool { * self == DMAMASK_DOUT20_A :: DMAMASK_DOUT20_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout20_enable (& self) -> bool { * self == DMAMASK_DOUT20_A :: DMAMASK_DOUT20_ENABLE } } # [doc = "Field `DMAMASK_DOUT20` writer - DMA is allowed to modify DOUT20"] pub type DMAMASK_DOUT20_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT20_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT20_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout20_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT20_A :: DMAMASK_DOUT20_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout20_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT20_A :: DMAMASK_DOUT20_ENABLE) } } # [doc = "Field `DMAMASK_DOUT21` reader - DMA is allowed to modify DOUT21"] pub type DMAMASK_DOUT21_R = crate :: BitReader < DMAMASK_DOUT21_A > ; # [doc = "DMA is allowed to modify DOUT21\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT21_A { # [doc = "0: DISABLE"] DMAMASK_DOUT21_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT21_ENABLE = 1 , } impl From < DMAMASK_DOUT21_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT21_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT21_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT21_A { match self . bits { false => DMAMASK_DOUT21_A :: DMAMASK_DOUT21_DISABLE , true => DMAMASK_DOUT21_A :: DMAMASK_DOUT21_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout21_disable (& self) -> bool { * self == DMAMASK_DOUT21_A :: DMAMASK_DOUT21_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout21_enable (& self) -> bool { * self == DMAMASK_DOUT21_A :: DMAMASK_DOUT21_ENABLE } } # [doc = "Field `DMAMASK_DOUT21` writer - DMA is allowed to modify DOUT21"] pub type DMAMASK_DOUT21_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT21_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT21_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout21_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT21_A :: DMAMASK_DOUT21_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout21_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT21_A :: DMAMASK_DOUT21_ENABLE) } } # [doc = "Field `DMAMASK_DOUT22` reader - DMA is allowed to modify DOUT22"] pub type DMAMASK_DOUT22_R = crate :: BitReader < DMAMASK_DOUT22_A > ; # [doc = "DMA is allowed to modify DOUT22\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT22_A { # [doc = "0: DISABLE"] DMAMASK_DOUT22_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT22_ENABLE = 1 , } impl From < DMAMASK_DOUT22_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT22_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT22_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT22_A { match self . bits { false => DMAMASK_DOUT22_A :: DMAMASK_DOUT22_DISABLE , true => DMAMASK_DOUT22_A :: DMAMASK_DOUT22_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout22_disable (& self) -> bool { * self == DMAMASK_DOUT22_A :: DMAMASK_DOUT22_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout22_enable (& self) -> bool { * self == DMAMASK_DOUT22_A :: DMAMASK_DOUT22_ENABLE } } # [doc = "Field `DMAMASK_DOUT22` writer - DMA is allowed to modify DOUT22"] pub type DMAMASK_DOUT22_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT22_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT22_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout22_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT22_A :: DMAMASK_DOUT22_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout22_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT22_A :: DMAMASK_DOUT22_ENABLE) } } # [doc = "Field `DMAMASK_DOUT23` reader - DMA is allowed to modify DOUT23"] pub type DMAMASK_DOUT23_R = crate :: BitReader < DMAMASK_DOUT23_A > ; # [doc = "DMA is allowed to modify DOUT23\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT23_A { # [doc = "0: DISABLE"] DMAMASK_DOUT23_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT23_ENABLE = 1 , } impl From < DMAMASK_DOUT23_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT23_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT23_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT23_A { match self . bits { false => DMAMASK_DOUT23_A :: DMAMASK_DOUT23_DISABLE , true => DMAMASK_DOUT23_A :: DMAMASK_DOUT23_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout23_disable (& self) -> bool { * self == DMAMASK_DOUT23_A :: DMAMASK_DOUT23_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout23_enable (& self) -> bool { * self == DMAMASK_DOUT23_A :: DMAMASK_DOUT23_ENABLE } } # [doc = "Field `DMAMASK_DOUT23` writer - DMA is allowed to modify DOUT23"] pub type DMAMASK_DOUT23_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT23_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT23_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout23_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT23_A :: DMAMASK_DOUT23_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout23_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT23_A :: DMAMASK_DOUT23_ENABLE) } } # [doc = "Field `DMAMASK_DOUT24` reader - DMA is allowed to modify DOUT24"] pub type DMAMASK_DOUT24_R = crate :: BitReader < DMAMASK_DOUT24_A > ; # [doc = "DMA is allowed to modify DOUT24\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT24_A { # [doc = "0: DISABLE"] DMAMASK_DOUT24_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT24_ENABLE = 1 , } impl From < DMAMASK_DOUT24_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT24_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT24_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT24_A { match self . bits { false => DMAMASK_DOUT24_A :: DMAMASK_DOUT24_DISABLE , true => DMAMASK_DOUT24_A :: DMAMASK_DOUT24_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout24_disable (& self) -> bool { * self == DMAMASK_DOUT24_A :: DMAMASK_DOUT24_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout24_enable (& self) -> bool { * self == DMAMASK_DOUT24_A :: DMAMASK_DOUT24_ENABLE } } # [doc = "Field `DMAMASK_DOUT24` writer - DMA is allowed to modify DOUT24"] pub type DMAMASK_DOUT24_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT24_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT24_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout24_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT24_A :: DMAMASK_DOUT24_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout24_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT24_A :: DMAMASK_DOUT24_ENABLE) } } # [doc = "Field `DMAMASK_DOUT25` reader - DMA is allowed to modify DOUT25"] pub type DMAMASK_DOUT25_R = crate :: BitReader < DMAMASK_DOUT25_A > ; # [doc = "DMA is allowed to modify DOUT25\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT25_A { # [doc = "0: DISABLE"] DMAMASK_DOUT25_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT25_ENABLE = 1 , } impl From < DMAMASK_DOUT25_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT25_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT25_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT25_A { match self . bits { false => DMAMASK_DOUT25_A :: DMAMASK_DOUT25_DISABLE , true => DMAMASK_DOUT25_A :: DMAMASK_DOUT25_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout25_disable (& self) -> bool { * self == DMAMASK_DOUT25_A :: DMAMASK_DOUT25_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout25_enable (& self) -> bool { * self == DMAMASK_DOUT25_A :: DMAMASK_DOUT25_ENABLE } } # [doc = "Field `DMAMASK_DOUT25` writer - DMA is allowed to modify DOUT25"] pub type DMAMASK_DOUT25_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT25_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT25_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout25_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT25_A :: DMAMASK_DOUT25_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout25_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT25_A :: DMAMASK_DOUT25_ENABLE) } } # [doc = "Field `DMAMASK_DOUT26` reader - DMA is allowed to modify DOUT26"] pub type DMAMASK_DOUT26_R = crate :: BitReader < DMAMASK_DOUT26_A > ; # [doc = "DMA is allowed to modify DOUT26\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT26_A { # [doc = "0: DISABLE"] DMAMASK_DOUT26_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT26_ENABLE = 1 , } impl From < DMAMASK_DOUT26_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT26_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT26_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT26_A { match self . bits { false => DMAMASK_DOUT26_A :: DMAMASK_DOUT26_DISABLE , true => DMAMASK_DOUT26_A :: DMAMASK_DOUT26_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout26_disable (& self) -> bool { * self == DMAMASK_DOUT26_A :: DMAMASK_DOUT26_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout26_enable (& self) -> bool { * self == DMAMASK_DOUT26_A :: DMAMASK_DOUT26_ENABLE } } # [doc = "Field `DMAMASK_DOUT26` writer - DMA is allowed to modify DOUT26"] pub type DMAMASK_DOUT26_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT26_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT26_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout26_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT26_A :: DMAMASK_DOUT26_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout26_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT26_A :: DMAMASK_DOUT26_ENABLE) } } # [doc = "Field `DMAMASK_DOUT27` reader - DMA is allowed to modify DOUT27"] pub type DMAMASK_DOUT27_R = crate :: BitReader < DMAMASK_DOUT27_A > ; # [doc = "DMA is allowed to modify DOUT27\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT27_A { # [doc = "0: DISABLE"] DMAMASK_DOUT27_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT27_ENABLE = 1 , } impl From < DMAMASK_DOUT27_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT27_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT27_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT27_A { match self . bits { false => DMAMASK_DOUT27_A :: DMAMASK_DOUT27_DISABLE , true => DMAMASK_DOUT27_A :: DMAMASK_DOUT27_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout27_disable (& self) -> bool { * self == DMAMASK_DOUT27_A :: DMAMASK_DOUT27_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout27_enable (& self) -> bool { * self == DMAMASK_DOUT27_A :: DMAMASK_DOUT27_ENABLE } } # [doc = "Field `DMAMASK_DOUT27` writer - DMA is allowed to modify DOUT27"] pub type DMAMASK_DOUT27_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT27_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT27_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout27_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT27_A :: DMAMASK_DOUT27_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout27_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT27_A :: DMAMASK_DOUT27_ENABLE) } } # [doc = "Field `DMAMASK_DOUT28` reader - DMA is allowed to modify DOUT28"] pub type DMAMASK_DOUT28_R = crate :: BitReader < DMAMASK_DOUT28_A > ; # [doc = "DMA is allowed to modify DOUT28\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT28_A { # [doc = "0: DISABLE"] DMAMASK_DOUT28_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT28_ENABLE = 1 , } impl From < DMAMASK_DOUT28_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT28_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT28_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT28_A { match self . bits { false => DMAMASK_DOUT28_A :: DMAMASK_DOUT28_DISABLE , true => DMAMASK_DOUT28_A :: DMAMASK_DOUT28_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout28_disable (& self) -> bool { * self == DMAMASK_DOUT28_A :: DMAMASK_DOUT28_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout28_enable (& self) -> bool { * self == DMAMASK_DOUT28_A :: DMAMASK_DOUT28_ENABLE } } # [doc = "Field `DMAMASK_DOUT28` writer - DMA is allowed to modify DOUT28"] pub type DMAMASK_DOUT28_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT28_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT28_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout28_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT28_A :: DMAMASK_DOUT28_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout28_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT28_A :: DMAMASK_DOUT28_ENABLE) } } # [doc = "Field `DMAMASK_DOUT29` reader - DMA is allowed to modify DOUT29"] pub type DMAMASK_DOUT29_R = crate :: BitReader < DMAMASK_DOUT29_A > ; # [doc = "DMA is allowed to modify DOUT29\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT29_A { # [doc = "0: DISABLE"] DMAMASK_DOUT29_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT29_ENABLE = 1 , } impl From < DMAMASK_DOUT29_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT29_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT29_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT29_A { match self . bits { false => DMAMASK_DOUT29_A :: DMAMASK_DOUT29_DISABLE , true => DMAMASK_DOUT29_A :: DMAMASK_DOUT29_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout29_disable (& self) -> bool { * self == DMAMASK_DOUT29_A :: DMAMASK_DOUT29_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout29_enable (& self) -> bool { * self == DMAMASK_DOUT29_A :: DMAMASK_DOUT29_ENABLE } } # [doc = "Field `DMAMASK_DOUT29` writer - DMA is allowed to modify DOUT29"] pub type DMAMASK_DOUT29_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT29_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT29_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout29_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT29_A :: DMAMASK_DOUT29_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout29_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT29_A :: DMAMASK_DOUT29_ENABLE) } } # [doc = "Field `DMAMASK_DOUT30` reader - DMA is allowed to modify DOUT30"] pub type DMAMASK_DOUT30_R = crate :: BitReader < DMAMASK_DOUT30_A > ; # [doc = "DMA is allowed to modify DOUT30\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT30_A { # [doc = "0: DISABLE"] DMAMASK_DOUT30_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT30_ENABLE = 1 , } impl From < DMAMASK_DOUT30_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT30_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT30_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT30_A { match self . bits { false => DMAMASK_DOUT30_A :: DMAMASK_DOUT30_DISABLE , true => DMAMASK_DOUT30_A :: DMAMASK_DOUT30_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout30_disable (& self) -> bool { * self == DMAMASK_DOUT30_A :: DMAMASK_DOUT30_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout30_enable (& self) -> bool { * self == DMAMASK_DOUT30_A :: DMAMASK_DOUT30_ENABLE } } # [doc = "Field `DMAMASK_DOUT30` writer - DMA is allowed to modify DOUT30"] pub type DMAMASK_DOUT30_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT30_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT30_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout30_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT30_A :: DMAMASK_DOUT30_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout30_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT30_A :: DMAMASK_DOUT30_ENABLE) } } # [doc = "Field `DMAMASK_DOUT31` reader - DMA is allowed to modify DOUT31"] pub type DMAMASK_DOUT31_R = crate :: BitReader < DMAMASK_DOUT31_A > ; # [doc = "DMA is allowed to modify DOUT31\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAMASK_DOUT31_A { # [doc = "0: DISABLE"] DMAMASK_DOUT31_DISABLE = 0 , # [doc = "1: ENABLE"] DMAMASK_DOUT31_ENABLE = 1 , } impl From < DMAMASK_DOUT31_A > for bool { # [inline (always)] fn from (variant : DMAMASK_DOUT31_A) -> Self { variant as u8 != 0 } } impl DMAMASK_DOUT31_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAMASK_DOUT31_A { match self . bits { false => DMAMASK_DOUT31_A :: DMAMASK_DOUT31_DISABLE , true => DMAMASK_DOUT31_A :: DMAMASK_DOUT31_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmamask_dout31_disable (& self) -> bool { * self == DMAMASK_DOUT31_A :: DMAMASK_DOUT31_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmamask_dout31_enable (& self) -> bool { * self == DMAMASK_DOUT31_A :: DMAMASK_DOUT31_ENABLE } } # [doc = "Field `DMAMASK_DOUT31` writer - DMA is allowed to modify DOUT31"] pub type DMAMASK_DOUT31_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAMASK_DOUT31_A > ; impl < 'a , REG , const O : u8 > DMAMASK_DOUT31_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmamask_dout31_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT31_A :: DMAMASK_DOUT31_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmamask_dout31_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAMASK_DOUT31_A :: DMAMASK_DOUT31_ENABLE) } } impl R { # [doc = "Bit 0 - DMA is allowed to modify DOUT0"] # [inline (always)] pub fn dmamask_dout0 (& self) -> DMAMASK_DOUT0_R { DMAMASK_DOUT0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - DMA is allowed to modify DOUT1"] # [inline (always)] pub fn dmamask_dout1 (& self) -> DMAMASK_DOUT1_R { DMAMASK_DOUT1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - DMA is allowed to modify DOUT2"] # [inline (always)] pub fn dmamask_dout2 (& self) -> DMAMASK_DOUT2_R { DMAMASK_DOUT2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - DMA is allowed to modify DOUT3"] # [inline (always)] pub fn dmamask_dout3 (& self) -> DMAMASK_DOUT3_R { DMAMASK_DOUT3_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - DMA is allowed to modify DOUT4"] # [inline (always)] pub fn dmamask_dout4 (& self) -> DMAMASK_DOUT4_R { DMAMASK_DOUT4_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - DMA is allowed to modify DOUT5"] # [inline (always)] pub fn dmamask_dout5 (& self) -> DMAMASK_DOUT5_R { DMAMASK_DOUT5_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - DMA is allowed to modify DOUT6"] # [inline (always)] pub fn dmamask_dout6 (& self) -> DMAMASK_DOUT6_R { DMAMASK_DOUT6_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - DMA is allowed to modify DOUT7"] # [inline (always)] pub fn dmamask_dout7 (& self) -> DMAMASK_DOUT7_R { DMAMASK_DOUT7_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - DMA is allowed to modify DOUT8"] # [inline (always)] pub fn dmamask_dout8 (& self) -> DMAMASK_DOUT8_R { DMAMASK_DOUT8_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - DMA is allowed to modify DOUT9"] # [inline (always)] pub fn dmamask_dout9 (& self) -> DMAMASK_DOUT9_R { DMAMASK_DOUT9_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - DMA is allowed to modify DOUT10"] # [inline (always)] pub fn dmamask_dout10 (& self) -> DMAMASK_DOUT10_R { DMAMASK_DOUT10_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - DMA is allowed to modify DOUT11"] # [inline (always)] pub fn dmamask_dout11 (& self) -> DMAMASK_DOUT11_R { DMAMASK_DOUT11_R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - DMA is allowed to modify DOUT12"] # [inline (always)] pub fn dmamask_dout12 (& self) -> DMAMASK_DOUT12_R { DMAMASK_DOUT12_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - DMA is allowed to modify DOUT13"] # [inline (always)] pub fn dmamask_dout13 (& self) -> DMAMASK_DOUT13_R { DMAMASK_DOUT13_R :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - DMA is allowed to modify DOUT14"] # [inline (always)] pub fn dmamask_dout14 (& self) -> DMAMASK_DOUT14_R { DMAMASK_DOUT14_R :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - DMA is allowed to modify DOUT15"] # [inline (always)] pub fn dmamask_dout15 (& self) -> DMAMASK_DOUT15_R { DMAMASK_DOUT15_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - DMA is allowed to modify DOUT16"] # [inline (always)] pub fn dmamask_dout16 (& self) -> DMAMASK_DOUT16_R { DMAMASK_DOUT16_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - DMA is allowed to modify DOUT17"] # [inline (always)] pub fn dmamask_dout17 (& self) -> DMAMASK_DOUT17_R { DMAMASK_DOUT17_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - DMA is allowed to modify DOUT18"] # [inline (always)] pub fn dmamask_dout18 (& self) -> DMAMASK_DOUT18_R { DMAMASK_DOUT18_R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - DMA is allowed to modify DOUT19"] # [inline (always)] pub fn dmamask_dout19 (& self) -> DMAMASK_DOUT19_R { DMAMASK_DOUT19_R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - DMA is allowed to modify DOUT20"] # [inline (always)] pub fn dmamask_dout20 (& self) -> DMAMASK_DOUT20_R { DMAMASK_DOUT20_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - DMA is allowed to modify DOUT21"] # [inline (always)] pub fn dmamask_dout21 (& self) -> DMAMASK_DOUT21_R { DMAMASK_DOUT21_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - DMA is allowed to modify DOUT22"] # [inline (always)] pub fn dmamask_dout22 (& self) -> DMAMASK_DOUT22_R { DMAMASK_DOUT22_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - DMA is allowed to modify DOUT23"] # [inline (always)] pub fn dmamask_dout23 (& self) -> DMAMASK_DOUT23_R { DMAMASK_DOUT23_R :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - DMA is allowed to modify DOUT24"] # [inline (always)] pub fn dmamask_dout24 (& self) -> DMAMASK_DOUT24_R { DMAMASK_DOUT24_R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - DMA is allowed to modify DOUT25"] # [inline (always)] pub fn dmamask_dout25 (& self) -> DMAMASK_DOUT25_R { DMAMASK_DOUT25_R :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - DMA is allowed to modify DOUT26"] # [inline (always)] pub fn dmamask_dout26 (& self) -> DMAMASK_DOUT26_R { DMAMASK_DOUT26_R :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - DMA is allowed to modify DOUT27"] # [inline (always)] pub fn dmamask_dout27 (& self) -> DMAMASK_DOUT27_R { DMAMASK_DOUT27_R :: new (((self . bits >> 27) & 1) != 0) } # [doc = "Bit 28 - DMA is allowed to modify DOUT28"] # [inline (always)] pub fn dmamask_dout28 (& self) -> DMAMASK_DOUT28_R { DMAMASK_DOUT28_R :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - DMA is allowed to modify DOUT29"] # [inline (always)] pub fn dmamask_dout29 (& self) -> DMAMASK_DOUT29_R { DMAMASK_DOUT29_R :: new (((self . bits >> 29) & 1) != 0) } # [doc = "Bit 30 - DMA is allowed to modify DOUT30"] # [inline (always)] pub fn dmamask_dout30 (& self) -> DMAMASK_DOUT30_R { DMAMASK_DOUT30_R :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - DMA is allowed to modify DOUT31"] # [inline (always)] pub fn dmamask_dout31 (& self) -> DMAMASK_DOUT31_R { DMAMASK_DOUT31_R :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - DMA is allowed to modify DOUT0"] # [inline (always)] # [must_use] pub fn dmamask_dout0 (& mut self) -> DMAMASK_DOUT0_W < DMAMASK_SPEC , 0 > { DMAMASK_DOUT0_W :: new (self) } # [doc = "Bit 1 - DMA is allowed to modify DOUT1"] # [inline (always)] # [must_use] pub fn dmamask_dout1 (& mut self) -> DMAMASK_DOUT1_W < DMAMASK_SPEC , 1 > { DMAMASK_DOUT1_W :: new (self) } # [doc = "Bit 2 - DMA is allowed to modify DOUT2"] # [inline (always)] # [must_use] pub fn dmamask_dout2 (& mut self) -> DMAMASK_DOUT2_W < DMAMASK_SPEC , 2 > { DMAMASK_DOUT2_W :: new (self) } # [doc = "Bit 3 - DMA is allowed to modify DOUT3"] # [inline (always)] # [must_use] pub fn dmamask_dout3 (& mut self) -> DMAMASK_DOUT3_W < DMAMASK_SPEC , 3 > { DMAMASK_DOUT3_W :: new (self) } # [doc = "Bit 4 - DMA is allowed to modify DOUT4"] # [inline (always)] # [must_use] pub fn dmamask_dout4 (& mut self) -> DMAMASK_DOUT4_W < DMAMASK_SPEC , 4 > { DMAMASK_DOUT4_W :: new (self) } # [doc = "Bit 5 - DMA is allowed to modify DOUT5"] # [inline (always)] # [must_use] pub fn dmamask_dout5 (& mut self) -> DMAMASK_DOUT5_W < DMAMASK_SPEC , 5 > { DMAMASK_DOUT5_W :: new (self) } # [doc = "Bit 6 - DMA is allowed to modify DOUT6"] # [inline (always)] # [must_use] pub fn dmamask_dout6 (& mut self) -> DMAMASK_DOUT6_W < DMAMASK_SPEC , 6 > { DMAMASK_DOUT6_W :: new (self) } # [doc = "Bit 7 - DMA is allowed to modify DOUT7"] # [inline (always)] # [must_use] pub fn dmamask_dout7 (& mut self) -> DMAMASK_DOUT7_W < DMAMASK_SPEC , 7 > { DMAMASK_DOUT7_W :: new (self) } # [doc = "Bit 8 - DMA is allowed to modify DOUT8"] # [inline (always)] # [must_use] pub fn dmamask_dout8 (& mut self) -> DMAMASK_DOUT8_W < DMAMASK_SPEC , 8 > { DMAMASK_DOUT8_W :: new (self) } # [doc = "Bit 9 - DMA is allowed to modify DOUT9"] # [inline (always)] # [must_use] pub fn dmamask_dout9 (& mut self) -> DMAMASK_DOUT9_W < DMAMASK_SPEC , 9 > { DMAMASK_DOUT9_W :: new (self) } # [doc = "Bit 10 - DMA is allowed to modify DOUT10"] # [inline (always)] # [must_use] pub fn dmamask_dout10 (& mut self) -> DMAMASK_DOUT10_W < DMAMASK_SPEC , 10 > { DMAMASK_DOUT10_W :: new (self) } # [doc = "Bit 11 - DMA is allowed to modify DOUT11"] # [inline (always)] # [must_use] pub fn dmamask_dout11 (& mut self) -> DMAMASK_DOUT11_W < DMAMASK_SPEC , 11 > { DMAMASK_DOUT11_W :: new (self) } # [doc = "Bit 12 - DMA is allowed to modify DOUT12"] # [inline (always)] # [must_use] pub fn dmamask_dout12 (& mut self) -> DMAMASK_DOUT12_W < DMAMASK_SPEC , 12 > { DMAMASK_DOUT12_W :: new (self) } # [doc = "Bit 13 - DMA is allowed to modify DOUT13"] # [inline (always)] # [must_use] pub fn dmamask_dout13 (& mut self) -> DMAMASK_DOUT13_W < DMAMASK_SPEC , 13 > { DMAMASK_DOUT13_W :: new (self) } # [doc = "Bit 14 - DMA is allowed to modify DOUT14"] # [inline (always)] # [must_use] pub fn dmamask_dout14 (& mut self) -> DMAMASK_DOUT14_W < DMAMASK_SPEC , 14 > { DMAMASK_DOUT14_W :: new (self) } # [doc = "Bit 15 - DMA is allowed to modify DOUT15"] # [inline (always)] # [must_use] pub fn dmamask_dout15 (& mut self) -> DMAMASK_DOUT15_W < DMAMASK_SPEC , 15 > { DMAMASK_DOUT15_W :: new (self) } # [doc = "Bit 16 - DMA is allowed to modify DOUT16"] # [inline (always)] # [must_use] pub fn dmamask_dout16 (& mut self) -> DMAMASK_DOUT16_W < DMAMASK_SPEC , 16 > { DMAMASK_DOUT16_W :: new (self) } # [doc = "Bit 17 - DMA is allowed to modify DOUT17"] # [inline (always)] # [must_use] pub fn dmamask_dout17 (& mut self) -> DMAMASK_DOUT17_W < DMAMASK_SPEC , 17 > { DMAMASK_DOUT17_W :: new (self) } # [doc = "Bit 18 - DMA is allowed to modify DOUT18"] # [inline (always)] # [must_use] pub fn dmamask_dout18 (& mut self) -> DMAMASK_DOUT18_W < DMAMASK_SPEC , 18 > { DMAMASK_DOUT18_W :: new (self) } # [doc = "Bit 19 - DMA is allowed to modify DOUT19"] # [inline (always)] # [must_use] pub fn dmamask_dout19 (& mut self) -> DMAMASK_DOUT19_W < DMAMASK_SPEC , 19 > { DMAMASK_DOUT19_W :: new (self) } # [doc = "Bit 20 - DMA is allowed to modify DOUT20"] # [inline (always)] # [must_use] pub fn dmamask_dout20 (& mut self) -> DMAMASK_DOUT20_W < DMAMASK_SPEC , 20 > { DMAMASK_DOUT20_W :: new (self) } # [doc = "Bit 21 - DMA is allowed to modify DOUT21"] # [inline (always)] # [must_use] pub fn dmamask_dout21 (& mut self) -> DMAMASK_DOUT21_W < DMAMASK_SPEC , 21 > { DMAMASK_DOUT21_W :: new (self) } # [doc = "Bit 22 - DMA is allowed to modify DOUT22"] # [inline (always)] # [must_use] pub fn dmamask_dout22 (& mut self) -> DMAMASK_DOUT22_W < DMAMASK_SPEC , 22 > { DMAMASK_DOUT22_W :: new (self) } # [doc = "Bit 23 - DMA is allowed to modify DOUT23"] # [inline (always)] # [must_use] pub fn dmamask_dout23 (& mut self) -> DMAMASK_DOUT23_W < DMAMASK_SPEC , 23 > { DMAMASK_DOUT23_W :: new (self) } # [doc = "Bit 24 - DMA is allowed to modify DOUT24"] # [inline (always)] # [must_use] pub fn dmamask_dout24 (& mut self) -> DMAMASK_DOUT24_W < DMAMASK_SPEC , 24 > { DMAMASK_DOUT24_W :: new (self) } # [doc = "Bit 25 - DMA is allowed to modify DOUT25"] # [inline (always)] # [must_use] pub fn dmamask_dout25 (& mut self) -> DMAMASK_DOUT25_W < DMAMASK_SPEC , 25 > { DMAMASK_DOUT25_W :: new (self) } # [doc = "Bit 26 - DMA is allowed to modify DOUT26"] # [inline (always)] # [must_use] pub fn dmamask_dout26 (& mut self) -> DMAMASK_DOUT26_W < DMAMASK_SPEC , 26 > { DMAMASK_DOUT26_W :: new (self) } # [doc = "Bit 27 - DMA is allowed to modify DOUT27"] # [inline (always)] # [must_use] pub fn dmamask_dout27 (& mut self) -> DMAMASK_DOUT27_W < DMAMASK_SPEC , 27 > { DMAMASK_DOUT27_W :: new (self) } # [doc = "Bit 28 - DMA is allowed to modify DOUT28"] # [inline (always)] # [must_use] pub fn dmamask_dout28 (& mut self) -> DMAMASK_DOUT28_W < DMAMASK_SPEC , 28 > { DMAMASK_DOUT28_W :: new (self) } # [doc = "Bit 29 - DMA is allowed to modify DOUT29"] # [inline (always)] # [must_use] pub fn dmamask_dout29 (& mut self) -> DMAMASK_DOUT29_W < DMAMASK_SPEC , 29 > { DMAMASK_DOUT29_W :: new (self) } # [doc = "Bit 30 - DMA is allowed to modify DOUT30"] # [inline (always)] # [must_use] pub fn dmamask_dout30 (& mut self) -> DMAMASK_DOUT30_W < DMAMASK_SPEC , 30 > { DMAMASK_DOUT30_W :: new (self) } # [doc = "Bit 31 - DMA is allowed to modify DOUT31"] # [inline (always)] # [must_use] pub fn dmamask_dout31 (& mut self) -> DMAMASK_DOUT31_W < DMAMASK_SPEC , 31 > { DMAMASK_DOUT31_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "DMA Write MASK\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmamask::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmamask::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DMAMASK_SPEC ; impl crate :: RegisterSpec for DMAMASK_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`dmamask::R`](R) reader structure"] impl crate :: Readable for DMAMASK_SPEC { } # [doc = "`write(|w| ..)` method takes [`dmamask::W`](W) writer structure"] impl crate :: Writable for DMAMASK_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DMAMASK to value 0"] impl crate :: Resettable for DMAMASK_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }