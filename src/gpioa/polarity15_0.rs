# [doc = "Register `POLARITY15_0` reader"] pub type R = crate :: R < POLARITY15_0_SPEC > ; # [doc = "Register `POLARITY15_0` writer"] pub type W = crate :: W < POLARITY15_0_SPEC > ; # [doc = "Field `POLARITY15_0_DIO0` reader - Enables and configures edge detection polarity for DIO0."] pub type POLARITY15_0_DIO0_R = crate :: FieldReader < POLARITY15_0_DIO0_A > ; # [doc = "Enables and configures edge detection polarity for DIO0.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO0_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO0_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO0_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO0_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO0_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO0_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO0_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO0_A { type Ux = u8 ; } impl POLARITY15_0_DIO0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO0_A { match self . bits { 0 => POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_DISABLE , 1 => POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_RISE , 2 => POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_FALL , 3 => POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio0_disable (& self) -> bool { * self == POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio0_rise (& self) -> bool { * self == POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio0_fall (& self) -> bool { * self == POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio0_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO0` writer - Enables and configures edge detection polarity for DIO0."] pub type POLARITY15_0_DIO0_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO0_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio0_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio0_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio0_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio0_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO0_A :: POLARITY15_0_DIO0_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO1` reader - Enables and configures edge detection polarity for DIO1."] pub type POLARITY15_0_DIO1_R = crate :: FieldReader < POLARITY15_0_DIO1_A > ; # [doc = "Enables and configures edge detection polarity for DIO1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO1_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO1_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO1_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO1_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO1_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO1_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO1_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO1_A { type Ux = u8 ; } impl POLARITY15_0_DIO1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO1_A { match self . bits { 0 => POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_DISABLE , 1 => POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_RISE , 2 => POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_FALL , 3 => POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio1_disable (& self) -> bool { * self == POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio1_rise (& self) -> bool { * self == POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio1_fall (& self) -> bool { * self == POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio1_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO1` writer - Enables and configures edge detection polarity for DIO1."] pub type POLARITY15_0_DIO1_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO1_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio1_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio1_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio1_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio1_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO1_A :: POLARITY15_0_DIO1_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO2` reader - Enables and configures edge detection polarity for DIO2."] pub type POLARITY15_0_DIO2_R = crate :: FieldReader < POLARITY15_0_DIO2_A > ; # [doc = "Enables and configures edge detection polarity for DIO2.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO2_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO2_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO2_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO2_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO2_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO2_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO2_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO2_A { type Ux = u8 ; } impl POLARITY15_0_DIO2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO2_A { match self . bits { 0 => POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_DISABLE , 1 => POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_RISE , 2 => POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_FALL , 3 => POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio2_disable (& self) -> bool { * self == POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio2_rise (& self) -> bool { * self == POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio2_fall (& self) -> bool { * self == POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio2_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO2` writer - Enables and configures edge detection polarity for DIO2."] pub type POLARITY15_0_DIO2_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO2_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio2_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio2_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio2_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio2_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO2_A :: POLARITY15_0_DIO2_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO3` reader - Enables and configures edge detection polarity for DIO3."] pub type POLARITY15_0_DIO3_R = crate :: FieldReader < POLARITY15_0_DIO3_A > ; # [doc = "Enables and configures edge detection polarity for DIO3.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO3_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO3_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO3_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO3_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO3_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO3_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO3_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO3_A { type Ux = u8 ; } impl POLARITY15_0_DIO3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO3_A { match self . bits { 0 => POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_DISABLE , 1 => POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_RISE , 2 => POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_FALL , 3 => POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio3_disable (& self) -> bool { * self == POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio3_rise (& self) -> bool { * self == POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio3_fall (& self) -> bool { * self == POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio3_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO3` writer - Enables and configures edge detection polarity for DIO3."] pub type POLARITY15_0_DIO3_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO3_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio3_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio3_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio3_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio3_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO3_A :: POLARITY15_0_DIO3_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO4` reader - Enables and configures edge detection polarity for DIO4."] pub type POLARITY15_0_DIO4_R = crate :: FieldReader < POLARITY15_0_DIO4_A > ; # [doc = "Enables and configures edge detection polarity for DIO4.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO4_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO4_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO4_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO4_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO4_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO4_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO4_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO4_A { type Ux = u8 ; } impl POLARITY15_0_DIO4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO4_A { match self . bits { 0 => POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_DISABLE , 1 => POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_RISE , 2 => POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_FALL , 3 => POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio4_disable (& self) -> bool { * self == POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio4_rise (& self) -> bool { * self == POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio4_fall (& self) -> bool { * self == POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio4_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO4` writer - Enables and configures edge detection polarity for DIO4."] pub type POLARITY15_0_DIO4_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO4_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio4_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio4_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio4_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio4_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO4_A :: POLARITY15_0_DIO4_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO5` reader - Enables and configures edge detection polarity for DIO5."] pub type POLARITY15_0_DIO5_R = crate :: FieldReader < POLARITY15_0_DIO5_A > ; # [doc = "Enables and configures edge detection polarity for DIO5.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO5_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO5_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO5_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO5_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO5_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO5_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO5_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO5_A { type Ux = u8 ; } impl POLARITY15_0_DIO5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO5_A { match self . bits { 0 => POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_DISABLE , 1 => POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_RISE , 2 => POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_FALL , 3 => POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio5_disable (& self) -> bool { * self == POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio5_rise (& self) -> bool { * self == POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio5_fall (& self) -> bool { * self == POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio5_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO5` writer - Enables and configures edge detection polarity for DIO5."] pub type POLARITY15_0_DIO5_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO5_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio5_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio5_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio5_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio5_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO5_A :: POLARITY15_0_DIO5_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO6` reader - Enables and configures edge detection polarity for DIO6."] pub type POLARITY15_0_DIO6_R = crate :: FieldReader < POLARITY15_0_DIO6_A > ; # [doc = "Enables and configures edge detection polarity for DIO6.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO6_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO6_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO6_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO6_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO6_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO6_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO6_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO6_A { type Ux = u8 ; } impl POLARITY15_0_DIO6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO6_A { match self . bits { 0 => POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_DISABLE , 1 => POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_RISE , 2 => POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_FALL , 3 => POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio6_disable (& self) -> bool { * self == POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio6_rise (& self) -> bool { * self == POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio6_fall (& self) -> bool { * self == POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio6_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO6` writer - Enables and configures edge detection polarity for DIO6."] pub type POLARITY15_0_DIO6_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO6_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio6_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio6_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio6_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio6_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO6_A :: POLARITY15_0_DIO6_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO7` reader - Enables and configures edge detection polarity for DIO7."] pub type POLARITY15_0_DIO7_R = crate :: FieldReader < POLARITY15_0_DIO7_A > ; # [doc = "Enables and configures edge detection polarity for DIO7.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO7_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO7_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO7_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO7_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO7_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO7_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO7_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO7_A { type Ux = u8 ; } impl POLARITY15_0_DIO7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO7_A { match self . bits { 0 => POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_DISABLE , 1 => POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_RISE , 2 => POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_FALL , 3 => POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio7_disable (& self) -> bool { * self == POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio7_rise (& self) -> bool { * self == POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio7_fall (& self) -> bool { * self == POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio7_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO7` writer - Enables and configures edge detection polarity for DIO7."] pub type POLARITY15_0_DIO7_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO7_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio7_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio7_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio7_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio7_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO7_A :: POLARITY15_0_DIO7_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO8` reader - Enables and configures edge detection polarity for DIO8."] pub type POLARITY15_0_DIO8_R = crate :: FieldReader < POLARITY15_0_DIO8_A > ; # [doc = "Enables and configures edge detection polarity for DIO8.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO8_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO8_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO8_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO8_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO8_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO8_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO8_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO8_A { type Ux = u8 ; } impl POLARITY15_0_DIO8_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO8_A { match self . bits { 0 => POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_DISABLE , 1 => POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_RISE , 2 => POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_FALL , 3 => POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio8_disable (& self) -> bool { * self == POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio8_rise (& self) -> bool { * self == POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio8_fall (& self) -> bool { * self == POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio8_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO8` writer - Enables and configures edge detection polarity for DIO8."] pub type POLARITY15_0_DIO8_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO8_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio8_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio8_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio8_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio8_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO8_A :: POLARITY15_0_DIO8_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO9` reader - Enables and configures edge detection polarity for DIO9."] pub type POLARITY15_0_DIO9_R = crate :: FieldReader < POLARITY15_0_DIO9_A > ; # [doc = "Enables and configures edge detection polarity for DIO9.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO9_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO9_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO9_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO9_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO9_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO9_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO9_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO9_A { type Ux = u8 ; } impl POLARITY15_0_DIO9_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO9_A { match self . bits { 0 => POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_DISABLE , 1 => POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_RISE , 2 => POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_FALL , 3 => POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio9_disable (& self) -> bool { * self == POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio9_rise (& self) -> bool { * self == POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio9_fall (& self) -> bool { * self == POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio9_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO9` writer - Enables and configures edge detection polarity for DIO9."] pub type POLARITY15_0_DIO9_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO9_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio9_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio9_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio9_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio9_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO9_A :: POLARITY15_0_DIO9_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO10` reader - Enables and configures edge detection polarity for DIO10."] pub type POLARITY15_0_DIO10_R = crate :: FieldReader < POLARITY15_0_DIO10_A > ; # [doc = "Enables and configures edge detection polarity for DIO10.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO10_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO10_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO10_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO10_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO10_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO10_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO10_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO10_A { type Ux = u8 ; } impl POLARITY15_0_DIO10_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO10_A { match self . bits { 0 => POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_DISABLE , 1 => POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_RISE , 2 => POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_FALL , 3 => POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio10_disable (& self) -> bool { * self == POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio10_rise (& self) -> bool { * self == POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio10_fall (& self) -> bool { * self == POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio10_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO10` writer - Enables and configures edge detection polarity for DIO10."] pub type POLARITY15_0_DIO10_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO10_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio10_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio10_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio10_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio10_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO10_A :: POLARITY15_0_DIO10_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO11` reader - Enables and configures edge detection polarity for DIO11."] pub type POLARITY15_0_DIO11_R = crate :: FieldReader < POLARITY15_0_DIO11_A > ; # [doc = "Enables and configures edge detection polarity for DIO11.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO11_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO11_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO11_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO11_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO11_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO11_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO11_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO11_A { type Ux = u8 ; } impl POLARITY15_0_DIO11_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO11_A { match self . bits { 0 => POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_DISABLE , 1 => POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_RISE , 2 => POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_FALL , 3 => POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio11_disable (& self) -> bool { * self == POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio11_rise (& self) -> bool { * self == POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio11_fall (& self) -> bool { * self == POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio11_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO11` writer - Enables and configures edge detection polarity for DIO11."] pub type POLARITY15_0_DIO11_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO11_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio11_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio11_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio11_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio11_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO11_A :: POLARITY15_0_DIO11_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO12` reader - Enables and configures edge detection polarity for DIO12."] pub type POLARITY15_0_DIO12_R = crate :: FieldReader < POLARITY15_0_DIO12_A > ; # [doc = "Enables and configures edge detection polarity for DIO12.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO12_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO12_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO12_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO12_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO12_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO12_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO12_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO12_A { type Ux = u8 ; } impl POLARITY15_0_DIO12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO12_A { match self . bits { 0 => POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_DISABLE , 1 => POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_RISE , 2 => POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_FALL , 3 => POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio12_disable (& self) -> bool { * self == POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio12_rise (& self) -> bool { * self == POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio12_fall (& self) -> bool { * self == POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio12_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO12` writer - Enables and configures edge detection polarity for DIO12."] pub type POLARITY15_0_DIO12_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO12_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio12_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio12_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio12_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio12_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO12_A :: POLARITY15_0_DIO12_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO13` reader - Enables and configures edge detection polarity for DIO13."] pub type POLARITY15_0_DIO13_R = crate :: FieldReader < POLARITY15_0_DIO13_A > ; # [doc = "Enables and configures edge detection polarity for DIO13.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO13_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO13_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO13_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO13_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO13_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO13_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO13_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO13_A { type Ux = u8 ; } impl POLARITY15_0_DIO13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO13_A { match self . bits { 0 => POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_DISABLE , 1 => POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_RISE , 2 => POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_FALL , 3 => POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio13_disable (& self) -> bool { * self == POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio13_rise (& self) -> bool { * self == POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio13_fall (& self) -> bool { * self == POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio13_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO13` writer - Enables and configures edge detection polarity for DIO13."] pub type POLARITY15_0_DIO13_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO13_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio13_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio13_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio13_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio13_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO13_A :: POLARITY15_0_DIO13_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO14` reader - Enables and configures edge detection polarity for DIO14."] pub type POLARITY15_0_DIO14_R = crate :: FieldReader < POLARITY15_0_DIO14_A > ; # [doc = "Enables and configures edge detection polarity for DIO14.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO14_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO14_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO14_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO14_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO14_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO14_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO14_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO14_A { type Ux = u8 ; } impl POLARITY15_0_DIO14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO14_A { match self . bits { 0 => POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_DISABLE , 1 => POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_RISE , 2 => POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_FALL , 3 => POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio14_disable (& self) -> bool { * self == POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio14_rise (& self) -> bool { * self == POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio14_fall (& self) -> bool { * self == POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio14_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO14` writer - Enables and configures edge detection polarity for DIO14."] pub type POLARITY15_0_DIO14_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO14_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio14_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio14_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio14_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio14_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO14_A :: POLARITY15_0_DIO14_RISE_FALL) } } # [doc = "Field `POLARITY15_0_DIO15` reader - Enables and configures edge detection polarity for DIO15."] pub type POLARITY15_0_DIO15_R = crate :: FieldReader < POLARITY15_0_DIO15_A > ; # [doc = "Enables and configures edge detection polarity for DIO15.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum POLARITY15_0_DIO15_A { # [doc = "0: DISABLE"] POLARITY15_0_DIO15_DISABLE = 0 , # [doc = "1: RISE"] POLARITY15_0_DIO15_RISE = 1 , # [doc = "2: FALL"] POLARITY15_0_DIO15_FALL = 2 , # [doc = "3: RISE_FALL"] POLARITY15_0_DIO15_RISE_FALL = 3 , } impl From < POLARITY15_0_DIO15_A > for u8 { # [inline (always)] fn from (variant : POLARITY15_0_DIO15_A) -> Self { variant as _ } } impl crate :: FieldSpec for POLARITY15_0_DIO15_A { type Ux = u8 ; } impl POLARITY15_0_DIO15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> POLARITY15_0_DIO15_A { match self . bits { 0 => POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_DISABLE , 1 => POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_RISE , 2 => POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_FALL , 3 => POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_RISE_FALL , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_polarity15_0_dio15_disable (& self) -> bool { * self == POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_DISABLE } # [doc = "RISE"] # [inline (always)] pub fn is_polarity15_0_dio15_rise (& self) -> bool { * self == POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_RISE } # [doc = "FALL"] # [inline (always)] pub fn is_polarity15_0_dio15_fall (& self) -> bool { * self == POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_FALL } # [doc = "RISE_FALL"] # [inline (always)] pub fn is_polarity15_0_dio15_rise_fall (& self) -> bool { * self == POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_RISE_FALL } } # [doc = "Field `POLARITY15_0_DIO15` writer - Enables and configures edge detection polarity for DIO15."] pub type POLARITY15_0_DIO15_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , POLARITY15_0_DIO15_A > ; impl < 'a , REG , const O : u8 > POLARITY15_0_DIO15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn polarity15_0_dio15_disable (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_DISABLE) } # [doc = "RISE"] # [inline (always)] pub fn polarity15_0_dio15_rise (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_RISE) } # [doc = "FALL"] # [inline (always)] pub fn polarity15_0_dio15_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_FALL) } # [doc = "RISE_FALL"] # [inline (always)] pub fn polarity15_0_dio15_rise_fall (self) -> & 'a mut crate :: W < REG > { self . variant (POLARITY15_0_DIO15_A :: POLARITY15_0_DIO15_RISE_FALL) } } impl R { # [doc = "Bits 0:1 - Enables and configures edge detection polarity for DIO0."] # [inline (always)] pub fn polarity15_0_dio0 (& self) -> POLARITY15_0_DIO0_R { POLARITY15_0_DIO0_R :: new ((self . bits & 3) as u8) } # [doc = "Bits 2:3 - Enables and configures edge detection polarity for DIO1."] # [inline (always)] pub fn polarity15_0_dio1 (& self) -> POLARITY15_0_DIO1_R { POLARITY15_0_DIO1_R :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 4:5 - Enables and configures edge detection polarity for DIO2."] # [inline (always)] pub fn polarity15_0_dio2 (& self) -> POLARITY15_0_DIO2_R { POLARITY15_0_DIO2_R :: new (((self . bits >> 4) & 3) as u8) } # [doc = "Bits 6:7 - Enables and configures edge detection polarity for DIO3."] # [inline (always)] pub fn polarity15_0_dio3 (& self) -> POLARITY15_0_DIO3_R { POLARITY15_0_DIO3_R :: new (((self . bits >> 6) & 3) as u8) } # [doc = "Bits 8:9 - Enables and configures edge detection polarity for DIO4."] # [inline (always)] pub fn polarity15_0_dio4 (& self) -> POLARITY15_0_DIO4_R { POLARITY15_0_DIO4_R :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bits 10:11 - Enables and configures edge detection polarity for DIO5."] # [inline (always)] pub fn polarity15_0_dio5 (& self) -> POLARITY15_0_DIO5_R { POLARITY15_0_DIO5_R :: new (((self . bits >> 10) & 3) as u8) } # [doc = "Bits 12:13 - Enables and configures edge detection polarity for DIO6."] # [inline (always)] pub fn polarity15_0_dio6 (& self) -> POLARITY15_0_DIO6_R { POLARITY15_0_DIO6_R :: new (((self . bits >> 12) & 3) as u8) } # [doc = "Bits 14:15 - Enables and configures edge detection polarity for DIO7."] # [inline (always)] pub fn polarity15_0_dio7 (& self) -> POLARITY15_0_DIO7_R { POLARITY15_0_DIO7_R :: new (((self . bits >> 14) & 3) as u8) } # [doc = "Bits 16:17 - Enables and configures edge detection polarity for DIO8."] # [inline (always)] pub fn polarity15_0_dio8 (& self) -> POLARITY15_0_DIO8_R { POLARITY15_0_DIO8_R :: new (((self . bits >> 16) & 3) as u8) } # [doc = "Bits 18:19 - Enables and configures edge detection polarity for DIO9."] # [inline (always)] pub fn polarity15_0_dio9 (& self) -> POLARITY15_0_DIO9_R { POLARITY15_0_DIO9_R :: new (((self . bits >> 18) & 3) as u8) } # [doc = "Bits 20:21 - Enables and configures edge detection polarity for DIO10."] # [inline (always)] pub fn polarity15_0_dio10 (& self) -> POLARITY15_0_DIO10_R { POLARITY15_0_DIO10_R :: new (((self . bits >> 20) & 3) as u8) } # [doc = "Bits 22:23 - Enables and configures edge detection polarity for DIO11."] # [inline (always)] pub fn polarity15_0_dio11 (& self) -> POLARITY15_0_DIO11_R { POLARITY15_0_DIO11_R :: new (((self . bits >> 22) & 3) as u8) } # [doc = "Bits 24:25 - Enables and configures edge detection polarity for DIO12."] # [inline (always)] pub fn polarity15_0_dio12 (& self) -> POLARITY15_0_DIO12_R { POLARITY15_0_DIO12_R :: new (((self . bits >> 24) & 3) as u8) } # [doc = "Bits 26:27 - Enables and configures edge detection polarity for DIO13."] # [inline (always)] pub fn polarity15_0_dio13 (& self) -> POLARITY15_0_DIO13_R { POLARITY15_0_DIO13_R :: new (((self . bits >> 26) & 3) as u8) } # [doc = "Bits 28:29 - Enables and configures edge detection polarity for DIO14."] # [inline (always)] pub fn polarity15_0_dio14 (& self) -> POLARITY15_0_DIO14_R { POLARITY15_0_DIO14_R :: new (((self . bits >> 28) & 3) as u8) } # [doc = "Bits 30:31 - Enables and configures edge detection polarity for DIO15."] # [inline (always)] pub fn polarity15_0_dio15 (& self) -> POLARITY15_0_DIO15_R { POLARITY15_0_DIO15_R :: new (((self . bits >> 30) & 3) as u8) } } impl W { # [doc = "Bits 0:1 - Enables and configures edge detection polarity for DIO0."] # [inline (always)] # [must_use] pub fn polarity15_0_dio0 (& mut self) -> POLARITY15_0_DIO0_W < POLARITY15_0_SPEC , 0 > { POLARITY15_0_DIO0_W :: new (self) } # [doc = "Bits 2:3 - Enables and configures edge detection polarity for DIO1."] # [inline (always)] # [must_use] pub fn polarity15_0_dio1 (& mut self) -> POLARITY15_0_DIO1_W < POLARITY15_0_SPEC , 2 > { POLARITY15_0_DIO1_W :: new (self) } # [doc = "Bits 4:5 - Enables and configures edge detection polarity for DIO2."] # [inline (always)] # [must_use] pub fn polarity15_0_dio2 (& mut self) -> POLARITY15_0_DIO2_W < POLARITY15_0_SPEC , 4 > { POLARITY15_0_DIO2_W :: new (self) } # [doc = "Bits 6:7 - Enables and configures edge detection polarity for DIO3."] # [inline (always)] # [must_use] pub fn polarity15_0_dio3 (& mut self) -> POLARITY15_0_DIO3_W < POLARITY15_0_SPEC , 6 > { POLARITY15_0_DIO3_W :: new (self) } # [doc = "Bits 8:9 - Enables and configures edge detection polarity for DIO4."] # [inline (always)] # [must_use] pub fn polarity15_0_dio4 (& mut self) -> POLARITY15_0_DIO4_W < POLARITY15_0_SPEC , 8 > { POLARITY15_0_DIO4_W :: new (self) } # [doc = "Bits 10:11 - Enables and configures edge detection polarity for DIO5."] # [inline (always)] # [must_use] pub fn polarity15_0_dio5 (& mut self) -> POLARITY15_0_DIO5_W < POLARITY15_0_SPEC , 10 > { POLARITY15_0_DIO5_W :: new (self) } # [doc = "Bits 12:13 - Enables and configures edge detection polarity for DIO6."] # [inline (always)] # [must_use] pub fn polarity15_0_dio6 (& mut self) -> POLARITY15_0_DIO6_W < POLARITY15_0_SPEC , 12 > { POLARITY15_0_DIO6_W :: new (self) } # [doc = "Bits 14:15 - Enables and configures edge detection polarity for DIO7."] # [inline (always)] # [must_use] pub fn polarity15_0_dio7 (& mut self) -> POLARITY15_0_DIO7_W < POLARITY15_0_SPEC , 14 > { POLARITY15_0_DIO7_W :: new (self) } # [doc = "Bits 16:17 - Enables and configures edge detection polarity for DIO8."] # [inline (always)] # [must_use] pub fn polarity15_0_dio8 (& mut self) -> POLARITY15_0_DIO8_W < POLARITY15_0_SPEC , 16 > { POLARITY15_0_DIO8_W :: new (self) } # [doc = "Bits 18:19 - Enables and configures edge detection polarity for DIO9."] # [inline (always)] # [must_use] pub fn polarity15_0_dio9 (& mut self) -> POLARITY15_0_DIO9_W < POLARITY15_0_SPEC , 18 > { POLARITY15_0_DIO9_W :: new (self) } # [doc = "Bits 20:21 - Enables and configures edge detection polarity for DIO10."] # [inline (always)] # [must_use] pub fn polarity15_0_dio10 (& mut self) -> POLARITY15_0_DIO10_W < POLARITY15_0_SPEC , 20 > { POLARITY15_0_DIO10_W :: new (self) } # [doc = "Bits 22:23 - Enables and configures edge detection polarity for DIO11."] # [inline (always)] # [must_use] pub fn polarity15_0_dio11 (& mut self) -> POLARITY15_0_DIO11_W < POLARITY15_0_SPEC , 22 > { POLARITY15_0_DIO11_W :: new (self) } # [doc = "Bits 24:25 - Enables and configures edge detection polarity for DIO12."] # [inline (always)] # [must_use] pub fn polarity15_0_dio12 (& mut self) -> POLARITY15_0_DIO12_W < POLARITY15_0_SPEC , 24 > { POLARITY15_0_DIO12_W :: new (self) } # [doc = "Bits 26:27 - Enables and configures edge detection polarity for DIO13."] # [inline (always)] # [must_use] pub fn polarity15_0_dio13 (& mut self) -> POLARITY15_0_DIO13_W < POLARITY15_0_SPEC , 26 > { POLARITY15_0_DIO13_W :: new (self) } # [doc = "Bits 28:29 - Enables and configures edge detection polarity for DIO14."] # [inline (always)] # [must_use] pub fn polarity15_0_dio14 (& mut self) -> POLARITY15_0_DIO14_W < POLARITY15_0_SPEC , 28 > { POLARITY15_0_DIO14_W :: new (self) } # [doc = "Bits 30:31 - Enables and configures edge detection polarity for DIO15."] # [inline (always)] # [must_use] pub fn polarity15_0_dio15 (& mut self) -> POLARITY15_0_DIO15_W < POLARITY15_0_SPEC , 30 > { POLARITY15_0_DIO15_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Polarity 15 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`polarity15_0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`polarity15_0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct POLARITY15_0_SPEC ; impl crate :: RegisterSpec for POLARITY15_0_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`polarity15_0::R`](R) reader structure"] impl crate :: Readable for POLARITY15_0_SPEC { } # [doc = "`write(|w| ..)` method takes [`polarity15_0::W`](W) writer structure"] impl crate :: Writable for POLARITY15_0_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets POLARITY15_0 to value 0"] impl crate :: Resettable for POLARITY15_0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }