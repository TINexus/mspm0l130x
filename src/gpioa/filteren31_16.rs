# [doc = "Register `FILTEREN31_16` reader"] pub type R = crate :: R < FILTEREN31_16_SPEC > ; # [doc = "Register `FILTEREN31_16` writer"] pub type W = crate :: W < FILTEREN31_16_SPEC > ; # [doc = "Field `FILTEREN31_16_DIN16` reader - Programmable counter length of digital glitch filter for DIN16"] pub type FILTEREN31_16_DIN16_R = crate :: FieldReader < FILTEREN31_16_DIN16_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN16\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN16_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN16_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN16_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN16_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN16_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN16_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN16_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN16_A { type Ux = u8 ; } impl FILTEREN31_16_DIN16_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN16_A { match self . bits { 0 => FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_DISABLE , 1 => FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_ONE_CYCLE , 2 => FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_THREE_CYCLE , 3 => FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din16_disable (& self) -> bool { * self == FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din16_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din16_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din16_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN16` writer - Programmable counter length of digital glitch filter for DIN16"] pub type FILTEREN31_16_DIN16_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN16_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN16_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din16_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din16_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din16_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din16_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN16_A :: FILTEREN31_16_DIN16_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN17` reader - Programmable counter length of digital glitch filter for DIN17"] pub type FILTEREN31_16_DIN17_R = crate :: FieldReader < FILTEREN31_16_DIN17_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN17\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN17_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN17_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN17_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN17_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN17_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN17_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN17_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN17_A { type Ux = u8 ; } impl FILTEREN31_16_DIN17_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN17_A { match self . bits { 0 => FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_DISABLE , 1 => FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_ONE_CYCLE , 2 => FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_THREE_CYCLE , 3 => FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din17_disable (& self) -> bool { * self == FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din17_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din17_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din17_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN17` writer - Programmable counter length of digital glitch filter for DIN17"] pub type FILTEREN31_16_DIN17_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN17_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN17_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din17_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din17_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din17_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din17_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN17_A :: FILTEREN31_16_DIN17_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN18` reader - Programmable counter length of digital glitch filter for DIN18"] pub type FILTEREN31_16_DIN18_R = crate :: FieldReader < FILTEREN31_16_DIN18_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN18\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN18_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN18_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN18_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN18_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN18_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN18_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN18_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN18_A { type Ux = u8 ; } impl FILTEREN31_16_DIN18_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN18_A { match self . bits { 0 => FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_DISABLE , 1 => FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_ONE_CYCLE , 2 => FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_THREE_CYCLE , 3 => FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din18_disable (& self) -> bool { * self == FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din18_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din18_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din18_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN18` writer - Programmable counter length of digital glitch filter for DIN18"] pub type FILTEREN31_16_DIN18_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN18_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN18_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din18_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din18_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din18_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din18_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN18_A :: FILTEREN31_16_DIN18_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN19` reader - Programmable counter length of digital glitch filter for DIN19"] pub type FILTEREN31_16_DIN19_R = crate :: FieldReader < FILTEREN31_16_DIN19_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN19\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN19_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN19_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN19_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN19_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN19_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN19_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN19_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN19_A { type Ux = u8 ; } impl FILTEREN31_16_DIN19_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN19_A { match self . bits { 0 => FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_DISABLE , 1 => FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_ONE_CYCLE , 2 => FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_THREE_CYCLE , 3 => FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din19_disable (& self) -> bool { * self == FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din19_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din19_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din19_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN19` writer - Programmable counter length of digital glitch filter for DIN19"] pub type FILTEREN31_16_DIN19_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN19_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN19_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din19_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din19_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din19_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din19_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN19_A :: FILTEREN31_16_DIN19_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN20` reader - Programmable counter length of digital glitch filter for DIN20"] pub type FILTEREN31_16_DIN20_R = crate :: FieldReader < FILTEREN31_16_DIN20_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN20\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN20_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN20_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN20_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN20_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN20_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN20_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN20_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN20_A { type Ux = u8 ; } impl FILTEREN31_16_DIN20_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN20_A { match self . bits { 0 => FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_DISABLE , 1 => FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_ONE_CYCLE , 2 => FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_THREE_CYCLE , 3 => FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din20_disable (& self) -> bool { * self == FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din20_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din20_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din20_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN20` writer - Programmable counter length of digital glitch filter for DIN20"] pub type FILTEREN31_16_DIN20_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN20_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN20_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din20_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din20_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din20_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din20_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN20_A :: FILTEREN31_16_DIN20_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN21` reader - Programmable counter length of digital glitch filter for DIN21"] pub type FILTEREN31_16_DIN21_R = crate :: FieldReader < FILTEREN31_16_DIN21_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN21\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN21_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN21_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN21_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN21_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN21_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN21_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN21_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN21_A { type Ux = u8 ; } impl FILTEREN31_16_DIN21_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN21_A { match self . bits { 0 => FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_DISABLE , 1 => FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_ONE_CYCLE , 2 => FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_THREE_CYCLE , 3 => FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din21_disable (& self) -> bool { * self == FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din21_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din21_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din21_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN21` writer - Programmable counter length of digital glitch filter for DIN21"] pub type FILTEREN31_16_DIN21_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN21_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN21_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din21_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din21_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din21_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din21_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN21_A :: FILTEREN31_16_DIN21_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN22` reader - Programmable counter length of digital glitch filter for DIN22"] pub type FILTEREN31_16_DIN22_R = crate :: FieldReader < FILTEREN31_16_DIN22_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN22\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN22_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN22_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN22_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN22_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN22_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN22_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN22_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN22_A { type Ux = u8 ; } impl FILTEREN31_16_DIN22_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN22_A { match self . bits { 0 => FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_DISABLE , 1 => FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_ONE_CYCLE , 2 => FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_THREE_CYCLE , 3 => FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din22_disable (& self) -> bool { * self == FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din22_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din22_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din22_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN22` writer - Programmable counter length of digital glitch filter for DIN22"] pub type FILTEREN31_16_DIN22_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN22_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN22_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din22_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din22_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din22_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din22_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN22_A :: FILTEREN31_16_DIN22_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN23` reader - Programmable counter length of digital glitch filter for DIN23"] pub type FILTEREN31_16_DIN23_R = crate :: FieldReader < FILTEREN31_16_DIN23_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN23\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN23_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN23_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN23_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN23_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN23_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN23_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN23_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN23_A { type Ux = u8 ; } impl FILTEREN31_16_DIN23_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN23_A { match self . bits { 0 => FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_DISABLE , 1 => FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_ONE_CYCLE , 2 => FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_THREE_CYCLE , 3 => FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din23_disable (& self) -> bool { * self == FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din23_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din23_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din23_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN23` writer - Programmable counter length of digital glitch filter for DIN23"] pub type FILTEREN31_16_DIN23_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN23_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN23_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din23_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din23_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din23_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din23_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN23_A :: FILTEREN31_16_DIN23_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN24` reader - Programmable counter length of digital glitch filter for DIN24"] pub type FILTEREN31_16_DIN24_R = crate :: FieldReader < FILTEREN31_16_DIN24_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN24\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN24_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN24_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN24_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN24_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN24_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN24_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN24_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN24_A { type Ux = u8 ; } impl FILTEREN31_16_DIN24_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN24_A { match self . bits { 0 => FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_DISABLE , 1 => FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_ONE_CYCLE , 2 => FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_THREE_CYCLE , 3 => FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din24_disable (& self) -> bool { * self == FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din24_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din24_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din24_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN24` writer - Programmable counter length of digital glitch filter for DIN24"] pub type FILTEREN31_16_DIN24_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN24_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN24_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din24_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din24_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din24_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din24_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN24_A :: FILTEREN31_16_DIN24_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN25` reader - Programmable counter length of digital glitch filter for DIN25"] pub type FILTEREN31_16_DIN25_R = crate :: FieldReader < FILTEREN31_16_DIN25_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN25\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN25_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN25_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN25_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN25_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN25_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN25_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN25_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN25_A { type Ux = u8 ; } impl FILTEREN31_16_DIN25_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN25_A { match self . bits { 0 => FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_DISABLE , 1 => FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_ONE_CYCLE , 2 => FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_THREE_CYCLE , 3 => FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din25_disable (& self) -> bool { * self == FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din25_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din25_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din25_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN25` writer - Programmable counter length of digital glitch filter for DIN25"] pub type FILTEREN31_16_DIN25_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN25_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN25_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din25_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din25_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din25_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din25_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN25_A :: FILTEREN31_16_DIN25_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN26` reader - Programmable counter length of digital glitch filter for DIN26"] pub type FILTEREN31_16_DIN26_R = crate :: FieldReader < FILTEREN31_16_DIN26_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN26\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN26_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN26_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN26_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN26_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN26_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN26_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN26_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN26_A { type Ux = u8 ; } impl FILTEREN31_16_DIN26_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN26_A { match self . bits { 0 => FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_DISABLE , 1 => FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_ONE_CYCLE , 2 => FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_THREE_CYCLE , 3 => FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din26_disable (& self) -> bool { * self == FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din26_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din26_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din26_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN26` writer - Programmable counter length of digital glitch filter for DIN26"] pub type FILTEREN31_16_DIN26_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN26_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN26_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din26_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din26_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din26_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din26_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN26_A :: FILTEREN31_16_DIN26_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN27` reader - Programmable counter length of digital glitch filter for DIN27"] pub type FILTEREN31_16_DIN27_R = crate :: FieldReader < FILTEREN31_16_DIN27_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN27\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN27_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN27_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN27_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN27_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN27_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN27_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN27_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN27_A { type Ux = u8 ; } impl FILTEREN31_16_DIN27_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN27_A { match self . bits { 0 => FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_DISABLE , 1 => FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_ONE_CYCLE , 2 => FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_THREE_CYCLE , 3 => FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din27_disable (& self) -> bool { * self == FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din27_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din27_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din27_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN27` writer - Programmable counter length of digital glitch filter for DIN27"] pub type FILTEREN31_16_DIN27_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN27_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN27_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din27_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din27_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din27_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din27_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN27_A :: FILTEREN31_16_DIN27_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN28` reader - Programmable counter length of digital glitch filter for DIN28"] pub type FILTEREN31_16_DIN28_R = crate :: FieldReader < FILTEREN31_16_DIN28_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN28\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN28_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN28_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN28_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN28_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN28_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN28_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN28_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN28_A { type Ux = u8 ; } impl FILTEREN31_16_DIN28_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN28_A { match self . bits { 0 => FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_DISABLE , 1 => FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_ONE_CYCLE , 2 => FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_THREE_CYCLE , 3 => FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din28_disable (& self) -> bool { * self == FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din28_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din28_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din28_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN28` writer - Programmable counter length of digital glitch filter for DIN28"] pub type FILTEREN31_16_DIN28_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN28_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN28_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din28_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din28_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din28_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din28_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN28_A :: FILTEREN31_16_DIN28_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN29` reader - Programmable counter length of digital glitch filter for DIN29"] pub type FILTEREN31_16_DIN29_R = crate :: FieldReader < FILTEREN31_16_DIN29_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN29\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN29_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN29_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN29_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN29_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN29_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN29_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN29_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN29_A { type Ux = u8 ; } impl FILTEREN31_16_DIN29_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN29_A { match self . bits { 0 => FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_DISABLE , 1 => FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_ONE_CYCLE , 2 => FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_THREE_CYCLE , 3 => FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din29_disable (& self) -> bool { * self == FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din29_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din29_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din29_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN29` writer - Programmable counter length of digital glitch filter for DIN29"] pub type FILTEREN31_16_DIN29_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN29_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN29_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din29_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din29_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din29_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din29_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN29_A :: FILTEREN31_16_DIN29_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN30` reader - Programmable counter length of digital glitch filter for DIN30"] pub type FILTEREN31_16_DIN30_R = crate :: FieldReader < FILTEREN31_16_DIN30_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN30\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN30_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN30_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN30_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN30_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN30_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN30_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN30_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN30_A { type Ux = u8 ; } impl FILTEREN31_16_DIN30_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN30_A { match self . bits { 0 => FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_DISABLE , 1 => FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_ONE_CYCLE , 2 => FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_THREE_CYCLE , 3 => FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din30_disable (& self) -> bool { * self == FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din30_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din30_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din30_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN30` writer - Programmable counter length of digital glitch filter for DIN30"] pub type FILTEREN31_16_DIN30_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN30_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN30_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din30_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din30_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din30_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din30_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN30_A :: FILTEREN31_16_DIN30_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN31_16_DIN31` reader - Programmable counter length of digital glitch filter for DIN31"] pub type FILTEREN31_16_DIN31_R = crate :: FieldReader < FILTEREN31_16_DIN31_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN31\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN31_16_DIN31_A { # [doc = "0: DISABLE"] FILTEREN31_16_DIN31_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN31_16_DIN31_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN31_16_DIN31_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN31_16_DIN31_EIGHT_CYCLE = 3 , } impl From < FILTEREN31_16_DIN31_A > for u8 { # [inline (always)] fn from (variant : FILTEREN31_16_DIN31_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN31_16_DIN31_A { type Ux = u8 ; } impl FILTEREN31_16_DIN31_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN31_16_DIN31_A { match self . bits { 0 => FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_DISABLE , 1 => FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_ONE_CYCLE , 2 => FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_THREE_CYCLE , 3 => FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren31_16_din31_disable (& self) -> bool { * self == FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din31_one_cycle (& self) -> bool { * self == FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din31_three_cycle (& self) -> bool { * self == FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren31_16_din31_eight_cycle (& self) -> bool { * self == FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_EIGHT_CYCLE } } # [doc = "Field `FILTEREN31_16_DIN31` writer - Programmable counter length of digital glitch filter for DIN31"] pub type FILTEREN31_16_DIN31_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN31_16_DIN31_A > ; impl < 'a , REG , const O : u8 > FILTEREN31_16_DIN31_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren31_16_din31_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren31_16_din31_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren31_16_din31_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren31_16_din31_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN31_16_DIN31_A :: FILTEREN31_16_DIN31_EIGHT_CYCLE) } } impl R { # [doc = "Bits 0:1 - Programmable counter length of digital glitch filter for DIN16"] # [inline (always)] pub fn filteren31_16_din16 (& self) -> FILTEREN31_16_DIN16_R { FILTEREN31_16_DIN16_R :: new ((self . bits & 3) as u8) } # [doc = "Bits 2:3 - Programmable counter length of digital glitch filter for DIN17"] # [inline (always)] pub fn filteren31_16_din17 (& self) -> FILTEREN31_16_DIN17_R { FILTEREN31_16_DIN17_R :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 4:5 - Programmable counter length of digital glitch filter for DIN18"] # [inline (always)] pub fn filteren31_16_din18 (& self) -> FILTEREN31_16_DIN18_R { FILTEREN31_16_DIN18_R :: new (((self . bits >> 4) & 3) as u8) } # [doc = "Bits 6:7 - Programmable counter length of digital glitch filter for DIN19"] # [inline (always)] pub fn filteren31_16_din19 (& self) -> FILTEREN31_16_DIN19_R { FILTEREN31_16_DIN19_R :: new (((self . bits >> 6) & 3) as u8) } # [doc = "Bits 8:9 - Programmable counter length of digital glitch filter for DIN20"] # [inline (always)] pub fn filteren31_16_din20 (& self) -> FILTEREN31_16_DIN20_R { FILTEREN31_16_DIN20_R :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bits 10:11 - Programmable counter length of digital glitch filter for DIN21"] # [inline (always)] pub fn filteren31_16_din21 (& self) -> FILTEREN31_16_DIN21_R { FILTEREN31_16_DIN21_R :: new (((self . bits >> 10) & 3) as u8) } # [doc = "Bits 12:13 - Programmable counter length of digital glitch filter for DIN22"] # [inline (always)] pub fn filteren31_16_din22 (& self) -> FILTEREN31_16_DIN22_R { FILTEREN31_16_DIN22_R :: new (((self . bits >> 12) & 3) as u8) } # [doc = "Bits 14:15 - Programmable counter length of digital glitch filter for DIN23"] # [inline (always)] pub fn filteren31_16_din23 (& self) -> FILTEREN31_16_DIN23_R { FILTEREN31_16_DIN23_R :: new (((self . bits >> 14) & 3) as u8) } # [doc = "Bits 16:17 - Programmable counter length of digital glitch filter for DIN24"] # [inline (always)] pub fn filteren31_16_din24 (& self) -> FILTEREN31_16_DIN24_R { FILTEREN31_16_DIN24_R :: new (((self . bits >> 16) & 3) as u8) } # [doc = "Bits 18:19 - Programmable counter length of digital glitch filter for DIN25"] # [inline (always)] pub fn filteren31_16_din25 (& self) -> FILTEREN31_16_DIN25_R { FILTEREN31_16_DIN25_R :: new (((self . bits >> 18) & 3) as u8) } # [doc = "Bits 20:21 - Programmable counter length of digital glitch filter for DIN26"] # [inline (always)] pub fn filteren31_16_din26 (& self) -> FILTEREN31_16_DIN26_R { FILTEREN31_16_DIN26_R :: new (((self . bits >> 20) & 3) as u8) } # [doc = "Bits 22:23 - Programmable counter length of digital glitch filter for DIN27"] # [inline (always)] pub fn filteren31_16_din27 (& self) -> FILTEREN31_16_DIN27_R { FILTEREN31_16_DIN27_R :: new (((self . bits >> 22) & 3) as u8) } # [doc = "Bits 24:25 - Programmable counter length of digital glitch filter for DIN28"] # [inline (always)] pub fn filteren31_16_din28 (& self) -> FILTEREN31_16_DIN28_R { FILTEREN31_16_DIN28_R :: new (((self . bits >> 24) & 3) as u8) } # [doc = "Bits 26:27 - Programmable counter length of digital glitch filter for DIN29"] # [inline (always)] pub fn filteren31_16_din29 (& self) -> FILTEREN31_16_DIN29_R { FILTEREN31_16_DIN29_R :: new (((self . bits >> 26) & 3) as u8) } # [doc = "Bits 28:29 - Programmable counter length of digital glitch filter for DIN30"] # [inline (always)] pub fn filteren31_16_din30 (& self) -> FILTEREN31_16_DIN30_R { FILTEREN31_16_DIN30_R :: new (((self . bits >> 28) & 3) as u8) } # [doc = "Bits 30:31 - Programmable counter length of digital glitch filter for DIN31"] # [inline (always)] pub fn filteren31_16_din31 (& self) -> FILTEREN31_16_DIN31_R { FILTEREN31_16_DIN31_R :: new (((self . bits >> 30) & 3) as u8) } } impl W { # [doc = "Bits 0:1 - Programmable counter length of digital glitch filter for DIN16"] # [inline (always)] # [must_use] pub fn filteren31_16_din16 (& mut self) -> FILTEREN31_16_DIN16_W < FILTEREN31_16_SPEC , 0 > { FILTEREN31_16_DIN16_W :: new (self) } # [doc = "Bits 2:3 - Programmable counter length of digital glitch filter for DIN17"] # [inline (always)] # [must_use] pub fn filteren31_16_din17 (& mut self) -> FILTEREN31_16_DIN17_W < FILTEREN31_16_SPEC , 2 > { FILTEREN31_16_DIN17_W :: new (self) } # [doc = "Bits 4:5 - Programmable counter length of digital glitch filter for DIN18"] # [inline (always)] # [must_use] pub fn filteren31_16_din18 (& mut self) -> FILTEREN31_16_DIN18_W < FILTEREN31_16_SPEC , 4 > { FILTEREN31_16_DIN18_W :: new (self) } # [doc = "Bits 6:7 - Programmable counter length of digital glitch filter for DIN19"] # [inline (always)] # [must_use] pub fn filteren31_16_din19 (& mut self) -> FILTEREN31_16_DIN19_W < FILTEREN31_16_SPEC , 6 > { FILTEREN31_16_DIN19_W :: new (self) } # [doc = "Bits 8:9 - Programmable counter length of digital glitch filter for DIN20"] # [inline (always)] # [must_use] pub fn filteren31_16_din20 (& mut self) -> FILTEREN31_16_DIN20_W < FILTEREN31_16_SPEC , 8 > { FILTEREN31_16_DIN20_W :: new (self) } # [doc = "Bits 10:11 - Programmable counter length of digital glitch filter for DIN21"] # [inline (always)] # [must_use] pub fn filteren31_16_din21 (& mut self) -> FILTEREN31_16_DIN21_W < FILTEREN31_16_SPEC , 10 > { FILTEREN31_16_DIN21_W :: new (self) } # [doc = "Bits 12:13 - Programmable counter length of digital glitch filter for DIN22"] # [inline (always)] # [must_use] pub fn filteren31_16_din22 (& mut self) -> FILTEREN31_16_DIN22_W < FILTEREN31_16_SPEC , 12 > { FILTEREN31_16_DIN22_W :: new (self) } # [doc = "Bits 14:15 - Programmable counter length of digital glitch filter for DIN23"] # [inline (always)] # [must_use] pub fn filteren31_16_din23 (& mut self) -> FILTEREN31_16_DIN23_W < FILTEREN31_16_SPEC , 14 > { FILTEREN31_16_DIN23_W :: new (self) } # [doc = "Bits 16:17 - Programmable counter length of digital glitch filter for DIN24"] # [inline (always)] # [must_use] pub fn filteren31_16_din24 (& mut self) -> FILTEREN31_16_DIN24_W < FILTEREN31_16_SPEC , 16 > { FILTEREN31_16_DIN24_W :: new (self) } # [doc = "Bits 18:19 - Programmable counter length of digital glitch filter for DIN25"] # [inline (always)] # [must_use] pub fn filteren31_16_din25 (& mut self) -> FILTEREN31_16_DIN25_W < FILTEREN31_16_SPEC , 18 > { FILTEREN31_16_DIN25_W :: new (self) } # [doc = "Bits 20:21 - Programmable counter length of digital glitch filter for DIN26"] # [inline (always)] # [must_use] pub fn filteren31_16_din26 (& mut self) -> FILTEREN31_16_DIN26_W < FILTEREN31_16_SPEC , 20 > { FILTEREN31_16_DIN26_W :: new (self) } # [doc = "Bits 22:23 - Programmable counter length of digital glitch filter for DIN27"] # [inline (always)] # [must_use] pub fn filteren31_16_din27 (& mut self) -> FILTEREN31_16_DIN27_W < FILTEREN31_16_SPEC , 22 > { FILTEREN31_16_DIN27_W :: new (self) } # [doc = "Bits 24:25 - Programmable counter length of digital glitch filter for DIN28"] # [inline (always)] # [must_use] pub fn filteren31_16_din28 (& mut self) -> FILTEREN31_16_DIN28_W < FILTEREN31_16_SPEC , 24 > { FILTEREN31_16_DIN28_W :: new (self) } # [doc = "Bits 26:27 - Programmable counter length of digital glitch filter for DIN29"] # [inline (always)] # [must_use] pub fn filteren31_16_din29 (& mut self) -> FILTEREN31_16_DIN29_W < FILTEREN31_16_SPEC , 26 > { FILTEREN31_16_DIN29_W :: new (self) } # [doc = "Bits 28:29 - Programmable counter length of digital glitch filter for DIN30"] # [inline (always)] # [must_use] pub fn filteren31_16_din30 (& mut self) -> FILTEREN31_16_DIN30_W < FILTEREN31_16_SPEC , 28 > { FILTEREN31_16_DIN30_W :: new (self) } # [doc = "Bits 30:31 - Programmable counter length of digital glitch filter for DIN31"] # [inline (always)] # [must_use] pub fn filteren31_16_din31 (& mut self) -> FILTEREN31_16_DIN31_W < FILTEREN31_16_SPEC , 30 > { FILTEREN31_16_DIN31_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Filter Enable 31 to 16\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`filteren31_16::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`filteren31_16::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FILTEREN31_16_SPEC ; impl crate :: RegisterSpec for FILTEREN31_16_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`filteren31_16::R`](R) reader structure"] impl crate :: Readable for FILTEREN31_16_SPEC { } # [doc = "`write(|w| ..)` method takes [`filteren31_16::W`](W) writer structure"] impl crate :: Writable for FILTEREN31_16_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets FILTEREN31_16 to value 0"] impl crate :: Resettable for FILTEREN31_16_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }