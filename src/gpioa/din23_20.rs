# [doc = "Register `DIN23_20` reader"] pub type R = crate :: R < DIN23_20_SPEC > ; # [doc = "Field `DIN23_20_DIO20` reader - This bit reads the data input value of DIO20."] pub type DIN23_20_DIO20_R = crate :: BitReader < DIN23_20_DIO20_A > ; # [doc = "This bit reads the data input value of DIO20.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN23_20_DIO20_A { # [doc = "0: ZERO"] DIN23_20_DIO20_ZERO = 0 , # [doc = "1: ONE"] DIN23_20_DIO20_ONE = 1 , } impl From < DIN23_20_DIO20_A > for bool { # [inline (always)] fn from (variant : DIN23_20_DIO20_A) -> Self { variant as u8 != 0 } } impl DIN23_20_DIO20_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN23_20_DIO20_A { match self . bits { false => DIN23_20_DIO20_A :: DIN23_20_DIO20_ZERO , true => DIN23_20_DIO20_A :: DIN23_20_DIO20_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din23_20_dio20_zero (& self) -> bool { * self == DIN23_20_DIO20_A :: DIN23_20_DIO20_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din23_20_dio20_one (& self) -> bool { * self == DIN23_20_DIO20_A :: DIN23_20_DIO20_ONE } } # [doc = "Field `DIN23_20_DIO21` reader - This bit reads the data input value of DIO21."] pub type DIN23_20_DIO21_R = crate :: BitReader < DIN23_20_DIO21_A > ; # [doc = "This bit reads the data input value of DIO21.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN23_20_DIO21_A { # [doc = "0: ZERO"] DIN23_20_DIO21_ZERO = 0 , # [doc = "1: ONE"] DIN23_20_DIO21_ONE = 1 , } impl From < DIN23_20_DIO21_A > for bool { # [inline (always)] fn from (variant : DIN23_20_DIO21_A) -> Self { variant as u8 != 0 } } impl DIN23_20_DIO21_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN23_20_DIO21_A { match self . bits { false => DIN23_20_DIO21_A :: DIN23_20_DIO21_ZERO , true => DIN23_20_DIO21_A :: DIN23_20_DIO21_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din23_20_dio21_zero (& self) -> bool { * self == DIN23_20_DIO21_A :: DIN23_20_DIO21_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din23_20_dio21_one (& self) -> bool { * self == DIN23_20_DIO21_A :: DIN23_20_DIO21_ONE } } # [doc = "Field `DIN23_20_DIO22` reader - This bit reads the data input value of DIO22."] pub type DIN23_20_DIO22_R = crate :: BitReader < DIN23_20_DIO22_A > ; # [doc = "This bit reads the data input value of DIO22.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN23_20_DIO22_A { # [doc = "0: ZERO"] DIN23_20_DIO22_ZERO = 0 , # [doc = "1: ONE"] DIN23_20_DIO22_ONE = 1 , } impl From < DIN23_20_DIO22_A > for bool { # [inline (always)] fn from (variant : DIN23_20_DIO22_A) -> Self { variant as u8 != 0 } } impl DIN23_20_DIO22_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN23_20_DIO22_A { match self . bits { false => DIN23_20_DIO22_A :: DIN23_20_DIO22_ZERO , true => DIN23_20_DIO22_A :: DIN23_20_DIO22_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din23_20_dio22_zero (& self) -> bool { * self == DIN23_20_DIO22_A :: DIN23_20_DIO22_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din23_20_dio22_one (& self) -> bool { * self == DIN23_20_DIO22_A :: DIN23_20_DIO22_ONE } } # [doc = "Field `DIN23_20_DIO23` reader - This bit reads the data input value of DIO23."] pub type DIN23_20_DIO23_R = crate :: BitReader < DIN23_20_DIO23_A > ; # [doc = "This bit reads the data input value of DIO23.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN23_20_DIO23_A { # [doc = "0: ZERO"] DIN23_20_DIO23_ZERO = 0 , # [doc = "1: ONE"] DIN23_20_DIO23_ONE = 1 , } impl From < DIN23_20_DIO23_A > for bool { # [inline (always)] fn from (variant : DIN23_20_DIO23_A) -> Self { variant as u8 != 0 } } impl DIN23_20_DIO23_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN23_20_DIO23_A { match self . bits { false => DIN23_20_DIO23_A :: DIN23_20_DIO23_ZERO , true => DIN23_20_DIO23_A :: DIN23_20_DIO23_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din23_20_dio23_zero (& self) -> bool { * self == DIN23_20_DIO23_A :: DIN23_20_DIO23_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din23_20_dio23_one (& self) -> bool { * self == DIN23_20_DIO23_A :: DIN23_20_DIO23_ONE } } impl R { # [doc = "Bit 0 - This bit reads the data input value of DIO20."] # [inline (always)] pub fn din23_20_dio20 (& self) -> DIN23_20_DIO20_R { DIN23_20_DIO20_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - This bit reads the data input value of DIO21."] # [inline (always)] pub fn din23_20_dio21 (& self) -> DIN23_20_DIO21_R { DIN23_20_DIO21_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 16 - This bit reads the data input value of DIO22."] # [inline (always)] pub fn din23_20_dio22 (& self) -> DIN23_20_DIO22_R { DIN23_20_DIO22_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - This bit reads the data input value of DIO23."] # [inline (always)] pub fn din23_20_dio23 (& self) -> DIN23_20_DIO23_R { DIN23_20_DIO23_R :: new (((self . bits >> 24) & 1) != 0) } } # [doc = "Data input 23 to 20\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din23_20::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DIN23_20_SPEC ; impl crate :: RegisterSpec for DIN23_20_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`din23_20::R`](R) reader structure"] impl crate :: Readable for DIN23_20_SPEC { } # [doc = "`reset()` method sets DIN23_20 to value 0"] impl crate :: Resettable for DIN23_20_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }