# [doc = "Register `DIN27_24` reader"] pub type R = crate :: R < DIN27_24_SPEC > ; # [doc = "Field `DIN27_24_DIO24` reader - This bit reads the data input value of DIO24."] pub type DIN27_24_DIO24_R = crate :: BitReader < DIN27_24_DIO24_A > ; # [doc = "This bit reads the data input value of DIO24.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN27_24_DIO24_A { # [doc = "0: ZERO"] DIN27_24_DIO24_ZERO = 0 , # [doc = "1: ONE"] DIN27_24_DIO24_ONE = 1 , } impl From < DIN27_24_DIO24_A > for bool { # [inline (always)] fn from (variant : DIN27_24_DIO24_A) -> Self { variant as u8 != 0 } } impl DIN27_24_DIO24_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN27_24_DIO24_A { match self . bits { false => DIN27_24_DIO24_A :: DIN27_24_DIO24_ZERO , true => DIN27_24_DIO24_A :: DIN27_24_DIO24_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din27_24_dio24_zero (& self) -> bool { * self == DIN27_24_DIO24_A :: DIN27_24_DIO24_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din27_24_dio24_one (& self) -> bool { * self == DIN27_24_DIO24_A :: DIN27_24_DIO24_ONE } } # [doc = "Field `DIN27_24_DIO25` reader - This bit reads the data input value of DIO25."] pub type DIN27_24_DIO25_R = crate :: BitReader < DIN27_24_DIO25_A > ; # [doc = "This bit reads the data input value of DIO25.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN27_24_DIO25_A { # [doc = "0: ZERO"] DIN27_24_DIO25_ZERO = 0 , # [doc = "1: ONE"] DIN27_24_DIO25_ONE = 1 , } impl From < DIN27_24_DIO25_A > for bool { # [inline (always)] fn from (variant : DIN27_24_DIO25_A) -> Self { variant as u8 != 0 } } impl DIN27_24_DIO25_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN27_24_DIO25_A { match self . bits { false => DIN27_24_DIO25_A :: DIN27_24_DIO25_ZERO , true => DIN27_24_DIO25_A :: DIN27_24_DIO25_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din27_24_dio25_zero (& self) -> bool { * self == DIN27_24_DIO25_A :: DIN27_24_DIO25_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din27_24_dio25_one (& self) -> bool { * self == DIN27_24_DIO25_A :: DIN27_24_DIO25_ONE } } # [doc = "Field `DIN27_24_DIO26` reader - This bit reads the data input value of DIO26."] pub type DIN27_24_DIO26_R = crate :: BitReader < DIN27_24_DIO26_A > ; # [doc = "This bit reads the data input value of DIO26.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN27_24_DIO26_A { # [doc = "0: ZERO"] DIN27_24_DIO26_ZERO = 0 , # [doc = "1: ONE"] DIN27_24_DIO26_ONE = 1 , } impl From < DIN27_24_DIO26_A > for bool { # [inline (always)] fn from (variant : DIN27_24_DIO26_A) -> Self { variant as u8 != 0 } } impl DIN27_24_DIO26_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN27_24_DIO26_A { match self . bits { false => DIN27_24_DIO26_A :: DIN27_24_DIO26_ZERO , true => DIN27_24_DIO26_A :: DIN27_24_DIO26_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din27_24_dio26_zero (& self) -> bool { * self == DIN27_24_DIO26_A :: DIN27_24_DIO26_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din27_24_dio26_one (& self) -> bool { * self == DIN27_24_DIO26_A :: DIN27_24_DIO26_ONE } } # [doc = "Field `DIN27_24_DIO27` reader - This bit reads the data input value of DIO27."] pub type DIN27_24_DIO27_R = crate :: BitReader < DIN27_24_DIO27_A > ; # [doc = "This bit reads the data input value of DIO27.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN27_24_DIO27_A { # [doc = "0: ZERO"] DIN27_24_DIO27_ZERO = 0 , # [doc = "1: ONE"] DIN27_24_DIO27_ONE = 1 , } impl From < DIN27_24_DIO27_A > for bool { # [inline (always)] fn from (variant : DIN27_24_DIO27_A) -> Self { variant as u8 != 0 } } impl DIN27_24_DIO27_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN27_24_DIO27_A { match self . bits { false => DIN27_24_DIO27_A :: DIN27_24_DIO27_ZERO , true => DIN27_24_DIO27_A :: DIN27_24_DIO27_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din27_24_dio27_zero (& self) -> bool { * self == DIN27_24_DIO27_A :: DIN27_24_DIO27_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din27_24_dio27_one (& self) -> bool { * self == DIN27_24_DIO27_A :: DIN27_24_DIO27_ONE } } impl R { # [doc = "Bit 0 - This bit reads the data input value of DIO24."] # [inline (always)] pub fn din27_24_dio24 (& self) -> DIN27_24_DIO24_R { DIN27_24_DIO24_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - This bit reads the data input value of DIO25."] # [inline (always)] pub fn din27_24_dio25 (& self) -> DIN27_24_DIO25_R { DIN27_24_DIO25_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 16 - This bit reads the data input value of DIO26."] # [inline (always)] pub fn din27_24_dio26 (& self) -> DIN27_24_DIO26_R { DIN27_24_DIO26_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - This bit reads the data input value of DIO27."] # [inline (always)] pub fn din27_24_dio27 (& self) -> DIN27_24_DIO27_R { DIN27_24_DIO27_R :: new (((self . bits >> 24) & 1) != 0) } } # [doc = "Data input 27 to 24\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din27_24::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DIN27_24_SPEC ; impl crate :: RegisterSpec for DIN27_24_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`din27_24::R`](R) reader structure"] impl crate :: Readable for DIN27_24_SPEC { } # [doc = "`reset()` method sets DIN27_24 to value 0"] impl crate :: Resettable for DIN27_24_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }