# [doc = "Register `INT_EVENT0_RIS` reader"] pub type R = crate :: R < INT_EVENT0_RIS_SPEC > ; # [doc = "Field `INT_EVENT0_RIS_DIO0` reader - DIO0 event"] pub type INT_EVENT0_RIS_DIO0_R = crate :: BitReader < INT_EVENT0_RIS_DIO0_A > ; # [doc = "DIO0 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO0_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO0_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO0_SET = 1 , } impl From < INT_EVENT0_RIS_DIO0_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO0_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO0_A { match self . bits { false => INT_EVENT0_RIS_DIO0_A :: INT_EVENT0_RIS_DIO0_CLR , true => INT_EVENT0_RIS_DIO0_A :: INT_EVENT0_RIS_DIO0_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio0_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO0_A :: INT_EVENT0_RIS_DIO0_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio0_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO0_A :: INT_EVENT0_RIS_DIO0_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO1` reader - DIO1 event"] pub type INT_EVENT0_RIS_DIO1_R = crate :: BitReader < INT_EVENT0_RIS_DIO1_A > ; # [doc = "DIO1 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO1_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO1_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO1_SET = 1 , } impl From < INT_EVENT0_RIS_DIO1_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO1_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO1_A { match self . bits { false => INT_EVENT0_RIS_DIO1_A :: INT_EVENT0_RIS_DIO1_CLR , true => INT_EVENT0_RIS_DIO1_A :: INT_EVENT0_RIS_DIO1_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio1_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO1_A :: INT_EVENT0_RIS_DIO1_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio1_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO1_A :: INT_EVENT0_RIS_DIO1_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO2` reader - DIO2 event"] pub type INT_EVENT0_RIS_DIO2_R = crate :: BitReader < INT_EVENT0_RIS_DIO2_A > ; # [doc = "DIO2 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO2_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO2_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO2_SET = 1 , } impl From < INT_EVENT0_RIS_DIO2_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO2_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO2_A { match self . bits { false => INT_EVENT0_RIS_DIO2_A :: INT_EVENT0_RIS_DIO2_CLR , true => INT_EVENT0_RIS_DIO2_A :: INT_EVENT0_RIS_DIO2_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio2_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO2_A :: INT_EVENT0_RIS_DIO2_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio2_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO2_A :: INT_EVENT0_RIS_DIO2_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO3` reader - DIO3 event"] pub type INT_EVENT0_RIS_DIO3_R = crate :: BitReader < INT_EVENT0_RIS_DIO3_A > ; # [doc = "DIO3 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO3_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO3_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO3_SET = 1 , } impl From < INT_EVENT0_RIS_DIO3_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO3_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO3_A { match self . bits { false => INT_EVENT0_RIS_DIO3_A :: INT_EVENT0_RIS_DIO3_CLR , true => INT_EVENT0_RIS_DIO3_A :: INT_EVENT0_RIS_DIO3_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio3_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO3_A :: INT_EVENT0_RIS_DIO3_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio3_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO3_A :: INT_EVENT0_RIS_DIO3_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO4` reader - DIO4 event"] pub type INT_EVENT0_RIS_DIO4_R = crate :: BitReader < INT_EVENT0_RIS_DIO4_A > ; # [doc = "DIO4 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO4_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO4_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO4_SET = 1 , } impl From < INT_EVENT0_RIS_DIO4_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO4_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO4_A { match self . bits { false => INT_EVENT0_RIS_DIO4_A :: INT_EVENT0_RIS_DIO4_CLR , true => INT_EVENT0_RIS_DIO4_A :: INT_EVENT0_RIS_DIO4_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio4_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO4_A :: INT_EVENT0_RIS_DIO4_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio4_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO4_A :: INT_EVENT0_RIS_DIO4_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO5` reader - DIO5 event"] pub type INT_EVENT0_RIS_DIO5_R = crate :: BitReader < INT_EVENT0_RIS_DIO5_A > ; # [doc = "DIO5 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO5_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO5_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO5_SET = 1 , } impl From < INT_EVENT0_RIS_DIO5_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO5_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO5_A { match self . bits { false => INT_EVENT0_RIS_DIO5_A :: INT_EVENT0_RIS_DIO5_CLR , true => INT_EVENT0_RIS_DIO5_A :: INT_EVENT0_RIS_DIO5_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio5_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO5_A :: INT_EVENT0_RIS_DIO5_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio5_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO5_A :: INT_EVENT0_RIS_DIO5_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO6` reader - DIO6 event"] pub type INT_EVENT0_RIS_DIO6_R = crate :: BitReader < INT_EVENT0_RIS_DIO6_A > ; # [doc = "DIO6 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO6_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO6_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO6_SET = 1 , } impl From < INT_EVENT0_RIS_DIO6_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO6_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO6_A { match self . bits { false => INT_EVENT0_RIS_DIO6_A :: INT_EVENT0_RIS_DIO6_CLR , true => INT_EVENT0_RIS_DIO6_A :: INT_EVENT0_RIS_DIO6_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio6_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO6_A :: INT_EVENT0_RIS_DIO6_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio6_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO6_A :: INT_EVENT0_RIS_DIO6_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO7` reader - DIO7 event"] pub type INT_EVENT0_RIS_DIO7_R = crate :: BitReader < INT_EVENT0_RIS_DIO7_A > ; # [doc = "DIO7 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO7_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO7_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO7_SET = 1 , } impl From < INT_EVENT0_RIS_DIO7_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO7_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO7_A { match self . bits { false => INT_EVENT0_RIS_DIO7_A :: INT_EVENT0_RIS_DIO7_CLR , true => INT_EVENT0_RIS_DIO7_A :: INT_EVENT0_RIS_DIO7_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio7_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO7_A :: INT_EVENT0_RIS_DIO7_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio7_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO7_A :: INT_EVENT0_RIS_DIO7_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO8` reader - DIO8 event"] pub type INT_EVENT0_RIS_DIO8_R = crate :: BitReader < INT_EVENT0_RIS_DIO8_A > ; # [doc = "DIO8 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO8_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO8_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO8_SET = 1 , } impl From < INT_EVENT0_RIS_DIO8_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO8_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO8_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO8_A { match self . bits { false => INT_EVENT0_RIS_DIO8_A :: INT_EVENT0_RIS_DIO8_CLR , true => INT_EVENT0_RIS_DIO8_A :: INT_EVENT0_RIS_DIO8_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio8_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO8_A :: INT_EVENT0_RIS_DIO8_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio8_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO8_A :: INT_EVENT0_RIS_DIO8_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO9` reader - DIO9 event"] pub type INT_EVENT0_RIS_DIO9_R = crate :: BitReader < INT_EVENT0_RIS_DIO9_A > ; # [doc = "DIO9 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO9_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO9_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO9_SET = 1 , } impl From < INT_EVENT0_RIS_DIO9_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO9_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO9_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO9_A { match self . bits { false => INT_EVENT0_RIS_DIO9_A :: INT_EVENT0_RIS_DIO9_CLR , true => INT_EVENT0_RIS_DIO9_A :: INT_EVENT0_RIS_DIO9_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio9_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO9_A :: INT_EVENT0_RIS_DIO9_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio9_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO9_A :: INT_EVENT0_RIS_DIO9_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO10` reader - DIO10 event"] pub type INT_EVENT0_RIS_DIO10_R = crate :: BitReader < INT_EVENT0_RIS_DIO10_A > ; # [doc = "DIO10 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO10_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO10_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO10_SET = 1 , } impl From < INT_EVENT0_RIS_DIO10_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO10_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO10_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO10_A { match self . bits { false => INT_EVENT0_RIS_DIO10_A :: INT_EVENT0_RIS_DIO10_CLR , true => INT_EVENT0_RIS_DIO10_A :: INT_EVENT0_RIS_DIO10_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio10_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO10_A :: INT_EVENT0_RIS_DIO10_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio10_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO10_A :: INT_EVENT0_RIS_DIO10_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO11` reader - DIO11 event"] pub type INT_EVENT0_RIS_DIO11_R = crate :: BitReader < INT_EVENT0_RIS_DIO11_A > ; # [doc = "DIO11 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO11_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO11_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO11_SET = 1 , } impl From < INT_EVENT0_RIS_DIO11_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO11_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO11_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO11_A { match self . bits { false => INT_EVENT0_RIS_DIO11_A :: INT_EVENT0_RIS_DIO11_CLR , true => INT_EVENT0_RIS_DIO11_A :: INT_EVENT0_RIS_DIO11_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio11_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO11_A :: INT_EVENT0_RIS_DIO11_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio11_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO11_A :: INT_EVENT0_RIS_DIO11_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO12` reader - DIO12 event"] pub type INT_EVENT0_RIS_DIO12_R = crate :: BitReader < INT_EVENT0_RIS_DIO12_A > ; # [doc = "DIO12 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO12_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO12_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO12_SET = 1 , } impl From < INT_EVENT0_RIS_DIO12_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO12_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO12_A { match self . bits { false => INT_EVENT0_RIS_DIO12_A :: INT_EVENT0_RIS_DIO12_CLR , true => INT_EVENT0_RIS_DIO12_A :: INT_EVENT0_RIS_DIO12_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio12_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO12_A :: INT_EVENT0_RIS_DIO12_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio12_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO12_A :: INT_EVENT0_RIS_DIO12_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO13` reader - DIO13 event"] pub type INT_EVENT0_RIS_DIO13_R = crate :: BitReader < INT_EVENT0_RIS_DIO13_A > ; # [doc = "DIO13 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO13_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO13_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO13_SET = 1 , } impl From < INT_EVENT0_RIS_DIO13_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO13_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO13_A { match self . bits { false => INT_EVENT0_RIS_DIO13_A :: INT_EVENT0_RIS_DIO13_CLR , true => INT_EVENT0_RIS_DIO13_A :: INT_EVENT0_RIS_DIO13_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio13_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO13_A :: INT_EVENT0_RIS_DIO13_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio13_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO13_A :: INT_EVENT0_RIS_DIO13_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO14` reader - DIO14 event"] pub type INT_EVENT0_RIS_DIO14_R = crate :: BitReader < INT_EVENT0_RIS_DIO14_A > ; # [doc = "DIO14 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO14_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO14_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO14_SET = 1 , } impl From < INT_EVENT0_RIS_DIO14_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO14_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO14_A { match self . bits { false => INT_EVENT0_RIS_DIO14_A :: INT_EVENT0_RIS_DIO14_CLR , true => INT_EVENT0_RIS_DIO14_A :: INT_EVENT0_RIS_DIO14_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio14_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO14_A :: INT_EVENT0_RIS_DIO14_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio14_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO14_A :: INT_EVENT0_RIS_DIO14_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO15` reader - DIO15 event"] pub type INT_EVENT0_RIS_DIO15_R = crate :: BitReader < INT_EVENT0_RIS_DIO15_A > ; # [doc = "DIO15 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO15_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO15_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO15_SET = 1 , } impl From < INT_EVENT0_RIS_DIO15_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO15_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO15_A { match self . bits { false => INT_EVENT0_RIS_DIO15_A :: INT_EVENT0_RIS_DIO15_CLR , true => INT_EVENT0_RIS_DIO15_A :: INT_EVENT0_RIS_DIO15_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio15_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO15_A :: INT_EVENT0_RIS_DIO15_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio15_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO15_A :: INT_EVENT0_RIS_DIO15_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO16` reader - DIO16 event"] pub type INT_EVENT0_RIS_DIO16_R = crate :: BitReader < INT_EVENT0_RIS_DIO16_A > ; # [doc = "DIO16 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO16_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO16_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO16_SET = 1 , } impl From < INT_EVENT0_RIS_DIO16_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO16_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO16_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO16_A { match self . bits { false => INT_EVENT0_RIS_DIO16_A :: INT_EVENT0_RIS_DIO16_CLR , true => INT_EVENT0_RIS_DIO16_A :: INT_EVENT0_RIS_DIO16_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio16_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO16_A :: INT_EVENT0_RIS_DIO16_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio16_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO16_A :: INT_EVENT0_RIS_DIO16_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO17` reader - DIO17 event"] pub type INT_EVENT0_RIS_DIO17_R = crate :: BitReader < INT_EVENT0_RIS_DIO17_A > ; # [doc = "DIO17 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO17_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO17_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO17_SET = 1 , } impl From < INT_EVENT0_RIS_DIO17_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO17_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO17_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO17_A { match self . bits { false => INT_EVENT0_RIS_DIO17_A :: INT_EVENT0_RIS_DIO17_CLR , true => INT_EVENT0_RIS_DIO17_A :: INT_EVENT0_RIS_DIO17_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio17_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO17_A :: INT_EVENT0_RIS_DIO17_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio17_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO17_A :: INT_EVENT0_RIS_DIO17_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO18` reader - DIO18 event"] pub type INT_EVENT0_RIS_DIO18_R = crate :: BitReader < INT_EVENT0_RIS_DIO18_A > ; # [doc = "DIO18 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO18_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO18_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO18_SET = 1 , } impl From < INT_EVENT0_RIS_DIO18_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO18_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO18_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO18_A { match self . bits { false => INT_EVENT0_RIS_DIO18_A :: INT_EVENT0_RIS_DIO18_CLR , true => INT_EVENT0_RIS_DIO18_A :: INT_EVENT0_RIS_DIO18_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio18_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO18_A :: INT_EVENT0_RIS_DIO18_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio18_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO18_A :: INT_EVENT0_RIS_DIO18_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO19` reader - DIO19 event"] pub type INT_EVENT0_RIS_DIO19_R = crate :: BitReader < INT_EVENT0_RIS_DIO19_A > ; # [doc = "DIO19 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO19_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO19_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO19_SET = 1 , } impl From < INT_EVENT0_RIS_DIO19_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO19_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO19_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO19_A { match self . bits { false => INT_EVENT0_RIS_DIO19_A :: INT_EVENT0_RIS_DIO19_CLR , true => INT_EVENT0_RIS_DIO19_A :: INT_EVENT0_RIS_DIO19_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio19_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO19_A :: INT_EVENT0_RIS_DIO19_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio19_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO19_A :: INT_EVENT0_RIS_DIO19_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO20` reader - DIO20 event"] pub type INT_EVENT0_RIS_DIO20_R = crate :: BitReader < INT_EVENT0_RIS_DIO20_A > ; # [doc = "DIO20 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO20_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO20_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO20_SET = 1 , } impl From < INT_EVENT0_RIS_DIO20_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO20_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO20_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO20_A { match self . bits { false => INT_EVENT0_RIS_DIO20_A :: INT_EVENT0_RIS_DIO20_CLR , true => INT_EVENT0_RIS_DIO20_A :: INT_EVENT0_RIS_DIO20_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio20_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO20_A :: INT_EVENT0_RIS_DIO20_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio20_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO20_A :: INT_EVENT0_RIS_DIO20_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO21` reader - DIO21 event"] pub type INT_EVENT0_RIS_DIO21_R = crate :: BitReader < INT_EVENT0_RIS_DIO21_A > ; # [doc = "DIO21 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO21_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO21_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO21_SET = 1 , } impl From < INT_EVENT0_RIS_DIO21_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO21_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO21_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO21_A { match self . bits { false => INT_EVENT0_RIS_DIO21_A :: INT_EVENT0_RIS_DIO21_CLR , true => INT_EVENT0_RIS_DIO21_A :: INT_EVENT0_RIS_DIO21_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio21_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO21_A :: INT_EVENT0_RIS_DIO21_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio21_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO21_A :: INT_EVENT0_RIS_DIO21_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO22` reader - DIO22 event"] pub type INT_EVENT0_RIS_DIO22_R = crate :: BitReader < INT_EVENT0_RIS_DIO22_A > ; # [doc = "DIO22 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO22_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO22_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO22_SET = 1 , } impl From < INT_EVENT0_RIS_DIO22_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO22_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO22_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO22_A { match self . bits { false => INT_EVENT0_RIS_DIO22_A :: INT_EVENT0_RIS_DIO22_CLR , true => INT_EVENT0_RIS_DIO22_A :: INT_EVENT0_RIS_DIO22_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio22_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO22_A :: INT_EVENT0_RIS_DIO22_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio22_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO22_A :: INT_EVENT0_RIS_DIO22_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO23` reader - DIO23 event"] pub type INT_EVENT0_RIS_DIO23_R = crate :: BitReader < INT_EVENT0_RIS_DIO23_A > ; # [doc = "DIO23 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO23_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO23_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO23_SET = 1 , } impl From < INT_EVENT0_RIS_DIO23_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO23_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO23_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO23_A { match self . bits { false => INT_EVENT0_RIS_DIO23_A :: INT_EVENT0_RIS_DIO23_CLR , true => INT_EVENT0_RIS_DIO23_A :: INT_EVENT0_RIS_DIO23_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio23_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO23_A :: INT_EVENT0_RIS_DIO23_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio23_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO23_A :: INT_EVENT0_RIS_DIO23_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO24` reader - DIO24 event"] pub type INT_EVENT0_RIS_DIO24_R = crate :: BitReader < INT_EVENT0_RIS_DIO24_A > ; # [doc = "DIO24 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO24_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO24_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO24_SET = 1 , } impl From < INT_EVENT0_RIS_DIO24_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO24_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO24_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO24_A { match self . bits { false => INT_EVENT0_RIS_DIO24_A :: INT_EVENT0_RIS_DIO24_CLR , true => INT_EVENT0_RIS_DIO24_A :: INT_EVENT0_RIS_DIO24_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio24_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO24_A :: INT_EVENT0_RIS_DIO24_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio24_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO24_A :: INT_EVENT0_RIS_DIO24_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO25` reader - DIO25 event"] pub type INT_EVENT0_RIS_DIO25_R = crate :: BitReader < INT_EVENT0_RIS_DIO25_A > ; # [doc = "DIO25 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO25_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO25_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO25_SET = 1 , } impl From < INT_EVENT0_RIS_DIO25_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO25_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO25_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO25_A { match self . bits { false => INT_EVENT0_RIS_DIO25_A :: INT_EVENT0_RIS_DIO25_CLR , true => INT_EVENT0_RIS_DIO25_A :: INT_EVENT0_RIS_DIO25_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio25_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO25_A :: INT_EVENT0_RIS_DIO25_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio25_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO25_A :: INT_EVENT0_RIS_DIO25_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO26` reader - DIO26 event"] pub type INT_EVENT0_RIS_DIO26_R = crate :: BitReader < INT_EVENT0_RIS_DIO26_A > ; # [doc = "DIO26 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO26_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO26_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO26_SET = 1 , } impl From < INT_EVENT0_RIS_DIO26_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO26_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO26_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO26_A { match self . bits { false => INT_EVENT0_RIS_DIO26_A :: INT_EVENT0_RIS_DIO26_CLR , true => INT_EVENT0_RIS_DIO26_A :: INT_EVENT0_RIS_DIO26_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio26_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO26_A :: INT_EVENT0_RIS_DIO26_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio26_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO26_A :: INT_EVENT0_RIS_DIO26_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO27` reader - DIO27 event"] pub type INT_EVENT0_RIS_DIO27_R = crate :: BitReader < INT_EVENT0_RIS_DIO27_A > ; # [doc = "DIO27 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO27_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO27_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO27_SET = 1 , } impl From < INT_EVENT0_RIS_DIO27_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO27_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO27_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO27_A { match self . bits { false => INT_EVENT0_RIS_DIO27_A :: INT_EVENT0_RIS_DIO27_CLR , true => INT_EVENT0_RIS_DIO27_A :: INT_EVENT0_RIS_DIO27_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio27_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO27_A :: INT_EVENT0_RIS_DIO27_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio27_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO27_A :: INT_EVENT0_RIS_DIO27_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO28` reader - DIO28 event"] pub type INT_EVENT0_RIS_DIO28_R = crate :: BitReader < INT_EVENT0_RIS_DIO28_A > ; # [doc = "DIO28 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO28_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO28_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO28_SET = 1 , } impl From < INT_EVENT0_RIS_DIO28_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO28_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO28_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO28_A { match self . bits { false => INT_EVENT0_RIS_DIO28_A :: INT_EVENT0_RIS_DIO28_CLR , true => INT_EVENT0_RIS_DIO28_A :: INT_EVENT0_RIS_DIO28_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio28_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO28_A :: INT_EVENT0_RIS_DIO28_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio28_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO28_A :: INT_EVENT0_RIS_DIO28_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO29` reader - DIO29 event"] pub type INT_EVENT0_RIS_DIO29_R = crate :: BitReader < INT_EVENT0_RIS_DIO29_A > ; # [doc = "DIO29 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO29_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO29_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO29_SET = 1 , } impl From < INT_EVENT0_RIS_DIO29_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO29_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO29_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO29_A { match self . bits { false => INT_EVENT0_RIS_DIO29_A :: INT_EVENT0_RIS_DIO29_CLR , true => INT_EVENT0_RIS_DIO29_A :: INT_EVENT0_RIS_DIO29_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio29_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO29_A :: INT_EVENT0_RIS_DIO29_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio29_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO29_A :: INT_EVENT0_RIS_DIO29_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO30` reader - DIO30 event"] pub type INT_EVENT0_RIS_DIO30_R = crate :: BitReader < INT_EVENT0_RIS_DIO30_A > ; # [doc = "DIO30 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO30_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO30_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO30_SET = 1 , } impl From < INT_EVENT0_RIS_DIO30_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO30_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO30_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO30_A { match self . bits { false => INT_EVENT0_RIS_DIO30_A :: INT_EVENT0_RIS_DIO30_CLR , true => INT_EVENT0_RIS_DIO30_A :: INT_EVENT0_RIS_DIO30_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio30_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO30_A :: INT_EVENT0_RIS_DIO30_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio30_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO30_A :: INT_EVENT0_RIS_DIO30_SET } } # [doc = "Field `INT_EVENT0_RIS_DIO31` reader - DIO31 event"] pub type INT_EVENT0_RIS_DIO31_R = crate :: BitReader < INT_EVENT0_RIS_DIO31_A > ; # [doc = "DIO31 event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DIO31_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DIO31_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DIO31_SET = 1 , } impl From < INT_EVENT0_RIS_DIO31_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DIO31_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DIO31_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DIO31_A { match self . bits { false => INT_EVENT0_RIS_DIO31_A :: INT_EVENT0_RIS_DIO31_CLR , true => INT_EVENT0_RIS_DIO31_A :: INT_EVENT0_RIS_DIO31_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dio31_clr (& self) -> bool { * self == INT_EVENT0_RIS_DIO31_A :: INT_EVENT0_RIS_DIO31_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dio31_set (& self) -> bool { * self == INT_EVENT0_RIS_DIO31_A :: INT_EVENT0_RIS_DIO31_SET } } impl R { # [doc = "Bit 0 - DIO0 event"] # [inline (always)] pub fn int_event0_ris_dio0 (& self) -> INT_EVENT0_RIS_DIO0_R { INT_EVENT0_RIS_DIO0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - DIO1 event"] # [inline (always)] pub fn int_event0_ris_dio1 (& self) -> INT_EVENT0_RIS_DIO1_R { INT_EVENT0_RIS_DIO1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - DIO2 event"] # [inline (always)] pub fn int_event0_ris_dio2 (& self) -> INT_EVENT0_RIS_DIO2_R { INT_EVENT0_RIS_DIO2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - DIO3 event"] # [inline (always)] pub fn int_event0_ris_dio3 (& self) -> INT_EVENT0_RIS_DIO3_R { INT_EVENT0_RIS_DIO3_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - DIO4 event"] # [inline (always)] pub fn int_event0_ris_dio4 (& self) -> INT_EVENT0_RIS_DIO4_R { INT_EVENT0_RIS_DIO4_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - DIO5 event"] # [inline (always)] pub fn int_event0_ris_dio5 (& self) -> INT_EVENT0_RIS_DIO5_R { INT_EVENT0_RIS_DIO5_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - DIO6 event"] # [inline (always)] pub fn int_event0_ris_dio6 (& self) -> INT_EVENT0_RIS_DIO6_R { INT_EVENT0_RIS_DIO6_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - DIO7 event"] # [inline (always)] pub fn int_event0_ris_dio7 (& self) -> INT_EVENT0_RIS_DIO7_R { INT_EVENT0_RIS_DIO7_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - DIO8 event"] # [inline (always)] pub fn int_event0_ris_dio8 (& self) -> INT_EVENT0_RIS_DIO8_R { INT_EVENT0_RIS_DIO8_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - DIO9 event"] # [inline (always)] pub fn int_event0_ris_dio9 (& self) -> INT_EVENT0_RIS_DIO9_R { INT_EVENT0_RIS_DIO9_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - DIO10 event"] # [inline (always)] pub fn int_event0_ris_dio10 (& self) -> INT_EVENT0_RIS_DIO10_R { INT_EVENT0_RIS_DIO10_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - DIO11 event"] # [inline (always)] pub fn int_event0_ris_dio11 (& self) -> INT_EVENT0_RIS_DIO11_R { INT_EVENT0_RIS_DIO11_R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - DIO12 event"] # [inline (always)] pub fn int_event0_ris_dio12 (& self) -> INT_EVENT0_RIS_DIO12_R { INT_EVENT0_RIS_DIO12_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - DIO13 event"] # [inline (always)] pub fn int_event0_ris_dio13 (& self) -> INT_EVENT0_RIS_DIO13_R { INT_EVENT0_RIS_DIO13_R :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - DIO14 event"] # [inline (always)] pub fn int_event0_ris_dio14 (& self) -> INT_EVENT0_RIS_DIO14_R { INT_EVENT0_RIS_DIO14_R :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - DIO15 event"] # [inline (always)] pub fn int_event0_ris_dio15 (& self) -> INT_EVENT0_RIS_DIO15_R { INT_EVENT0_RIS_DIO15_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - DIO16 event"] # [inline (always)] pub fn int_event0_ris_dio16 (& self) -> INT_EVENT0_RIS_DIO16_R { INT_EVENT0_RIS_DIO16_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - DIO17 event"] # [inline (always)] pub fn int_event0_ris_dio17 (& self) -> INT_EVENT0_RIS_DIO17_R { INT_EVENT0_RIS_DIO17_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - DIO18 event"] # [inline (always)] pub fn int_event0_ris_dio18 (& self) -> INT_EVENT0_RIS_DIO18_R { INT_EVENT0_RIS_DIO18_R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - DIO19 event"] # [inline (always)] pub fn int_event0_ris_dio19 (& self) -> INT_EVENT0_RIS_DIO19_R { INT_EVENT0_RIS_DIO19_R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - DIO20 event"] # [inline (always)] pub fn int_event0_ris_dio20 (& self) -> INT_EVENT0_RIS_DIO20_R { INT_EVENT0_RIS_DIO20_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - DIO21 event"] # [inline (always)] pub fn int_event0_ris_dio21 (& self) -> INT_EVENT0_RIS_DIO21_R { INT_EVENT0_RIS_DIO21_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - DIO22 event"] # [inline (always)] pub fn int_event0_ris_dio22 (& self) -> INT_EVENT0_RIS_DIO22_R { INT_EVENT0_RIS_DIO22_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - DIO23 event"] # [inline (always)] pub fn int_event0_ris_dio23 (& self) -> INT_EVENT0_RIS_DIO23_R { INT_EVENT0_RIS_DIO23_R :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - DIO24 event"] # [inline (always)] pub fn int_event0_ris_dio24 (& self) -> INT_EVENT0_RIS_DIO24_R { INT_EVENT0_RIS_DIO24_R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - DIO25 event"] # [inline (always)] pub fn int_event0_ris_dio25 (& self) -> INT_EVENT0_RIS_DIO25_R { INT_EVENT0_RIS_DIO25_R :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - DIO26 event"] # [inline (always)] pub fn int_event0_ris_dio26 (& self) -> INT_EVENT0_RIS_DIO26_R { INT_EVENT0_RIS_DIO26_R :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - DIO27 event"] # [inline (always)] pub fn int_event0_ris_dio27 (& self) -> INT_EVENT0_RIS_DIO27_R { INT_EVENT0_RIS_DIO27_R :: new (((self . bits >> 27) & 1) != 0) } # [doc = "Bit 28 - DIO28 event"] # [inline (always)] pub fn int_event0_ris_dio28 (& self) -> INT_EVENT0_RIS_DIO28_R { INT_EVENT0_RIS_DIO28_R :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - DIO29 event"] # [inline (always)] pub fn int_event0_ris_dio29 (& self) -> INT_EVENT0_RIS_DIO29_R { INT_EVENT0_RIS_DIO29_R :: new (((self . bits >> 29) & 1) != 0) } # [doc = "Bit 30 - DIO30 event"] # [inline (always)] pub fn int_event0_ris_dio30 (& self) -> INT_EVENT0_RIS_DIO30_R { INT_EVENT0_RIS_DIO30_R :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - DIO31 event"] # [inline (always)] pub fn int_event0_ris_dio31 (& self) -> INT_EVENT0_RIS_DIO31_R { INT_EVENT0_RIS_DIO31_R :: new (((self . bits >> 31) & 1) != 0) } } # [doc = "Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_RIS_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_ris::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_RIS_SPEC { } # [doc = "`reset()` method sets INT_EVENT0_RIS to value 0"] impl crate :: Resettable for INT_EVENT0_RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }