# [doc = "Register `DIN31_28` reader"] pub type R = crate :: R < DIN31_28_SPEC > ; # [doc = "Field `DIN31_28_DIO28` reader - This bit reads the data input value of DIO28."] pub type DIN31_28_DIO28_R = crate :: BitReader < DIN31_28_DIO28_A > ; # [doc = "This bit reads the data input value of DIO28.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN31_28_DIO28_A { # [doc = "0: ZERO"] DIN31_28_DIO28_ZERO = 0 , # [doc = "1: ONE"] DIN31_28_DIO28_ONE = 1 , } impl From < DIN31_28_DIO28_A > for bool { # [inline (always)] fn from (variant : DIN31_28_DIO28_A) -> Self { variant as u8 != 0 } } impl DIN31_28_DIO28_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN31_28_DIO28_A { match self . bits { false => DIN31_28_DIO28_A :: DIN31_28_DIO28_ZERO , true => DIN31_28_DIO28_A :: DIN31_28_DIO28_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din31_28_dio28_zero (& self) -> bool { * self == DIN31_28_DIO28_A :: DIN31_28_DIO28_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din31_28_dio28_one (& self) -> bool { * self == DIN31_28_DIO28_A :: DIN31_28_DIO28_ONE } } # [doc = "Field `DIN31_28_DIO29` reader - This bit reads the data input value of DIO29."] pub type DIN31_28_DIO29_R = crate :: BitReader < DIN31_28_DIO29_A > ; # [doc = "This bit reads the data input value of DIO29.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN31_28_DIO29_A { # [doc = "0: ZERO"] DIN31_28_DIO29_ZERO = 0 , # [doc = "1: ONE"] DIN31_28_DIO29_ONE = 1 , } impl From < DIN31_28_DIO29_A > for bool { # [inline (always)] fn from (variant : DIN31_28_DIO29_A) -> Self { variant as u8 != 0 } } impl DIN31_28_DIO29_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN31_28_DIO29_A { match self . bits { false => DIN31_28_DIO29_A :: DIN31_28_DIO29_ZERO , true => DIN31_28_DIO29_A :: DIN31_28_DIO29_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din31_28_dio29_zero (& self) -> bool { * self == DIN31_28_DIO29_A :: DIN31_28_DIO29_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din31_28_dio29_one (& self) -> bool { * self == DIN31_28_DIO29_A :: DIN31_28_DIO29_ONE } } # [doc = "Field `DIN31_28_DIO30` reader - This bit reads the data input value of DIO30."] pub type DIN31_28_DIO30_R = crate :: BitReader < DIN31_28_DIO30_A > ; # [doc = "This bit reads the data input value of DIO30.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN31_28_DIO30_A { # [doc = "0: ZERO"] DIN31_28_DIO30_ZERO = 0 , # [doc = "1: ONE"] DIN31_28_DIO30_ONE = 1 , } impl From < DIN31_28_DIO30_A > for bool { # [inline (always)] fn from (variant : DIN31_28_DIO30_A) -> Self { variant as u8 != 0 } } impl DIN31_28_DIO30_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN31_28_DIO30_A { match self . bits { false => DIN31_28_DIO30_A :: DIN31_28_DIO30_ZERO , true => DIN31_28_DIO30_A :: DIN31_28_DIO30_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din31_28_dio30_zero (& self) -> bool { * self == DIN31_28_DIO30_A :: DIN31_28_DIO30_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din31_28_dio30_one (& self) -> bool { * self == DIN31_28_DIO30_A :: DIN31_28_DIO30_ONE } } # [doc = "Field `DIN31_28_DIO31` reader - This bit reads the data input value of DIO31."] pub type DIN31_28_DIO31_R = crate :: BitReader < DIN31_28_DIO31_A > ; # [doc = "This bit reads the data input value of DIO31.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN31_28_DIO31_A { # [doc = "0: ZERO"] DIN31_28_DIO31_ZERO = 0 , # [doc = "1: ONE"] DIN31_28_DIO31_ONE = 1 , } impl From < DIN31_28_DIO31_A > for bool { # [inline (always)] fn from (variant : DIN31_28_DIO31_A) -> Self { variant as u8 != 0 } } impl DIN31_28_DIO31_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN31_28_DIO31_A { match self . bits { false => DIN31_28_DIO31_A :: DIN31_28_DIO31_ZERO , true => DIN31_28_DIO31_A :: DIN31_28_DIO31_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din31_28_dio31_zero (& self) -> bool { * self == DIN31_28_DIO31_A :: DIN31_28_DIO31_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din31_28_dio31_one (& self) -> bool { * self == DIN31_28_DIO31_A :: DIN31_28_DIO31_ONE } } impl R { # [doc = "Bit 0 - This bit reads the data input value of DIO28."] # [inline (always)] pub fn din31_28_dio28 (& self) -> DIN31_28_DIO28_R { DIN31_28_DIO28_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - This bit reads the data input value of DIO29."] # [inline (always)] pub fn din31_28_dio29 (& self) -> DIN31_28_DIO29_R { DIN31_28_DIO29_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 16 - This bit reads the data input value of DIO30."] # [inline (always)] pub fn din31_28_dio30 (& self) -> DIN31_28_DIO30_R { DIN31_28_DIO30_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - This bit reads the data input value of DIO31."] # [inline (always)] pub fn din31_28_dio31 (& self) -> DIN31_28_DIO31_R { DIN31_28_DIO31_R :: new (((self . bits >> 24) & 1) != 0) } } # [doc = "Data input 31 to 28\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din31_28::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DIN31_28_SPEC ; impl crate :: RegisterSpec for DIN31_28_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`din31_28::R`](R) reader structure"] impl crate :: Readable for DIN31_28_SPEC { } # [doc = "`reset()` method sets DIN31_28 to value 0"] impl crate :: Resettable for DIN31_28_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }