# [doc = "Register `SUB1CFG` reader"] pub type R = crate :: R < SUB1CFG_SPEC > ; # [doc = "Register `SUB1CFG` writer"] pub type W = crate :: W < SUB1CFG_SPEC > ; # [doc = "Field `SUB1CFG_ENABLE` reader - This bit is used to enable subscriber 1 event."] pub type SUB1CFG_ENABLE_R = crate :: BitReader < SUB1CFG_ENABLE_A > ; # [doc = "This bit is used to enable subscriber 1 event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SUB1CFG_ENABLE_A { # [doc = "0: CLR"] SUB1CFG_ENABLE_CLR = 0 , # [doc = "1: SET"] SUB1CFG_ENABLE_SET = 1 , } impl From < SUB1CFG_ENABLE_A > for bool { # [inline (always)] fn from (variant : SUB1CFG_ENABLE_A) -> Self { variant as u8 != 0 } } impl SUB1CFG_ENABLE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SUB1CFG_ENABLE_A { match self . bits { false => SUB1CFG_ENABLE_A :: SUB1CFG_ENABLE_CLR , true => SUB1CFG_ENABLE_A :: SUB1CFG_ENABLE_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_sub1cfg_enable_clr (& self) -> bool { * self == SUB1CFG_ENABLE_A :: SUB1CFG_ENABLE_CLR } # [doc = "SET"] # [inline (always)] pub fn is_sub1cfg_enable_set (& self) -> bool { * self == SUB1CFG_ENABLE_A :: SUB1CFG_ENABLE_SET } } # [doc = "Field `SUB1CFG_ENABLE` writer - This bit is used to enable subscriber 1 event."] pub type SUB1CFG_ENABLE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SUB1CFG_ENABLE_A > ; impl < 'a , REG , const O : u8 > SUB1CFG_ENABLE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn sub1cfg_enable_clr (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_ENABLE_A :: SUB1CFG_ENABLE_CLR) } # [doc = "SET"] # [inline (always)] pub fn sub1cfg_enable_set (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_ENABLE_A :: SUB1CFG_ENABLE_SET) } } # [doc = "Field `SUB1CFG_OUTPOLICY` reader - These bits configure the output policy for subscriber 1 event."] pub type SUB1CFG_OUTPOLICY_R = crate :: FieldReader < SUB1CFG_OUTPOLICY_A > ; # [doc = "These bits configure the output policy for subscriber 1 event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SUB1CFG_OUTPOLICY_A { # [doc = "0: SET"] SUB1CFG_OUTPOLICY_SET = 0 , # [doc = "1: CLR"] SUB1CFG_OUTPOLICY_CLR = 1 , # [doc = "2: TOGGLE"] SUB1CFG_OUTPOLICY_TOGGLE = 2 , } impl From < SUB1CFG_OUTPOLICY_A > for u8 { # [inline (always)] fn from (variant : SUB1CFG_OUTPOLICY_A) -> Self { variant as _ } } impl crate :: FieldSpec for SUB1CFG_OUTPOLICY_A { type Ux = u8 ; } impl SUB1CFG_OUTPOLICY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < SUB1CFG_OUTPOLICY_A > { match self . bits { 0 => Some (SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_SET) , 1 => Some (SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_CLR) , 2 => Some (SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_TOGGLE) , _ => None , } } # [doc = "SET"] # [inline (always)] pub fn is_sub1cfg_outpolicy_set (& self) -> bool { * self == SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_SET } # [doc = "CLR"] # [inline (always)] pub fn is_sub1cfg_outpolicy_clr (& self) -> bool { * self == SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_CLR } # [doc = "TOGGLE"] # [inline (always)] pub fn is_sub1cfg_outpolicy_toggle (& self) -> bool { * self == SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_TOGGLE } } # [doc = "Field `SUB1CFG_OUTPOLICY` writer - These bits configure the output policy for subscriber 1 event."] pub type SUB1CFG_OUTPOLICY_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O , SUB1CFG_OUTPOLICY_A > ; impl < 'a , REG , const O : u8 > SUB1CFG_OUTPOLICY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "SET"] # [inline (always)] pub fn sub1cfg_outpolicy_set (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_SET) } # [doc = "CLR"] # [inline (always)] pub fn sub1cfg_outpolicy_clr (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_CLR) } # [doc = "TOGGLE"] # [inline (always)] pub fn sub1cfg_outpolicy_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_OUTPOLICY_A :: SUB1CFG_OUTPOLICY_TOGGLE) } } # [doc = "Field `SUB1CFG_INDEX` reader - indicates the specific bit in the upper 16 bits that is targeted by the subscriber action"] pub type SUB1CFG_INDEX_R = crate :: FieldReader < SUB1CFG_INDEX_A > ; # [doc = "indicates the specific bit in the upper 16 bits that is targeted by the subscriber action\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SUB1CFG_INDEX_A { # [doc = "0: MIN"] SUB1CFG_INDEX_MIN = 0 , # [doc = "15: MAX"] SUB1CFG_INDEX_MAX = 15 , } impl From < SUB1CFG_INDEX_A > for u8 { # [inline (always)] fn from (variant : SUB1CFG_INDEX_A) -> Self { variant as _ } } impl crate :: FieldSpec for SUB1CFG_INDEX_A { type Ux = u8 ; } impl SUB1CFG_INDEX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < SUB1CFG_INDEX_A > { match self . bits { 0 => Some (SUB1CFG_INDEX_A :: SUB1CFG_INDEX_MIN) , 15 => Some (SUB1CFG_INDEX_A :: SUB1CFG_INDEX_MAX) , _ => None , } } # [doc = "MIN"] # [inline (always)] pub fn is_sub1cfg_index_min (& self) -> bool { * self == SUB1CFG_INDEX_A :: SUB1CFG_INDEX_MIN } # [doc = "MAX"] # [inline (always)] pub fn is_sub1cfg_index_max (& self) -> bool { * self == SUB1CFG_INDEX_A :: SUB1CFG_INDEX_MAX } } # [doc = "Field `SUB1CFG_INDEX` writer - indicates the specific bit in the upper 16 bits that is targeted by the subscriber action"] pub type SUB1CFG_INDEX_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 4 , O , SUB1CFG_INDEX_A > ; impl < 'a , REG , const O : u8 > SUB1CFG_INDEX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "MIN"] # [inline (always)] pub fn sub1cfg_index_min (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_INDEX_A :: SUB1CFG_INDEX_MIN) } # [doc = "MAX"] # [inline (always)] pub fn sub1cfg_index_max (self) -> & 'a mut crate :: W < REG > { self . variant (SUB1CFG_INDEX_A :: SUB1CFG_INDEX_MAX) } } impl R { # [doc = "Bit 0 - This bit is used to enable subscriber 1 event."] # [inline (always)] pub fn sub1cfg_enable (& self) -> SUB1CFG_ENABLE_R { SUB1CFG_ENABLE_R :: new ((self . bits & 1) != 0) } # [doc = "Bits 8:9 - These bits configure the output policy for subscriber 1 event."] # [inline (always)] pub fn sub1cfg_outpolicy (& self) -> SUB1CFG_OUTPOLICY_R { SUB1CFG_OUTPOLICY_R :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bits 16:19 - indicates the specific bit in the upper 16 bits that is targeted by the subscriber action"] # [inline (always)] pub fn sub1cfg_index (& self) -> SUB1CFG_INDEX_R { SUB1CFG_INDEX_R :: new (((self . bits >> 16) & 0x0f) as u8) } } impl W { # [doc = "Bit 0 - This bit is used to enable subscriber 1 event."] # [inline (always)] # [must_use] pub fn sub1cfg_enable (& mut self) -> SUB1CFG_ENABLE_W < SUB1CFG_SPEC , 0 > { SUB1CFG_ENABLE_W :: new (self) } # [doc = "Bits 8:9 - These bits configure the output policy for subscriber 1 event."] # [inline (always)] # [must_use] pub fn sub1cfg_outpolicy (& mut self) -> SUB1CFG_OUTPOLICY_W < SUB1CFG_SPEC , 8 > { SUB1CFG_OUTPOLICY_W :: new (self) } # [doc = "Bits 16:19 - indicates the specific bit in the upper 16 bits that is targeted by the subscriber action"] # [inline (always)] # [must_use] pub fn sub1cfg_index (& mut self) -> SUB1CFG_INDEX_W < SUB1CFG_SPEC , 16 > { SUB1CFG_INDEX_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Subscriber 1 configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sub1cfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sub1cfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SUB1CFG_SPEC ; impl crate :: RegisterSpec for SUB1CFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`sub1cfg::R`](R) reader structure"] impl crate :: Readable for SUB1CFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`sub1cfg::W`](W) writer structure"] impl crate :: Writable for SUB1CFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SUB1CFG to value 0"] impl crate :: Resettable for SUB1CFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }