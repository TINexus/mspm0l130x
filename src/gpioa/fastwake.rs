# [doc = "Register `FASTWAKE` reader"] pub type R = crate :: R < FASTWAKE_SPEC > ; # [doc = "Register `FASTWAKE` writer"] pub type W = crate :: W < FASTWAKE_SPEC > ; # [doc = "Field `FASTWAKE_DIN0` reader - Enable fastwake feature for DIN0"] pub type FASTWAKE_DIN0_R = crate :: BitReader < FASTWAKE_DIN0_A > ; # [doc = "Enable fastwake feature for DIN0\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN0_A { # [doc = "0: DISABLE"] FASTWAKE_DIN0_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN0_ENABLE = 1 , } impl From < FASTWAKE_DIN0_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN0_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN0_A { match self . bits { false => FASTWAKE_DIN0_A :: FASTWAKE_DIN0_DISABLE , true => FASTWAKE_DIN0_A :: FASTWAKE_DIN0_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din0_disable (& self) -> bool { * self == FASTWAKE_DIN0_A :: FASTWAKE_DIN0_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din0_enable (& self) -> bool { * self == FASTWAKE_DIN0_A :: FASTWAKE_DIN0_ENABLE } } # [doc = "Field `FASTWAKE_DIN0` writer - Enable fastwake feature for DIN0"] pub type FASTWAKE_DIN0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN0_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din0_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN0_A :: FASTWAKE_DIN0_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din0_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN0_A :: FASTWAKE_DIN0_ENABLE) } } # [doc = "Field `FASTWAKE_DIN1` reader - Enable fastwake feature for DIN1"] pub type FASTWAKE_DIN1_R = crate :: BitReader < FASTWAKE_DIN1_A > ; # [doc = "Enable fastwake feature for DIN1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN1_A { # [doc = "0: DISABLE"] FASTWAKE_DIN1_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN1_ENABLE = 1 , } impl From < FASTWAKE_DIN1_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN1_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN1_A { match self . bits { false => FASTWAKE_DIN1_A :: FASTWAKE_DIN1_DISABLE , true => FASTWAKE_DIN1_A :: FASTWAKE_DIN1_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din1_disable (& self) -> bool { * self == FASTWAKE_DIN1_A :: FASTWAKE_DIN1_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din1_enable (& self) -> bool { * self == FASTWAKE_DIN1_A :: FASTWAKE_DIN1_ENABLE } } # [doc = "Field `FASTWAKE_DIN1` writer - Enable fastwake feature for DIN1"] pub type FASTWAKE_DIN1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN1_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din1_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN1_A :: FASTWAKE_DIN1_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din1_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN1_A :: FASTWAKE_DIN1_ENABLE) } } # [doc = "Field `FASTWAKE_DIN2` reader - Enable fastwake feature for DIN2"] pub type FASTWAKE_DIN2_R = crate :: BitReader < FASTWAKE_DIN2_A > ; # [doc = "Enable fastwake feature for DIN2\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN2_A { # [doc = "0: DISABLE"] FASTWAKE_DIN2_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN2_ENABLE = 1 , } impl From < FASTWAKE_DIN2_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN2_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN2_A { match self . bits { false => FASTWAKE_DIN2_A :: FASTWAKE_DIN2_DISABLE , true => FASTWAKE_DIN2_A :: FASTWAKE_DIN2_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din2_disable (& self) -> bool { * self == FASTWAKE_DIN2_A :: FASTWAKE_DIN2_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din2_enable (& self) -> bool { * self == FASTWAKE_DIN2_A :: FASTWAKE_DIN2_ENABLE } } # [doc = "Field `FASTWAKE_DIN2` writer - Enable fastwake feature for DIN2"] pub type FASTWAKE_DIN2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN2_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din2_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN2_A :: FASTWAKE_DIN2_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din2_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN2_A :: FASTWAKE_DIN2_ENABLE) } } # [doc = "Field `FASTWAKE_DIN3` reader - Enable fastwake feature for DIN3"] pub type FASTWAKE_DIN3_R = crate :: BitReader < FASTWAKE_DIN3_A > ; # [doc = "Enable fastwake feature for DIN3\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN3_A { # [doc = "0: DISABLE"] FASTWAKE_DIN3_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN3_ENABLE = 1 , } impl From < FASTWAKE_DIN3_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN3_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN3_A { match self . bits { false => FASTWAKE_DIN3_A :: FASTWAKE_DIN3_DISABLE , true => FASTWAKE_DIN3_A :: FASTWAKE_DIN3_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din3_disable (& self) -> bool { * self == FASTWAKE_DIN3_A :: FASTWAKE_DIN3_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din3_enable (& self) -> bool { * self == FASTWAKE_DIN3_A :: FASTWAKE_DIN3_ENABLE } } # [doc = "Field `FASTWAKE_DIN3` writer - Enable fastwake feature for DIN3"] pub type FASTWAKE_DIN3_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN3_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din3_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN3_A :: FASTWAKE_DIN3_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din3_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN3_A :: FASTWAKE_DIN3_ENABLE) } } # [doc = "Field `FASTWAKE_DIN4` reader - Enable fastwake feature for DIN4"] pub type FASTWAKE_DIN4_R = crate :: BitReader < FASTWAKE_DIN4_A > ; # [doc = "Enable fastwake feature for DIN4\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN4_A { # [doc = "0: DISABLE"] FASTWAKE_DIN4_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN4_ENABLE = 1 , } impl From < FASTWAKE_DIN4_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN4_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN4_A { match self . bits { false => FASTWAKE_DIN4_A :: FASTWAKE_DIN4_DISABLE , true => FASTWAKE_DIN4_A :: FASTWAKE_DIN4_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din4_disable (& self) -> bool { * self == FASTWAKE_DIN4_A :: FASTWAKE_DIN4_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din4_enable (& self) -> bool { * self == FASTWAKE_DIN4_A :: FASTWAKE_DIN4_ENABLE } } # [doc = "Field `FASTWAKE_DIN4` writer - Enable fastwake feature for DIN4"] pub type FASTWAKE_DIN4_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN4_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din4_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN4_A :: FASTWAKE_DIN4_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din4_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN4_A :: FASTWAKE_DIN4_ENABLE) } } # [doc = "Field `FASTWAKE_DIN5` reader - Enable fastwake feature for DIN5"] pub type FASTWAKE_DIN5_R = crate :: BitReader < FASTWAKE_DIN5_A > ; # [doc = "Enable fastwake feature for DIN5\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN5_A { # [doc = "0: DISABLE"] FASTWAKE_DIN5_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN5_ENABLE = 1 , } impl From < FASTWAKE_DIN5_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN5_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN5_A { match self . bits { false => FASTWAKE_DIN5_A :: FASTWAKE_DIN5_DISABLE , true => FASTWAKE_DIN5_A :: FASTWAKE_DIN5_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din5_disable (& self) -> bool { * self == FASTWAKE_DIN5_A :: FASTWAKE_DIN5_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din5_enable (& self) -> bool { * self == FASTWAKE_DIN5_A :: FASTWAKE_DIN5_ENABLE } } # [doc = "Field `FASTWAKE_DIN5` writer - Enable fastwake feature for DIN5"] pub type FASTWAKE_DIN5_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN5_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din5_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN5_A :: FASTWAKE_DIN5_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din5_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN5_A :: FASTWAKE_DIN5_ENABLE) } } # [doc = "Field `FASTWAKE_DIN6` reader - Enable fastwake feature for DIN6"] pub type FASTWAKE_DIN6_R = crate :: BitReader < FASTWAKE_DIN6_A > ; # [doc = "Enable fastwake feature for DIN6\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN6_A { # [doc = "0: DISABLE"] FASTWAKE_DIN6_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN6_ENABLE = 1 , } impl From < FASTWAKE_DIN6_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN6_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN6_A { match self . bits { false => FASTWAKE_DIN6_A :: FASTWAKE_DIN6_DISABLE , true => FASTWAKE_DIN6_A :: FASTWAKE_DIN6_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din6_disable (& self) -> bool { * self == FASTWAKE_DIN6_A :: FASTWAKE_DIN6_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din6_enable (& self) -> bool { * self == FASTWAKE_DIN6_A :: FASTWAKE_DIN6_ENABLE } } # [doc = "Field `FASTWAKE_DIN6` writer - Enable fastwake feature for DIN6"] pub type FASTWAKE_DIN6_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN6_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din6_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN6_A :: FASTWAKE_DIN6_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din6_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN6_A :: FASTWAKE_DIN6_ENABLE) } } # [doc = "Field `FASTWAKE_DIN7` reader - Enable fastwake feature for DIN7"] pub type FASTWAKE_DIN7_R = crate :: BitReader < FASTWAKE_DIN7_A > ; # [doc = "Enable fastwake feature for DIN7\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN7_A { # [doc = "0: DISABLE"] FASTWAKE_DIN7_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN7_ENABLE = 1 , } impl From < FASTWAKE_DIN7_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN7_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN7_A { match self . bits { false => FASTWAKE_DIN7_A :: FASTWAKE_DIN7_DISABLE , true => FASTWAKE_DIN7_A :: FASTWAKE_DIN7_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din7_disable (& self) -> bool { * self == FASTWAKE_DIN7_A :: FASTWAKE_DIN7_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din7_enable (& self) -> bool { * self == FASTWAKE_DIN7_A :: FASTWAKE_DIN7_ENABLE } } # [doc = "Field `FASTWAKE_DIN7` writer - Enable fastwake feature for DIN7"] pub type FASTWAKE_DIN7_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN7_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din7_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN7_A :: FASTWAKE_DIN7_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din7_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN7_A :: FASTWAKE_DIN7_ENABLE) } } # [doc = "Field `FASTWAKE_DIN8` reader - Enable fastwake feature for DIN8"] pub type FASTWAKE_DIN8_R = crate :: BitReader < FASTWAKE_DIN8_A > ; # [doc = "Enable fastwake feature for DIN8\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN8_A { # [doc = "0: DISABLE"] FASTWAKE_DIN8_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN8_ENABLE = 1 , } impl From < FASTWAKE_DIN8_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN8_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN8_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN8_A { match self . bits { false => FASTWAKE_DIN8_A :: FASTWAKE_DIN8_DISABLE , true => FASTWAKE_DIN8_A :: FASTWAKE_DIN8_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din8_disable (& self) -> bool { * self == FASTWAKE_DIN8_A :: FASTWAKE_DIN8_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din8_enable (& self) -> bool { * self == FASTWAKE_DIN8_A :: FASTWAKE_DIN8_ENABLE } } # [doc = "Field `FASTWAKE_DIN8` writer - Enable fastwake feature for DIN8"] pub type FASTWAKE_DIN8_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN8_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din8_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN8_A :: FASTWAKE_DIN8_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din8_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN8_A :: FASTWAKE_DIN8_ENABLE) } } # [doc = "Field `FASTWAKE_DIN9` reader - Enable fastwake feature for DIN9"] pub type FASTWAKE_DIN9_R = crate :: BitReader < FASTWAKE_DIN9_A > ; # [doc = "Enable fastwake feature for DIN9\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN9_A { # [doc = "0: DISABLE"] FASTWAKE_DIN9_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN9_ENABLE = 1 , } impl From < FASTWAKE_DIN9_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN9_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN9_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN9_A { match self . bits { false => FASTWAKE_DIN9_A :: FASTWAKE_DIN9_DISABLE , true => FASTWAKE_DIN9_A :: FASTWAKE_DIN9_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din9_disable (& self) -> bool { * self == FASTWAKE_DIN9_A :: FASTWAKE_DIN9_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din9_enable (& self) -> bool { * self == FASTWAKE_DIN9_A :: FASTWAKE_DIN9_ENABLE } } # [doc = "Field `FASTWAKE_DIN9` writer - Enable fastwake feature for DIN9"] pub type FASTWAKE_DIN9_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN9_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din9_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN9_A :: FASTWAKE_DIN9_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din9_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN9_A :: FASTWAKE_DIN9_ENABLE) } } # [doc = "Field `FASTWAKE_DIN10` reader - Enable fastwake feature for DIN10"] pub type FASTWAKE_DIN10_R = crate :: BitReader < FASTWAKE_DIN10_A > ; # [doc = "Enable fastwake feature for DIN10\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN10_A { # [doc = "0: DISABLE"] FASTWAKE_DIN10_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN10_ENABLE = 1 , } impl From < FASTWAKE_DIN10_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN10_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN10_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN10_A { match self . bits { false => FASTWAKE_DIN10_A :: FASTWAKE_DIN10_DISABLE , true => FASTWAKE_DIN10_A :: FASTWAKE_DIN10_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din10_disable (& self) -> bool { * self == FASTWAKE_DIN10_A :: FASTWAKE_DIN10_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din10_enable (& self) -> bool { * self == FASTWAKE_DIN10_A :: FASTWAKE_DIN10_ENABLE } } # [doc = "Field `FASTWAKE_DIN10` writer - Enable fastwake feature for DIN10"] pub type FASTWAKE_DIN10_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN10_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din10_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN10_A :: FASTWAKE_DIN10_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din10_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN10_A :: FASTWAKE_DIN10_ENABLE) } } # [doc = "Field `FASTWAKE_DIN11` reader - Enable fastwake feature for DIN11"] pub type FASTWAKE_DIN11_R = crate :: BitReader < FASTWAKE_DIN11_A > ; # [doc = "Enable fastwake feature for DIN11\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN11_A { # [doc = "0: DISABLE"] FASTWAKE_DIN11_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN11_ENABLE = 1 , } impl From < FASTWAKE_DIN11_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN11_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN11_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN11_A { match self . bits { false => FASTWAKE_DIN11_A :: FASTWAKE_DIN11_DISABLE , true => FASTWAKE_DIN11_A :: FASTWAKE_DIN11_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din11_disable (& self) -> bool { * self == FASTWAKE_DIN11_A :: FASTWAKE_DIN11_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din11_enable (& self) -> bool { * self == FASTWAKE_DIN11_A :: FASTWAKE_DIN11_ENABLE } } # [doc = "Field `FASTWAKE_DIN11` writer - Enable fastwake feature for DIN11"] pub type FASTWAKE_DIN11_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN11_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din11_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN11_A :: FASTWAKE_DIN11_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din11_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN11_A :: FASTWAKE_DIN11_ENABLE) } } # [doc = "Field `FASTWAKE_DIN12` reader - Enable fastwake feature for DIN12"] pub type FASTWAKE_DIN12_R = crate :: BitReader < FASTWAKE_DIN12_A > ; # [doc = "Enable fastwake feature for DIN12\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN12_A { # [doc = "0: DISABLE"] FASTWAKE_DIN12_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN12_ENABLE = 1 , } impl From < FASTWAKE_DIN12_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN12_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN12_A { match self . bits { false => FASTWAKE_DIN12_A :: FASTWAKE_DIN12_DISABLE , true => FASTWAKE_DIN12_A :: FASTWAKE_DIN12_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din12_disable (& self) -> bool { * self == FASTWAKE_DIN12_A :: FASTWAKE_DIN12_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din12_enable (& self) -> bool { * self == FASTWAKE_DIN12_A :: FASTWAKE_DIN12_ENABLE } } # [doc = "Field `FASTWAKE_DIN12` writer - Enable fastwake feature for DIN12"] pub type FASTWAKE_DIN12_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN12_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din12_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN12_A :: FASTWAKE_DIN12_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din12_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN12_A :: FASTWAKE_DIN12_ENABLE) } } # [doc = "Field `FASTWAKE_DIN13` reader - Enable fastwake feature for DIN13"] pub type FASTWAKE_DIN13_R = crate :: BitReader < FASTWAKE_DIN13_A > ; # [doc = "Enable fastwake feature for DIN13\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN13_A { # [doc = "0: DISABLE"] FASTWAKE_DIN13_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN13_ENABLE = 1 , } impl From < FASTWAKE_DIN13_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN13_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN13_A { match self . bits { false => FASTWAKE_DIN13_A :: FASTWAKE_DIN13_DISABLE , true => FASTWAKE_DIN13_A :: FASTWAKE_DIN13_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din13_disable (& self) -> bool { * self == FASTWAKE_DIN13_A :: FASTWAKE_DIN13_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din13_enable (& self) -> bool { * self == FASTWAKE_DIN13_A :: FASTWAKE_DIN13_ENABLE } } # [doc = "Field `FASTWAKE_DIN13` writer - Enable fastwake feature for DIN13"] pub type FASTWAKE_DIN13_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN13_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din13_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN13_A :: FASTWAKE_DIN13_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din13_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN13_A :: FASTWAKE_DIN13_ENABLE) } } # [doc = "Field `FASTWAKE_DIN14` reader - Enable fastwake feature for DIN14"] pub type FASTWAKE_DIN14_R = crate :: BitReader < FASTWAKE_DIN14_A > ; # [doc = "Enable fastwake feature for DIN14\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN14_A { # [doc = "0: DISABLE"] FASTWAKE_DIN14_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN14_ENABLE = 1 , } impl From < FASTWAKE_DIN14_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN14_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN14_A { match self . bits { false => FASTWAKE_DIN14_A :: FASTWAKE_DIN14_DISABLE , true => FASTWAKE_DIN14_A :: FASTWAKE_DIN14_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din14_disable (& self) -> bool { * self == FASTWAKE_DIN14_A :: FASTWAKE_DIN14_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din14_enable (& self) -> bool { * self == FASTWAKE_DIN14_A :: FASTWAKE_DIN14_ENABLE } } # [doc = "Field `FASTWAKE_DIN14` writer - Enable fastwake feature for DIN14"] pub type FASTWAKE_DIN14_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN14_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din14_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN14_A :: FASTWAKE_DIN14_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din14_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN14_A :: FASTWAKE_DIN14_ENABLE) } } # [doc = "Field `FASTWAKE_DIN15` reader - Enable fastwake feature for DIN15"] pub type FASTWAKE_DIN15_R = crate :: BitReader < FASTWAKE_DIN15_A > ; # [doc = "Enable fastwake feature for DIN15\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN15_A { # [doc = "0: DISABLE"] FASTWAKE_DIN15_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN15_ENABLE = 1 , } impl From < FASTWAKE_DIN15_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN15_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN15_A { match self . bits { false => FASTWAKE_DIN15_A :: FASTWAKE_DIN15_DISABLE , true => FASTWAKE_DIN15_A :: FASTWAKE_DIN15_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din15_disable (& self) -> bool { * self == FASTWAKE_DIN15_A :: FASTWAKE_DIN15_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din15_enable (& self) -> bool { * self == FASTWAKE_DIN15_A :: FASTWAKE_DIN15_ENABLE } } # [doc = "Field `FASTWAKE_DIN15` writer - Enable fastwake feature for DIN15"] pub type FASTWAKE_DIN15_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN15_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din15_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN15_A :: FASTWAKE_DIN15_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din15_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN15_A :: FASTWAKE_DIN15_ENABLE) } } # [doc = "Field `FASTWAKE_DIN16` reader - Enable fastwake feature for DIN16"] pub type FASTWAKE_DIN16_R = crate :: BitReader < FASTWAKE_DIN16_A > ; # [doc = "Enable fastwake feature for DIN16\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN16_A { # [doc = "0: DISABLE"] FASTWAKE_DIN16_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN16_ENABLE = 1 , } impl From < FASTWAKE_DIN16_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN16_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN16_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN16_A { match self . bits { false => FASTWAKE_DIN16_A :: FASTWAKE_DIN16_DISABLE , true => FASTWAKE_DIN16_A :: FASTWAKE_DIN16_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din16_disable (& self) -> bool { * self == FASTWAKE_DIN16_A :: FASTWAKE_DIN16_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din16_enable (& self) -> bool { * self == FASTWAKE_DIN16_A :: FASTWAKE_DIN16_ENABLE } } # [doc = "Field `FASTWAKE_DIN16` writer - Enable fastwake feature for DIN16"] pub type FASTWAKE_DIN16_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN16_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN16_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din16_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN16_A :: FASTWAKE_DIN16_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din16_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN16_A :: FASTWAKE_DIN16_ENABLE) } } # [doc = "Field `FASTWAKE_DIN17` reader - Enable fastwake feature for DIN17"] pub type FASTWAKE_DIN17_R = crate :: BitReader < FASTWAKE_DIN17_A > ; # [doc = "Enable fastwake feature for DIN17\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN17_A { # [doc = "0: DISABLE"] FASTWAKE_DIN17_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN17_ENABLE = 1 , } impl From < FASTWAKE_DIN17_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN17_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN17_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN17_A { match self . bits { false => FASTWAKE_DIN17_A :: FASTWAKE_DIN17_DISABLE , true => FASTWAKE_DIN17_A :: FASTWAKE_DIN17_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din17_disable (& self) -> bool { * self == FASTWAKE_DIN17_A :: FASTWAKE_DIN17_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din17_enable (& self) -> bool { * self == FASTWAKE_DIN17_A :: FASTWAKE_DIN17_ENABLE } } # [doc = "Field `FASTWAKE_DIN17` writer - Enable fastwake feature for DIN17"] pub type FASTWAKE_DIN17_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN17_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN17_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din17_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN17_A :: FASTWAKE_DIN17_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din17_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN17_A :: FASTWAKE_DIN17_ENABLE) } } # [doc = "Field `FASTWAKE_DIN18` reader - Enable fastwake feature for DIN18"] pub type FASTWAKE_DIN18_R = crate :: BitReader < FASTWAKE_DIN18_A > ; # [doc = "Enable fastwake feature for DIN18\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN18_A { # [doc = "0: DISABLE"] FASTWAKE_DIN18_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN18_ENABLE = 1 , } impl From < FASTWAKE_DIN18_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN18_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN18_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN18_A { match self . bits { false => FASTWAKE_DIN18_A :: FASTWAKE_DIN18_DISABLE , true => FASTWAKE_DIN18_A :: FASTWAKE_DIN18_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din18_disable (& self) -> bool { * self == FASTWAKE_DIN18_A :: FASTWAKE_DIN18_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din18_enable (& self) -> bool { * self == FASTWAKE_DIN18_A :: FASTWAKE_DIN18_ENABLE } } # [doc = "Field `FASTWAKE_DIN18` writer - Enable fastwake feature for DIN18"] pub type FASTWAKE_DIN18_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN18_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN18_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din18_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN18_A :: FASTWAKE_DIN18_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din18_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN18_A :: FASTWAKE_DIN18_ENABLE) } } # [doc = "Field `FASTWAKE_DIN19` reader - Enable fastwake feature for DIN19"] pub type FASTWAKE_DIN19_R = crate :: BitReader < FASTWAKE_DIN19_A > ; # [doc = "Enable fastwake feature for DIN19\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN19_A { # [doc = "0: DISABLE"] FASTWAKE_DIN19_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN19_ENABLE = 1 , } impl From < FASTWAKE_DIN19_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN19_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN19_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN19_A { match self . bits { false => FASTWAKE_DIN19_A :: FASTWAKE_DIN19_DISABLE , true => FASTWAKE_DIN19_A :: FASTWAKE_DIN19_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din19_disable (& self) -> bool { * self == FASTWAKE_DIN19_A :: FASTWAKE_DIN19_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din19_enable (& self) -> bool { * self == FASTWAKE_DIN19_A :: FASTWAKE_DIN19_ENABLE } } # [doc = "Field `FASTWAKE_DIN19` writer - Enable fastwake feature for DIN19"] pub type FASTWAKE_DIN19_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN19_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN19_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din19_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN19_A :: FASTWAKE_DIN19_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din19_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN19_A :: FASTWAKE_DIN19_ENABLE) } } # [doc = "Field `FASTWAKE_DIN20` reader - Enable fastwake feature for DIN20"] pub type FASTWAKE_DIN20_R = crate :: BitReader < FASTWAKE_DIN20_A > ; # [doc = "Enable fastwake feature for DIN20\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN20_A { # [doc = "0: DISABLE"] FASTWAKE_DIN20_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN20_ENABLE = 1 , } impl From < FASTWAKE_DIN20_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN20_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN20_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN20_A { match self . bits { false => FASTWAKE_DIN20_A :: FASTWAKE_DIN20_DISABLE , true => FASTWAKE_DIN20_A :: FASTWAKE_DIN20_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din20_disable (& self) -> bool { * self == FASTWAKE_DIN20_A :: FASTWAKE_DIN20_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din20_enable (& self) -> bool { * self == FASTWAKE_DIN20_A :: FASTWAKE_DIN20_ENABLE } } # [doc = "Field `FASTWAKE_DIN20` writer - Enable fastwake feature for DIN20"] pub type FASTWAKE_DIN20_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN20_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN20_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din20_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN20_A :: FASTWAKE_DIN20_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din20_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN20_A :: FASTWAKE_DIN20_ENABLE) } } # [doc = "Field `FASTWAKE_DIN21` reader - Enable fastwake feature for DIN21"] pub type FASTWAKE_DIN21_R = crate :: BitReader < FASTWAKE_DIN21_A > ; # [doc = "Enable fastwake feature for DIN21\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN21_A { # [doc = "0: DISABLE"] FASTWAKE_DIN21_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN21_ENABLE = 1 , } impl From < FASTWAKE_DIN21_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN21_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN21_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN21_A { match self . bits { false => FASTWAKE_DIN21_A :: FASTWAKE_DIN21_DISABLE , true => FASTWAKE_DIN21_A :: FASTWAKE_DIN21_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din21_disable (& self) -> bool { * self == FASTWAKE_DIN21_A :: FASTWAKE_DIN21_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din21_enable (& self) -> bool { * self == FASTWAKE_DIN21_A :: FASTWAKE_DIN21_ENABLE } } # [doc = "Field `FASTWAKE_DIN21` writer - Enable fastwake feature for DIN21"] pub type FASTWAKE_DIN21_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN21_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN21_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din21_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN21_A :: FASTWAKE_DIN21_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din21_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN21_A :: FASTWAKE_DIN21_ENABLE) } } # [doc = "Field `FASTWAKE_DIN22` reader - Enable fastwake feature for DIN22"] pub type FASTWAKE_DIN22_R = crate :: BitReader < FASTWAKE_DIN22_A > ; # [doc = "Enable fastwake feature for DIN22\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN22_A { # [doc = "0: DISABLE"] FASTWAKE_DIN22_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN22_ENABLE = 1 , } impl From < FASTWAKE_DIN22_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN22_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN22_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN22_A { match self . bits { false => FASTWAKE_DIN22_A :: FASTWAKE_DIN22_DISABLE , true => FASTWAKE_DIN22_A :: FASTWAKE_DIN22_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din22_disable (& self) -> bool { * self == FASTWAKE_DIN22_A :: FASTWAKE_DIN22_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din22_enable (& self) -> bool { * self == FASTWAKE_DIN22_A :: FASTWAKE_DIN22_ENABLE } } # [doc = "Field `FASTWAKE_DIN22` writer - Enable fastwake feature for DIN22"] pub type FASTWAKE_DIN22_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN22_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN22_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din22_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN22_A :: FASTWAKE_DIN22_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din22_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN22_A :: FASTWAKE_DIN22_ENABLE) } } # [doc = "Field `FASTWAKE_DIN23` reader - Enable fastwake feature for DIN23"] pub type FASTWAKE_DIN23_R = crate :: BitReader < FASTWAKE_DIN23_A > ; # [doc = "Enable fastwake feature for DIN23\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN23_A { # [doc = "0: DISABLE"] FASTWAKE_DIN23_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN23_ENABLE = 1 , } impl From < FASTWAKE_DIN23_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN23_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN23_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN23_A { match self . bits { false => FASTWAKE_DIN23_A :: FASTWAKE_DIN23_DISABLE , true => FASTWAKE_DIN23_A :: FASTWAKE_DIN23_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din23_disable (& self) -> bool { * self == FASTWAKE_DIN23_A :: FASTWAKE_DIN23_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din23_enable (& self) -> bool { * self == FASTWAKE_DIN23_A :: FASTWAKE_DIN23_ENABLE } } # [doc = "Field `FASTWAKE_DIN23` writer - Enable fastwake feature for DIN23"] pub type FASTWAKE_DIN23_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN23_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN23_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din23_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN23_A :: FASTWAKE_DIN23_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din23_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN23_A :: FASTWAKE_DIN23_ENABLE) } } # [doc = "Field `FASTWAKE_DIN24` reader - Enable fastwake feature for DIN24"] pub type FASTWAKE_DIN24_R = crate :: BitReader < FASTWAKE_DIN24_A > ; # [doc = "Enable fastwake feature for DIN24\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN24_A { # [doc = "0: DISABLE"] FASTWAKE_DIN24_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN24_ENABLE = 1 , } impl From < FASTWAKE_DIN24_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN24_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN24_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN24_A { match self . bits { false => FASTWAKE_DIN24_A :: FASTWAKE_DIN24_DISABLE , true => FASTWAKE_DIN24_A :: FASTWAKE_DIN24_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din24_disable (& self) -> bool { * self == FASTWAKE_DIN24_A :: FASTWAKE_DIN24_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din24_enable (& self) -> bool { * self == FASTWAKE_DIN24_A :: FASTWAKE_DIN24_ENABLE } } # [doc = "Field `FASTWAKE_DIN24` writer - Enable fastwake feature for DIN24"] pub type FASTWAKE_DIN24_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN24_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN24_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din24_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN24_A :: FASTWAKE_DIN24_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din24_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN24_A :: FASTWAKE_DIN24_ENABLE) } } # [doc = "Field `FASTWAKE_DIN25` reader - Enable fastwake feature for DIN25"] pub type FASTWAKE_DIN25_R = crate :: BitReader < FASTWAKE_DIN25_A > ; # [doc = "Enable fastwake feature for DIN25\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN25_A { # [doc = "0: DISABLE"] FASTWAKE_DIN25_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN25_ENABLE = 1 , } impl From < FASTWAKE_DIN25_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN25_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN25_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN25_A { match self . bits { false => FASTWAKE_DIN25_A :: FASTWAKE_DIN25_DISABLE , true => FASTWAKE_DIN25_A :: FASTWAKE_DIN25_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din25_disable (& self) -> bool { * self == FASTWAKE_DIN25_A :: FASTWAKE_DIN25_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din25_enable (& self) -> bool { * self == FASTWAKE_DIN25_A :: FASTWAKE_DIN25_ENABLE } } # [doc = "Field `FASTWAKE_DIN25` writer - Enable fastwake feature for DIN25"] pub type FASTWAKE_DIN25_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN25_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN25_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din25_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN25_A :: FASTWAKE_DIN25_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din25_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN25_A :: FASTWAKE_DIN25_ENABLE) } } # [doc = "Field `FASTWAKE_DIN26` reader - Enable fastwake feature for DIN26"] pub type FASTWAKE_DIN26_R = crate :: BitReader < FASTWAKE_DIN26_A > ; # [doc = "Enable fastwake feature for DIN26\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN26_A { # [doc = "0: DISABLE"] FASTWAKE_DIN26_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN26_ENABLE = 1 , } impl From < FASTWAKE_DIN26_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN26_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN26_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN26_A { match self . bits { false => FASTWAKE_DIN26_A :: FASTWAKE_DIN26_DISABLE , true => FASTWAKE_DIN26_A :: FASTWAKE_DIN26_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din26_disable (& self) -> bool { * self == FASTWAKE_DIN26_A :: FASTWAKE_DIN26_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din26_enable (& self) -> bool { * self == FASTWAKE_DIN26_A :: FASTWAKE_DIN26_ENABLE } } # [doc = "Field `FASTWAKE_DIN26` writer - Enable fastwake feature for DIN26"] pub type FASTWAKE_DIN26_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN26_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN26_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din26_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN26_A :: FASTWAKE_DIN26_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din26_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN26_A :: FASTWAKE_DIN26_ENABLE) } } # [doc = "Field `FASTWAKE_DIN27` reader - Enable fastwake feature for DIN27"] pub type FASTWAKE_DIN27_R = crate :: BitReader < FASTWAKE_DIN27_A > ; # [doc = "Enable fastwake feature for DIN27\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN27_A { # [doc = "0: DISABLE"] FASTWAKE_DIN27_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN27_ENABLE = 1 , } impl From < FASTWAKE_DIN27_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN27_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN27_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN27_A { match self . bits { false => FASTWAKE_DIN27_A :: FASTWAKE_DIN27_DISABLE , true => FASTWAKE_DIN27_A :: FASTWAKE_DIN27_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din27_disable (& self) -> bool { * self == FASTWAKE_DIN27_A :: FASTWAKE_DIN27_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din27_enable (& self) -> bool { * self == FASTWAKE_DIN27_A :: FASTWAKE_DIN27_ENABLE } } # [doc = "Field `FASTWAKE_DIN27` writer - Enable fastwake feature for DIN27"] pub type FASTWAKE_DIN27_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN27_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN27_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din27_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN27_A :: FASTWAKE_DIN27_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din27_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN27_A :: FASTWAKE_DIN27_ENABLE) } } # [doc = "Field `FASTWAKE_DIN28` reader - Enable fastwake feature for DIN29"] pub type FASTWAKE_DIN28_R = crate :: BitReader < FASTWAKE_DIN28_A > ; # [doc = "Enable fastwake feature for DIN29\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN28_A { # [doc = "0: DISABLE"] FASTWAKE_DIN28_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN28_ENABLE = 1 , } impl From < FASTWAKE_DIN28_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN28_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN28_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN28_A { match self . bits { false => FASTWAKE_DIN28_A :: FASTWAKE_DIN28_DISABLE , true => FASTWAKE_DIN28_A :: FASTWAKE_DIN28_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din28_disable (& self) -> bool { * self == FASTWAKE_DIN28_A :: FASTWAKE_DIN28_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din28_enable (& self) -> bool { * self == FASTWAKE_DIN28_A :: FASTWAKE_DIN28_ENABLE } } # [doc = "Field `FASTWAKE_DIN28` writer - Enable fastwake feature for DIN29"] pub type FASTWAKE_DIN28_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN28_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN28_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din28_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN28_A :: FASTWAKE_DIN28_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din28_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN28_A :: FASTWAKE_DIN28_ENABLE) } } # [doc = "Field `FASTWAKE_DIN29` reader - Enable fastwake feature for DIN29"] pub type FASTWAKE_DIN29_R = crate :: BitReader < FASTWAKE_DIN29_A > ; # [doc = "Enable fastwake feature for DIN29\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN29_A { # [doc = "0: DISABLE"] FASTWAKE_DIN29_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN29_ENABLE = 1 , } impl From < FASTWAKE_DIN29_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN29_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN29_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN29_A { match self . bits { false => FASTWAKE_DIN29_A :: FASTWAKE_DIN29_DISABLE , true => FASTWAKE_DIN29_A :: FASTWAKE_DIN29_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din29_disable (& self) -> bool { * self == FASTWAKE_DIN29_A :: FASTWAKE_DIN29_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din29_enable (& self) -> bool { * self == FASTWAKE_DIN29_A :: FASTWAKE_DIN29_ENABLE } } # [doc = "Field `FASTWAKE_DIN29` writer - Enable fastwake feature for DIN29"] pub type FASTWAKE_DIN29_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN29_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN29_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din29_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN29_A :: FASTWAKE_DIN29_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din29_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN29_A :: FASTWAKE_DIN29_ENABLE) } } # [doc = "Field `FASTWAKE_DIN30` reader - Enable fastwake feature for DIN30"] pub type FASTWAKE_DIN30_R = crate :: BitReader < FASTWAKE_DIN30_A > ; # [doc = "Enable fastwake feature for DIN30\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN30_A { # [doc = "0: DISABLE"] FASTWAKE_DIN30_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN30_ENABLE = 1 , } impl From < FASTWAKE_DIN30_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN30_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN30_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN30_A { match self . bits { false => FASTWAKE_DIN30_A :: FASTWAKE_DIN30_DISABLE , true => FASTWAKE_DIN30_A :: FASTWAKE_DIN30_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din30_disable (& self) -> bool { * self == FASTWAKE_DIN30_A :: FASTWAKE_DIN30_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din30_enable (& self) -> bool { * self == FASTWAKE_DIN30_A :: FASTWAKE_DIN30_ENABLE } } # [doc = "Field `FASTWAKE_DIN30` writer - Enable fastwake feature for DIN30"] pub type FASTWAKE_DIN30_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN30_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN30_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din30_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN30_A :: FASTWAKE_DIN30_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din30_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN30_A :: FASTWAKE_DIN30_ENABLE) } } # [doc = "Field `FASTWAKE_DIN31` reader - Enable fastwake feature for DIN31"] pub type FASTWAKE_DIN31_R = crate :: BitReader < FASTWAKE_DIN31_A > ; # [doc = "Enable fastwake feature for DIN31\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FASTWAKE_DIN31_A { # [doc = "0: DISABLE"] FASTWAKE_DIN31_DISABLE = 0 , # [doc = "1: ENABLE"] FASTWAKE_DIN31_ENABLE = 1 , } impl From < FASTWAKE_DIN31_A > for bool { # [inline (always)] fn from (variant : FASTWAKE_DIN31_A) -> Self { variant as u8 != 0 } } impl FASTWAKE_DIN31_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FASTWAKE_DIN31_A { match self . bits { false => FASTWAKE_DIN31_A :: FASTWAKE_DIN31_DISABLE , true => FASTWAKE_DIN31_A :: FASTWAKE_DIN31_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_fastwake_din31_disable (& self) -> bool { * self == FASTWAKE_DIN31_A :: FASTWAKE_DIN31_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_fastwake_din31_enable (& self) -> bool { * self == FASTWAKE_DIN31_A :: FASTWAKE_DIN31_ENABLE } } # [doc = "Field `FASTWAKE_DIN31` writer - Enable fastwake feature for DIN31"] pub type FASTWAKE_DIN31_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , FASTWAKE_DIN31_A > ; impl < 'a , REG , const O : u8 > FASTWAKE_DIN31_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn fastwake_din31_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN31_A :: FASTWAKE_DIN31_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn fastwake_din31_enable (self) -> & 'a mut crate :: W < REG > { self . variant (FASTWAKE_DIN31_A :: FASTWAKE_DIN31_ENABLE) } } impl R { # [doc = "Bit 0 - Enable fastwake feature for DIN0"] # [inline (always)] pub fn fastwake_din0 (& self) -> FASTWAKE_DIN0_R { FASTWAKE_DIN0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Enable fastwake feature for DIN1"] # [inline (always)] pub fn fastwake_din1 (& self) -> FASTWAKE_DIN1_R { FASTWAKE_DIN1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Enable fastwake feature for DIN2"] # [inline (always)] pub fn fastwake_din2 (& self) -> FASTWAKE_DIN2_R { FASTWAKE_DIN2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Enable fastwake feature for DIN3"] # [inline (always)] pub fn fastwake_din3 (& self) -> FASTWAKE_DIN3_R { FASTWAKE_DIN3_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Enable fastwake feature for DIN4"] # [inline (always)] pub fn fastwake_din4 (& self) -> FASTWAKE_DIN4_R { FASTWAKE_DIN4_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Enable fastwake feature for DIN5"] # [inline (always)] pub fn fastwake_din5 (& self) -> FASTWAKE_DIN5_R { FASTWAKE_DIN5_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Enable fastwake feature for DIN6"] # [inline (always)] pub fn fastwake_din6 (& self) -> FASTWAKE_DIN6_R { FASTWAKE_DIN6_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Enable fastwake feature for DIN7"] # [inline (always)] pub fn fastwake_din7 (& self) -> FASTWAKE_DIN7_R { FASTWAKE_DIN7_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Enable fastwake feature for DIN8"] # [inline (always)] pub fn fastwake_din8 (& self) -> FASTWAKE_DIN8_R { FASTWAKE_DIN8_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Enable fastwake feature for DIN9"] # [inline (always)] pub fn fastwake_din9 (& self) -> FASTWAKE_DIN9_R { FASTWAKE_DIN9_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Enable fastwake feature for DIN10"] # [inline (always)] pub fn fastwake_din10 (& self) -> FASTWAKE_DIN10_R { FASTWAKE_DIN10_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Enable fastwake feature for DIN11"] # [inline (always)] pub fn fastwake_din11 (& self) -> FASTWAKE_DIN11_R { FASTWAKE_DIN11_R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Enable fastwake feature for DIN12"] # [inline (always)] pub fn fastwake_din12 (& self) -> FASTWAKE_DIN12_R { FASTWAKE_DIN12_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Enable fastwake feature for DIN13"] # [inline (always)] pub fn fastwake_din13 (& self) -> FASTWAKE_DIN13_R { FASTWAKE_DIN13_R :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Enable fastwake feature for DIN14"] # [inline (always)] pub fn fastwake_din14 (& self) -> FASTWAKE_DIN14_R { FASTWAKE_DIN14_R :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Enable fastwake feature for DIN15"] # [inline (always)] pub fn fastwake_din15 (& self) -> FASTWAKE_DIN15_R { FASTWAKE_DIN15_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Enable fastwake feature for DIN16"] # [inline (always)] pub fn fastwake_din16 (& self) -> FASTWAKE_DIN16_R { FASTWAKE_DIN16_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Enable fastwake feature for DIN17"] # [inline (always)] pub fn fastwake_din17 (& self) -> FASTWAKE_DIN17_R { FASTWAKE_DIN17_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Enable fastwake feature for DIN18"] # [inline (always)] pub fn fastwake_din18 (& self) -> FASTWAKE_DIN18_R { FASTWAKE_DIN18_R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Enable fastwake feature for DIN19"] # [inline (always)] pub fn fastwake_din19 (& self) -> FASTWAKE_DIN19_R { FASTWAKE_DIN19_R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Enable fastwake feature for DIN20"] # [inline (always)] pub fn fastwake_din20 (& self) -> FASTWAKE_DIN20_R { FASTWAKE_DIN20_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Enable fastwake feature for DIN21"] # [inline (always)] pub fn fastwake_din21 (& self) -> FASTWAKE_DIN21_R { FASTWAKE_DIN21_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Enable fastwake feature for DIN22"] # [inline (always)] pub fn fastwake_din22 (& self) -> FASTWAKE_DIN22_R { FASTWAKE_DIN22_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - Enable fastwake feature for DIN23"] # [inline (always)] pub fn fastwake_din23 (& self) -> FASTWAKE_DIN23_R { FASTWAKE_DIN23_R :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - Enable fastwake feature for DIN24"] # [inline (always)] pub fn fastwake_din24 (& self) -> FASTWAKE_DIN24_R { FASTWAKE_DIN24_R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - Enable fastwake feature for DIN25"] # [inline (always)] pub fn fastwake_din25 (& self) -> FASTWAKE_DIN25_R { FASTWAKE_DIN25_R :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - Enable fastwake feature for DIN26"] # [inline (always)] pub fn fastwake_din26 (& self) -> FASTWAKE_DIN26_R { FASTWAKE_DIN26_R :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - Enable fastwake feature for DIN27"] # [inline (always)] pub fn fastwake_din27 (& self) -> FASTWAKE_DIN27_R { FASTWAKE_DIN27_R :: new (((self . bits >> 27) & 1) != 0) } # [doc = "Bit 28 - Enable fastwake feature for DIN29"] # [inline (always)] pub fn fastwake_din28 (& self) -> FASTWAKE_DIN28_R { FASTWAKE_DIN28_R :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - Enable fastwake feature for DIN29"] # [inline (always)] pub fn fastwake_din29 (& self) -> FASTWAKE_DIN29_R { FASTWAKE_DIN29_R :: new (((self . bits >> 29) & 1) != 0) } # [doc = "Bit 30 - Enable fastwake feature for DIN30"] # [inline (always)] pub fn fastwake_din30 (& self) -> FASTWAKE_DIN30_R { FASTWAKE_DIN30_R :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - Enable fastwake feature for DIN31"] # [inline (always)] pub fn fastwake_din31 (& self) -> FASTWAKE_DIN31_R { FASTWAKE_DIN31_R :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - Enable fastwake feature for DIN0"] # [inline (always)] # [must_use] pub fn fastwake_din0 (& mut self) -> FASTWAKE_DIN0_W < FASTWAKE_SPEC , 0 > { FASTWAKE_DIN0_W :: new (self) } # [doc = "Bit 1 - Enable fastwake feature for DIN1"] # [inline (always)] # [must_use] pub fn fastwake_din1 (& mut self) -> FASTWAKE_DIN1_W < FASTWAKE_SPEC , 1 > { FASTWAKE_DIN1_W :: new (self) } # [doc = "Bit 2 - Enable fastwake feature for DIN2"] # [inline (always)] # [must_use] pub fn fastwake_din2 (& mut self) -> FASTWAKE_DIN2_W < FASTWAKE_SPEC , 2 > { FASTWAKE_DIN2_W :: new (self) } # [doc = "Bit 3 - Enable fastwake feature for DIN3"] # [inline (always)] # [must_use] pub fn fastwake_din3 (& mut self) -> FASTWAKE_DIN3_W < FASTWAKE_SPEC , 3 > { FASTWAKE_DIN3_W :: new (self) } # [doc = "Bit 4 - Enable fastwake feature for DIN4"] # [inline (always)] # [must_use] pub fn fastwake_din4 (& mut self) -> FASTWAKE_DIN4_W < FASTWAKE_SPEC , 4 > { FASTWAKE_DIN4_W :: new (self) } # [doc = "Bit 5 - Enable fastwake feature for DIN5"] # [inline (always)] # [must_use] pub fn fastwake_din5 (& mut self) -> FASTWAKE_DIN5_W < FASTWAKE_SPEC , 5 > { FASTWAKE_DIN5_W :: new (self) } # [doc = "Bit 6 - Enable fastwake feature for DIN6"] # [inline (always)] # [must_use] pub fn fastwake_din6 (& mut self) -> FASTWAKE_DIN6_W < FASTWAKE_SPEC , 6 > { FASTWAKE_DIN6_W :: new (self) } # [doc = "Bit 7 - Enable fastwake feature for DIN7"] # [inline (always)] # [must_use] pub fn fastwake_din7 (& mut self) -> FASTWAKE_DIN7_W < FASTWAKE_SPEC , 7 > { FASTWAKE_DIN7_W :: new (self) } # [doc = "Bit 8 - Enable fastwake feature for DIN8"] # [inline (always)] # [must_use] pub fn fastwake_din8 (& mut self) -> FASTWAKE_DIN8_W < FASTWAKE_SPEC , 8 > { FASTWAKE_DIN8_W :: new (self) } # [doc = "Bit 9 - Enable fastwake feature for DIN9"] # [inline (always)] # [must_use] pub fn fastwake_din9 (& mut self) -> FASTWAKE_DIN9_W < FASTWAKE_SPEC , 9 > { FASTWAKE_DIN9_W :: new (self) } # [doc = "Bit 10 - Enable fastwake feature for DIN10"] # [inline (always)] # [must_use] pub fn fastwake_din10 (& mut self) -> FASTWAKE_DIN10_W < FASTWAKE_SPEC , 10 > { FASTWAKE_DIN10_W :: new (self) } # [doc = "Bit 11 - Enable fastwake feature for DIN11"] # [inline (always)] # [must_use] pub fn fastwake_din11 (& mut self) -> FASTWAKE_DIN11_W < FASTWAKE_SPEC , 11 > { FASTWAKE_DIN11_W :: new (self) } # [doc = "Bit 12 - Enable fastwake feature for DIN12"] # [inline (always)] # [must_use] pub fn fastwake_din12 (& mut self) -> FASTWAKE_DIN12_W < FASTWAKE_SPEC , 12 > { FASTWAKE_DIN12_W :: new (self) } # [doc = "Bit 13 - Enable fastwake feature for DIN13"] # [inline (always)] # [must_use] pub fn fastwake_din13 (& mut self) -> FASTWAKE_DIN13_W < FASTWAKE_SPEC , 13 > { FASTWAKE_DIN13_W :: new (self) } # [doc = "Bit 14 - Enable fastwake feature for DIN14"] # [inline (always)] # [must_use] pub fn fastwake_din14 (& mut self) -> FASTWAKE_DIN14_W < FASTWAKE_SPEC , 14 > { FASTWAKE_DIN14_W :: new (self) } # [doc = "Bit 15 - Enable fastwake feature for DIN15"] # [inline (always)] # [must_use] pub fn fastwake_din15 (& mut self) -> FASTWAKE_DIN15_W < FASTWAKE_SPEC , 15 > { FASTWAKE_DIN15_W :: new (self) } # [doc = "Bit 16 - Enable fastwake feature for DIN16"] # [inline (always)] # [must_use] pub fn fastwake_din16 (& mut self) -> FASTWAKE_DIN16_W < FASTWAKE_SPEC , 16 > { FASTWAKE_DIN16_W :: new (self) } # [doc = "Bit 17 - Enable fastwake feature for DIN17"] # [inline (always)] # [must_use] pub fn fastwake_din17 (& mut self) -> FASTWAKE_DIN17_W < FASTWAKE_SPEC , 17 > { FASTWAKE_DIN17_W :: new (self) } # [doc = "Bit 18 - Enable fastwake feature for DIN18"] # [inline (always)] # [must_use] pub fn fastwake_din18 (& mut self) -> FASTWAKE_DIN18_W < FASTWAKE_SPEC , 18 > { FASTWAKE_DIN18_W :: new (self) } # [doc = "Bit 19 - Enable fastwake feature for DIN19"] # [inline (always)] # [must_use] pub fn fastwake_din19 (& mut self) -> FASTWAKE_DIN19_W < FASTWAKE_SPEC , 19 > { FASTWAKE_DIN19_W :: new (self) } # [doc = "Bit 20 - Enable fastwake feature for DIN20"] # [inline (always)] # [must_use] pub fn fastwake_din20 (& mut self) -> FASTWAKE_DIN20_W < FASTWAKE_SPEC , 20 > { FASTWAKE_DIN20_W :: new (self) } # [doc = "Bit 21 - Enable fastwake feature for DIN21"] # [inline (always)] # [must_use] pub fn fastwake_din21 (& mut self) -> FASTWAKE_DIN21_W < FASTWAKE_SPEC , 21 > { FASTWAKE_DIN21_W :: new (self) } # [doc = "Bit 22 - Enable fastwake feature for DIN22"] # [inline (always)] # [must_use] pub fn fastwake_din22 (& mut self) -> FASTWAKE_DIN22_W < FASTWAKE_SPEC , 22 > { FASTWAKE_DIN22_W :: new (self) } # [doc = "Bit 23 - Enable fastwake feature for DIN23"] # [inline (always)] # [must_use] pub fn fastwake_din23 (& mut self) -> FASTWAKE_DIN23_W < FASTWAKE_SPEC , 23 > { FASTWAKE_DIN23_W :: new (self) } # [doc = "Bit 24 - Enable fastwake feature for DIN24"] # [inline (always)] # [must_use] pub fn fastwake_din24 (& mut self) -> FASTWAKE_DIN24_W < FASTWAKE_SPEC , 24 > { FASTWAKE_DIN24_W :: new (self) } # [doc = "Bit 25 - Enable fastwake feature for DIN25"] # [inline (always)] # [must_use] pub fn fastwake_din25 (& mut self) -> FASTWAKE_DIN25_W < FASTWAKE_SPEC , 25 > { FASTWAKE_DIN25_W :: new (self) } # [doc = "Bit 26 - Enable fastwake feature for DIN26"] # [inline (always)] # [must_use] pub fn fastwake_din26 (& mut self) -> FASTWAKE_DIN26_W < FASTWAKE_SPEC , 26 > { FASTWAKE_DIN26_W :: new (self) } # [doc = "Bit 27 - Enable fastwake feature for DIN27"] # [inline (always)] # [must_use] pub fn fastwake_din27 (& mut self) -> FASTWAKE_DIN27_W < FASTWAKE_SPEC , 27 > { FASTWAKE_DIN27_W :: new (self) } # [doc = "Bit 28 - Enable fastwake feature for DIN29"] # [inline (always)] # [must_use] pub fn fastwake_din28 (& mut self) -> FASTWAKE_DIN28_W < FASTWAKE_SPEC , 28 > { FASTWAKE_DIN28_W :: new (self) } # [doc = "Bit 29 - Enable fastwake feature for DIN29"] # [inline (always)] # [must_use] pub fn fastwake_din29 (& mut self) -> FASTWAKE_DIN29_W < FASTWAKE_SPEC , 29 > { FASTWAKE_DIN29_W :: new (self) } # [doc = "Bit 30 - Enable fastwake feature for DIN30"] # [inline (always)] # [must_use] pub fn fastwake_din30 (& mut self) -> FASTWAKE_DIN30_W < FASTWAKE_SPEC , 30 > { FASTWAKE_DIN30_W :: new (self) } # [doc = "Bit 31 - Enable fastwake feature for DIN31"] # [inline (always)] # [must_use] pub fn fastwake_din31 (& mut self) -> FASTWAKE_DIN31_W < FASTWAKE_SPEC , 31 > { FASTWAKE_DIN31_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "FAST WAKE ENABLE\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fastwake::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fastwake::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FASTWAKE_SPEC ; impl crate :: RegisterSpec for FASTWAKE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`fastwake::R`](R) reader structure"] impl crate :: Readable for FASTWAKE_SPEC { } # [doc = "`write(|w| ..)` method takes [`fastwake::W`](W) writer structure"] impl crate :: Writable for FASTWAKE_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets FASTWAKE to value 0"] impl crate :: Resettable for FASTWAKE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }