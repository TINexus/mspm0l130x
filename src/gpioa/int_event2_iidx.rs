# [doc = "Register `INT_EVENT2_IIDX` reader"] pub type R = crate :: R < INT_EVENT2_IIDX_SPEC > ; # [doc = "Field `INT_EVENT2_IIDX_STAT` reader - Interrupt index status"] pub type INT_EVENT2_IIDX_STAT_R = crate :: FieldReader < INT_EVENT2_IIDX_STAT_A > ; # [doc = "Interrupt index status\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum INT_EVENT2_IIDX_STAT_A { # [doc = "0: NO_INTR"] INT_EVENT2_IIDX_STAT_NO_INTR = 0 , # [doc = "1: DIO16"] INT_EVENT2_IIDX_STAT_DIO16 = 1 , # [doc = "2: DIO17"] INT_EVENT2_IIDX_STAT_DIO17 = 2 , # [doc = "3: DIO18"] INT_EVENT2_IIDX_STAT_DIO18 = 3 , # [doc = "4: DIO19"] INT_EVENT2_IIDX_STAT_DIO19 = 4 , # [doc = "5: DIO20"] INT_EVENT2_IIDX_STAT_DIO20 = 5 , # [doc = "6: DIO21"] INT_EVENT2_IIDX_STAT_DIO21 = 6 , # [doc = "7: DIO22"] INT_EVENT2_IIDX_STAT_DIO22 = 7 , # [doc = "8: DIO23"] INT_EVENT2_IIDX_STAT_DIO23 = 8 , # [doc = "9: DIO24"] INT_EVENT2_IIDX_STAT_DIO24 = 9 , # [doc = "10: DIO25"] INT_EVENT2_IIDX_STAT_DIO25 = 10 , # [doc = "11: DIO26"] INT_EVENT2_IIDX_STAT_DIO26 = 11 , # [doc = "12: DIO27"] INT_EVENT2_IIDX_STAT_DIO27 = 12 , # [doc = "13: DIO28"] INT_EVENT2_IIDX_STAT_DIO28 = 13 , # [doc = "14: DIO29"] INT_EVENT2_IIDX_STAT_DIO29 = 14 , # [doc = "15: DIO30"] INT_EVENT2_IIDX_STAT_DIO30 = 15 , # [doc = "16: DIO31"] INT_EVENT2_IIDX_STAT_DIO31 = 16 , } impl From < INT_EVENT2_IIDX_STAT_A > for u8 { # [inline (always)] fn from (variant : INT_EVENT2_IIDX_STAT_A) -> Self { variant as _ } } impl crate :: FieldSpec for INT_EVENT2_IIDX_STAT_A { type Ux = u8 ; } impl INT_EVENT2_IIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < INT_EVENT2_IIDX_STAT_A > { match self . bits { 0 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_NO_INTR) , 1 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO16) , 2 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO17) , 3 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO18) , 4 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO19) , 5 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO20) , 6 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO21) , 7 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO22) , 8 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO23) , 9 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO24) , 10 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO25) , 11 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO26) , 12 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO27) , 13 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO28) , 14 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO29) , 15 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO30) , 16 => Some (INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO31) , _ => None , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_int_event2_iidx_stat_no_intr (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_NO_INTR } # [doc = "DIO16"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio16 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO16 } # [doc = "DIO17"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio17 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO17 } # [doc = "DIO18"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio18 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO18 } # [doc = "DIO19"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio19 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO19 } # [doc = "DIO20"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio20 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO20 } # [doc = "DIO21"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio21 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO21 } # [doc = "DIO22"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio22 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO22 } # [doc = "DIO23"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio23 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO23 } # [doc = "DIO24"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio24 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO24 } # [doc = "DIO25"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio25 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO25 } # [doc = "DIO26"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio26 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO26 } # [doc = "DIO27"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio27 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO27 } # [doc = "DIO28"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio28 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO28 } # [doc = "DIO29"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio29 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO29 } # [doc = "DIO30"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio30 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO30 } # [doc = "DIO31"] # [inline (always)] pub fn is_int_event2_iidx_stat_dio31 (& self) -> bool { * self == INT_EVENT2_IIDX_STAT_A :: INT_EVENT2_IIDX_STAT_DIO31 } } impl R { # [doc = "Bits 0:7 - Interrupt index status"] # [inline (always)] pub fn int_event2_iidx_stat (& self) -> INT_EVENT2_IIDX_STAT_R { INT_EVENT2_IIDX_STAT_R :: new ((self . bits & 0xff) as u8) } } # [doc = "Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_iidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT2_IIDX_SPEC ; impl crate :: RegisterSpec for INT_EVENT2_IIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event2_iidx::R`](R) reader structure"] impl crate :: Readable for INT_EVENT2_IIDX_SPEC { } # [doc = "`reset()` method sets INT_EVENT2_IIDX to value 0"] impl crate :: Resettable for INT_EVENT2_IIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }