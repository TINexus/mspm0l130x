# [doc = "Register `DIN15_12` reader"] pub type R = crate :: R < DIN15_12_SPEC > ; # [doc = "Field `DIN15_12_DIO12` reader - This bit reads the data input value of DIO12."] pub type DIN15_12_DIO12_R = crate :: BitReader < DIN15_12_DIO12_A > ; # [doc = "This bit reads the data input value of DIO12.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN15_12_DIO12_A { # [doc = "0: ZERO"] DIN15_12_DIO12_ZERO = 0 , # [doc = "1: ONE"] DIN15_12_DIO12_ONE = 1 , } impl From < DIN15_12_DIO12_A > for bool { # [inline (always)] fn from (variant : DIN15_12_DIO12_A) -> Self { variant as u8 != 0 } } impl DIN15_12_DIO12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN15_12_DIO12_A { match self . bits { false => DIN15_12_DIO12_A :: DIN15_12_DIO12_ZERO , true => DIN15_12_DIO12_A :: DIN15_12_DIO12_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din15_12_dio12_zero (& self) -> bool { * self == DIN15_12_DIO12_A :: DIN15_12_DIO12_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din15_12_dio12_one (& self) -> bool { * self == DIN15_12_DIO12_A :: DIN15_12_DIO12_ONE } } # [doc = "Field `DIN15_12_DIO13` reader - This bit reads the data input value of DIO13."] pub type DIN15_12_DIO13_R = crate :: BitReader < DIN15_12_DIO13_A > ; # [doc = "This bit reads the data input value of DIO13.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN15_12_DIO13_A { # [doc = "0: ZERO"] DIN15_12_DIO13_ZERO = 0 , # [doc = "1: ONE"] DIN15_12_DIO13_ONE = 1 , } impl From < DIN15_12_DIO13_A > for bool { # [inline (always)] fn from (variant : DIN15_12_DIO13_A) -> Self { variant as u8 != 0 } } impl DIN15_12_DIO13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN15_12_DIO13_A { match self . bits { false => DIN15_12_DIO13_A :: DIN15_12_DIO13_ZERO , true => DIN15_12_DIO13_A :: DIN15_12_DIO13_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din15_12_dio13_zero (& self) -> bool { * self == DIN15_12_DIO13_A :: DIN15_12_DIO13_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din15_12_dio13_one (& self) -> bool { * self == DIN15_12_DIO13_A :: DIN15_12_DIO13_ONE } } # [doc = "Field `DIN15_12_DIO14` reader - This bit reads the data input value of DIO14."] pub type DIN15_12_DIO14_R = crate :: BitReader < DIN15_12_DIO14_A > ; # [doc = "This bit reads the data input value of DIO14.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN15_12_DIO14_A { # [doc = "0: ZERO"] DIN15_12_DIO14_ZERO = 0 , # [doc = "1: ONE"] DIN15_12_DIO14_ONE = 1 , } impl From < DIN15_12_DIO14_A > for bool { # [inline (always)] fn from (variant : DIN15_12_DIO14_A) -> Self { variant as u8 != 0 } } impl DIN15_12_DIO14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN15_12_DIO14_A { match self . bits { false => DIN15_12_DIO14_A :: DIN15_12_DIO14_ZERO , true => DIN15_12_DIO14_A :: DIN15_12_DIO14_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din15_12_dio14_zero (& self) -> bool { * self == DIN15_12_DIO14_A :: DIN15_12_DIO14_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din15_12_dio14_one (& self) -> bool { * self == DIN15_12_DIO14_A :: DIN15_12_DIO14_ONE } } # [doc = "Field `DIN15_12_DIO15` reader - This bit reads the data input value of DIO15."] pub type DIN15_12_DIO15_R = crate :: BitReader < DIN15_12_DIO15_A > ; # [doc = "This bit reads the data input value of DIO15.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DIN15_12_DIO15_A { # [doc = "0: ZERO"] DIN15_12_DIO15_ZERO = 0 , # [doc = "1: ONE"] DIN15_12_DIO15_ONE = 1 , } impl From < DIN15_12_DIO15_A > for bool { # [inline (always)] fn from (variant : DIN15_12_DIO15_A) -> Self { variant as u8 != 0 } } impl DIN15_12_DIO15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DIN15_12_DIO15_A { match self . bits { false => DIN15_12_DIO15_A :: DIN15_12_DIO15_ZERO , true => DIN15_12_DIO15_A :: DIN15_12_DIO15_ONE , } } # [doc = "ZERO"] # [inline (always)] pub fn is_din15_12_dio15_zero (& self) -> bool { * self == DIN15_12_DIO15_A :: DIN15_12_DIO15_ZERO } # [doc = "ONE"] # [inline (always)] pub fn is_din15_12_dio15_one (& self) -> bool { * self == DIN15_12_DIO15_A :: DIN15_12_DIO15_ONE } } impl R { # [doc = "Bit 0 - This bit reads the data input value of DIO12."] # [inline (always)] pub fn din15_12_dio12 (& self) -> DIN15_12_DIO12_R { DIN15_12_DIO12_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - This bit reads the data input value of DIO13."] # [inline (always)] pub fn din15_12_dio13 (& self) -> DIN15_12_DIO13_R { DIN15_12_DIO13_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 16 - This bit reads the data input value of DIO14."] # [inline (always)] pub fn din15_12_dio14 (& self) -> DIN15_12_DIO14_R { DIN15_12_DIO14_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - This bit reads the data input value of DIO15."] # [inline (always)] pub fn din15_12_dio15 (& self) -> DIN15_12_DIO15_R { DIN15_12_DIO15_R :: new (((self . bits >> 24) & 1) != 0) } } # [doc = "Data input 15 to 12\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din15_12::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DIN15_12_SPEC ; impl crate :: RegisterSpec for DIN15_12_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`din15_12::R`](R) reader structure"] impl crate :: Readable for DIN15_12_SPEC { } # [doc = "`reset()` method sets DIN15_12 to value 0"] impl crate :: Resettable for DIN15_12_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }