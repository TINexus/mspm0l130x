# [doc = "Register `FILTEREN15_0` reader"] pub type R = crate :: R < FILTEREN15_0_SPEC > ; # [doc = "Register `FILTEREN15_0` writer"] pub type W = crate :: W < FILTEREN15_0_SPEC > ; # [doc = "Field `FILTEREN15_0_DIN0` reader - Programmable counter length of digital glitch filter for DIN0"] pub type FILTEREN15_0_DIN0_R = crate :: FieldReader < FILTEREN15_0_DIN0_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN0\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN0_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN0_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN0_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN0_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN0_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN0_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN0_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN0_A { type Ux = u8 ; } impl FILTEREN15_0_DIN0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN0_A { match self . bits { 0 => FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_DISABLE , 1 => FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_ONE_CYCLE , 2 => FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_THREE_CYCLE , 3 => FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din0_disable (& self) -> bool { * self == FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din0_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din0_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din0_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN0` writer - Programmable counter length of digital glitch filter for DIN0"] pub type FILTEREN15_0_DIN0_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN0_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din0_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din0_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din0_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din0_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN0_A :: FILTEREN15_0_DIN0_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN1` reader - Programmable counter length of digital glitch filter for DIN1"] pub type FILTEREN15_0_DIN1_R = crate :: FieldReader < FILTEREN15_0_DIN1_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN1_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN1_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN1_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN1_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN1_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN1_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN1_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN1_A { type Ux = u8 ; } impl FILTEREN15_0_DIN1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN1_A { match self . bits { 0 => FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_DISABLE , 1 => FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_ONE_CYCLE , 2 => FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_THREE_CYCLE , 3 => FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din1_disable (& self) -> bool { * self == FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din1_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din1_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din1_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN1` writer - Programmable counter length of digital glitch filter for DIN1"] pub type FILTEREN15_0_DIN1_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN1_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din1_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din1_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din1_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din1_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN1_A :: FILTEREN15_0_DIN1_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN2` reader - Programmable counter length of digital glitch filter for DIN2"] pub type FILTEREN15_0_DIN2_R = crate :: FieldReader < FILTEREN15_0_DIN2_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN2\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN2_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN2_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN2_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN2_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN2_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN2_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN2_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN2_A { type Ux = u8 ; } impl FILTEREN15_0_DIN2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN2_A { match self . bits { 0 => FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_DISABLE , 1 => FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_ONE_CYCLE , 2 => FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_THREE_CYCLE , 3 => FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din2_disable (& self) -> bool { * self == FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din2_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din2_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din2_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN2` writer - Programmable counter length of digital glitch filter for DIN2"] pub type FILTEREN15_0_DIN2_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN2_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din2_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din2_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din2_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din2_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN2_A :: FILTEREN15_0_DIN2_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN3` reader - Programmable counter length of digital glitch filter for DIN3"] pub type FILTEREN15_0_DIN3_R = crate :: FieldReader < FILTEREN15_0_DIN3_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN3\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN3_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN3_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN3_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN3_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN3_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN3_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN3_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN3_A { type Ux = u8 ; } impl FILTEREN15_0_DIN3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN3_A { match self . bits { 0 => FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_DISABLE , 1 => FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_ONE_CYCLE , 2 => FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_THREE_CYCLE , 3 => FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din3_disable (& self) -> bool { * self == FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din3_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din3_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din3_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN3` writer - Programmable counter length of digital glitch filter for DIN3"] pub type FILTEREN15_0_DIN3_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN3_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN3_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din3_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din3_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din3_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din3_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN3_A :: FILTEREN15_0_DIN3_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN4` reader - Programmable counter length of digital glitch filter for DIN4"] pub type FILTEREN15_0_DIN4_R = crate :: FieldReader < FILTEREN15_0_DIN4_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN4\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN4_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN4_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN4_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN4_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN4_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN4_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN4_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN4_A { type Ux = u8 ; } impl FILTEREN15_0_DIN4_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN4_A { match self . bits { 0 => FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_DISABLE , 1 => FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_ONE_CYCLE , 2 => FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_THREE_CYCLE , 3 => FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din4_disable (& self) -> bool { * self == FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din4_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din4_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din4_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN4` writer - Programmable counter length of digital glitch filter for DIN4"] pub type FILTEREN15_0_DIN4_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN4_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN4_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din4_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din4_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din4_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din4_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN4_A :: FILTEREN15_0_DIN4_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN5` reader - Programmable counter length of digital glitch filter for DIN5"] pub type FILTEREN15_0_DIN5_R = crate :: FieldReader < FILTEREN15_0_DIN5_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN5\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN5_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN5_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN5_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN5_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN5_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN5_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN5_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN5_A { type Ux = u8 ; } impl FILTEREN15_0_DIN5_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN5_A { match self . bits { 0 => FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_DISABLE , 1 => FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_ONE_CYCLE , 2 => FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_THREE_CYCLE , 3 => FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din5_disable (& self) -> bool { * self == FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din5_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din5_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din5_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN5` writer - Programmable counter length of digital glitch filter for DIN5"] pub type FILTEREN15_0_DIN5_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN5_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN5_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din5_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din5_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din5_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din5_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN5_A :: FILTEREN15_0_DIN5_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN6` reader - Programmable counter length of digital glitch filter for DIN6"] pub type FILTEREN15_0_DIN6_R = crate :: FieldReader < FILTEREN15_0_DIN6_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN6\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN6_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN6_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN6_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN6_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN6_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN6_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN6_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN6_A { type Ux = u8 ; } impl FILTEREN15_0_DIN6_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN6_A { match self . bits { 0 => FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_DISABLE , 1 => FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_ONE_CYCLE , 2 => FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_THREE_CYCLE , 3 => FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din6_disable (& self) -> bool { * self == FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din6_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din6_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din6_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN6` writer - Programmable counter length of digital glitch filter for DIN6"] pub type FILTEREN15_0_DIN6_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN6_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN6_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din6_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din6_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din6_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din6_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN6_A :: FILTEREN15_0_DIN6_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN7` reader - Programmable counter length of digital glitch filter for DIN7"] pub type FILTEREN15_0_DIN7_R = crate :: FieldReader < FILTEREN15_0_DIN7_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN7\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN7_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN7_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN7_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN7_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN7_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN7_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN7_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN7_A { type Ux = u8 ; } impl FILTEREN15_0_DIN7_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN7_A { match self . bits { 0 => FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_DISABLE , 1 => FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_ONE_CYCLE , 2 => FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_THREE_CYCLE , 3 => FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din7_disable (& self) -> bool { * self == FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din7_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din7_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din7_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN7` writer - Programmable counter length of digital glitch filter for DIN7"] pub type FILTEREN15_0_DIN7_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN7_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN7_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din7_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din7_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din7_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din7_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN7_A :: FILTEREN15_0_DIN7_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN8` reader - Programmable counter length of digital glitch filter for DIN8"] pub type FILTEREN15_0_DIN8_R = crate :: FieldReader < FILTEREN15_0_DIN8_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN8\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN8_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN8_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN8_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN8_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN8_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN8_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN8_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN8_A { type Ux = u8 ; } impl FILTEREN15_0_DIN8_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN8_A { match self . bits { 0 => FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_DISABLE , 1 => FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_ONE_CYCLE , 2 => FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_THREE_CYCLE , 3 => FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din8_disable (& self) -> bool { * self == FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din8_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din8_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din8_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN8` writer - Programmable counter length of digital glitch filter for DIN8"] pub type FILTEREN15_0_DIN8_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN8_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN8_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din8_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din8_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din8_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din8_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN8_A :: FILTEREN15_0_DIN8_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN9` reader - Programmable counter length of digital glitch filter for DIN9"] pub type FILTEREN15_0_DIN9_R = crate :: FieldReader < FILTEREN15_0_DIN9_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN9\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN9_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN9_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN9_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN9_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN9_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN9_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN9_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN9_A { type Ux = u8 ; } impl FILTEREN15_0_DIN9_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN9_A { match self . bits { 0 => FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_DISABLE , 1 => FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_ONE_CYCLE , 2 => FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_THREE_CYCLE , 3 => FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din9_disable (& self) -> bool { * self == FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din9_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din9_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din9_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN9` writer - Programmable counter length of digital glitch filter for DIN9"] pub type FILTEREN15_0_DIN9_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN9_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN9_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din9_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din9_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din9_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din9_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN9_A :: FILTEREN15_0_DIN9_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN10` reader - Programmable counter length of digital glitch filter for DIN10"] pub type FILTEREN15_0_DIN10_R = crate :: FieldReader < FILTEREN15_0_DIN10_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN10\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN10_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN10_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN10_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN10_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN10_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN10_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN10_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN10_A { type Ux = u8 ; } impl FILTEREN15_0_DIN10_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN10_A { match self . bits { 0 => FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_DISABLE , 1 => FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_ONE_CYCLE , 2 => FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_THREE_CYCLE , 3 => FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din10_disable (& self) -> bool { * self == FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din10_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din10_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din10_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN10` writer - Programmable counter length of digital glitch filter for DIN10"] pub type FILTEREN15_0_DIN10_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN10_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN10_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din10_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din10_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din10_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din10_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN10_A :: FILTEREN15_0_DIN10_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN11` reader - Programmable counter length of digital glitch filter for DIN11"] pub type FILTEREN15_0_DIN11_R = crate :: FieldReader < FILTEREN15_0_DIN11_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN11\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN11_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN11_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN11_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN11_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN11_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN11_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN11_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN11_A { type Ux = u8 ; } impl FILTEREN15_0_DIN11_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN11_A { match self . bits { 0 => FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_DISABLE , 1 => FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_ONE_CYCLE , 2 => FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_THREE_CYCLE , 3 => FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din11_disable (& self) -> bool { * self == FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din11_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din11_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din11_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN11` writer - Programmable counter length of digital glitch filter for DIN11"] pub type FILTEREN15_0_DIN11_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN11_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN11_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din11_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din11_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din11_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din11_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN11_A :: FILTEREN15_0_DIN11_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN12` reader - Programmable counter length of digital glitch filter for DIN12"] pub type FILTEREN15_0_DIN12_R = crate :: FieldReader < FILTEREN15_0_DIN12_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN12\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN12_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN12_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN12_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN12_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN12_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN12_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN12_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN12_A { type Ux = u8 ; } impl FILTEREN15_0_DIN12_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN12_A { match self . bits { 0 => FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_DISABLE , 1 => FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_ONE_CYCLE , 2 => FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_THREE_CYCLE , 3 => FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din12_disable (& self) -> bool { * self == FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din12_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din12_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din12_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN12` writer - Programmable counter length of digital glitch filter for DIN12"] pub type FILTEREN15_0_DIN12_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN12_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN12_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din12_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din12_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din12_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din12_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN12_A :: FILTEREN15_0_DIN12_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN13` reader - Programmable counter length of digital glitch filter for DIN13"] pub type FILTEREN15_0_DIN13_R = crate :: FieldReader < FILTEREN15_0_DIN13_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN13\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN13_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN13_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN13_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN13_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN13_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN13_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN13_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN13_A { type Ux = u8 ; } impl FILTEREN15_0_DIN13_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN13_A { match self . bits { 0 => FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_DISABLE , 1 => FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_ONE_CYCLE , 2 => FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_THREE_CYCLE , 3 => FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din13_disable (& self) -> bool { * self == FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din13_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din13_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din13_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN13` writer - Programmable counter length of digital glitch filter for DIN13"] pub type FILTEREN15_0_DIN13_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN13_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN13_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din13_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din13_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din13_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din13_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN13_A :: FILTEREN15_0_DIN13_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN14` reader - Programmable counter length of digital glitch filter for DIN14"] pub type FILTEREN15_0_DIN14_R = crate :: FieldReader < FILTEREN15_0_DIN14_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN14\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN14_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN14_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN14_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN14_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN14_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN14_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN14_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN14_A { type Ux = u8 ; } impl FILTEREN15_0_DIN14_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN14_A { match self . bits { 0 => FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_DISABLE , 1 => FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_ONE_CYCLE , 2 => FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_THREE_CYCLE , 3 => FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din14_disable (& self) -> bool { * self == FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din14_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din14_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din14_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN14` writer - Programmable counter length of digital glitch filter for DIN14"] pub type FILTEREN15_0_DIN14_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN14_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN14_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din14_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din14_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din14_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din14_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN14_A :: FILTEREN15_0_DIN14_EIGHT_CYCLE) } } # [doc = "Field `FILTEREN15_0_DIN15` reader - Programmable counter length of digital glitch filter for DIN15"] pub type FILTEREN15_0_DIN15_R = crate :: FieldReader < FILTEREN15_0_DIN15_A > ; # [doc = "Programmable counter length of digital glitch filter for DIN15\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum FILTEREN15_0_DIN15_A { # [doc = "0: DISABLE"] FILTEREN15_0_DIN15_DISABLE = 0 , # [doc = "1: ONE_CYCLE"] FILTEREN15_0_DIN15_ONE_CYCLE = 1 , # [doc = "2: THREE_CYCLE"] FILTEREN15_0_DIN15_THREE_CYCLE = 2 , # [doc = "3: EIGHT_CYCLE"] FILTEREN15_0_DIN15_EIGHT_CYCLE = 3 , } impl From < FILTEREN15_0_DIN15_A > for u8 { # [inline (always)] fn from (variant : FILTEREN15_0_DIN15_A) -> Self { variant as _ } } impl crate :: FieldSpec for FILTEREN15_0_DIN15_A { type Ux = u8 ; } impl FILTEREN15_0_DIN15_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FILTEREN15_0_DIN15_A { match self . bits { 0 => FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_DISABLE , 1 => FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_ONE_CYCLE , 2 => FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_THREE_CYCLE , 3 => FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_EIGHT_CYCLE , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_filteren15_0_din15_disable (& self) -> bool { * self == FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_DISABLE } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din15_one_cycle (& self) -> bool { * self == FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_ONE_CYCLE } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din15_three_cycle (& self) -> bool { * self == FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_THREE_CYCLE } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn is_filteren15_0_din15_eight_cycle (& self) -> bool { * self == FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_EIGHT_CYCLE } } # [doc = "Field `FILTEREN15_0_DIN15` writer - Programmable counter length of digital glitch filter for DIN15"] pub type FILTEREN15_0_DIN15_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , FILTEREN15_0_DIN15_A > ; impl < 'a , REG , const O : u8 > FILTEREN15_0_DIN15_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn filteren15_0_din15_disable (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_DISABLE) } # [doc = "ONE_CYCLE"] # [inline (always)] pub fn filteren15_0_din15_one_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_ONE_CYCLE) } # [doc = "THREE_CYCLE"] # [inline (always)] pub fn filteren15_0_din15_three_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_THREE_CYCLE) } # [doc = "EIGHT_CYCLE"] # [inline (always)] pub fn filteren15_0_din15_eight_cycle (self) -> & 'a mut crate :: W < REG > { self . variant (FILTEREN15_0_DIN15_A :: FILTEREN15_0_DIN15_EIGHT_CYCLE) } } impl R { # [doc = "Bits 0:1 - Programmable counter length of digital glitch filter for DIN0"] # [inline (always)] pub fn filteren15_0_din0 (& self) -> FILTEREN15_0_DIN0_R { FILTEREN15_0_DIN0_R :: new ((self . bits & 3) as u8) } # [doc = "Bits 2:3 - Programmable counter length of digital glitch filter for DIN1"] # [inline (always)] pub fn filteren15_0_din1 (& self) -> FILTEREN15_0_DIN1_R { FILTEREN15_0_DIN1_R :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 4:5 - Programmable counter length of digital glitch filter for DIN2"] # [inline (always)] pub fn filteren15_0_din2 (& self) -> FILTEREN15_0_DIN2_R { FILTEREN15_0_DIN2_R :: new (((self . bits >> 4) & 3) as u8) } # [doc = "Bits 6:7 - Programmable counter length of digital glitch filter for DIN3"] # [inline (always)] pub fn filteren15_0_din3 (& self) -> FILTEREN15_0_DIN3_R { FILTEREN15_0_DIN3_R :: new (((self . bits >> 6) & 3) as u8) } # [doc = "Bits 8:9 - Programmable counter length of digital glitch filter for DIN4"] # [inline (always)] pub fn filteren15_0_din4 (& self) -> FILTEREN15_0_DIN4_R { FILTEREN15_0_DIN4_R :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bits 10:11 - Programmable counter length of digital glitch filter for DIN5"] # [inline (always)] pub fn filteren15_0_din5 (& self) -> FILTEREN15_0_DIN5_R { FILTEREN15_0_DIN5_R :: new (((self . bits >> 10) & 3) as u8) } # [doc = "Bits 12:13 - Programmable counter length of digital glitch filter for DIN6"] # [inline (always)] pub fn filteren15_0_din6 (& self) -> FILTEREN15_0_DIN6_R { FILTEREN15_0_DIN6_R :: new (((self . bits >> 12) & 3) as u8) } # [doc = "Bits 14:15 - Programmable counter length of digital glitch filter for DIN7"] # [inline (always)] pub fn filteren15_0_din7 (& self) -> FILTEREN15_0_DIN7_R { FILTEREN15_0_DIN7_R :: new (((self . bits >> 14) & 3) as u8) } # [doc = "Bits 16:17 - Programmable counter length of digital glitch filter for DIN8"] # [inline (always)] pub fn filteren15_0_din8 (& self) -> FILTEREN15_0_DIN8_R { FILTEREN15_0_DIN8_R :: new (((self . bits >> 16) & 3) as u8) } # [doc = "Bits 18:19 - Programmable counter length of digital glitch filter for DIN9"] # [inline (always)] pub fn filteren15_0_din9 (& self) -> FILTEREN15_0_DIN9_R { FILTEREN15_0_DIN9_R :: new (((self . bits >> 18) & 3) as u8) } # [doc = "Bits 20:21 - Programmable counter length of digital glitch filter for DIN10"] # [inline (always)] pub fn filteren15_0_din10 (& self) -> FILTEREN15_0_DIN10_R { FILTEREN15_0_DIN10_R :: new (((self . bits >> 20) & 3) as u8) } # [doc = "Bits 22:23 - Programmable counter length of digital glitch filter for DIN11"] # [inline (always)] pub fn filteren15_0_din11 (& self) -> FILTEREN15_0_DIN11_R { FILTEREN15_0_DIN11_R :: new (((self . bits >> 22) & 3) as u8) } # [doc = "Bits 24:25 - Programmable counter length of digital glitch filter for DIN12"] # [inline (always)] pub fn filteren15_0_din12 (& self) -> FILTEREN15_0_DIN12_R { FILTEREN15_0_DIN12_R :: new (((self . bits >> 24) & 3) as u8) } # [doc = "Bits 26:27 - Programmable counter length of digital glitch filter for DIN13"] # [inline (always)] pub fn filteren15_0_din13 (& self) -> FILTEREN15_0_DIN13_R { FILTEREN15_0_DIN13_R :: new (((self . bits >> 26) & 3) as u8) } # [doc = "Bits 28:29 - Programmable counter length of digital glitch filter for DIN14"] # [inline (always)] pub fn filteren15_0_din14 (& self) -> FILTEREN15_0_DIN14_R { FILTEREN15_0_DIN14_R :: new (((self . bits >> 28) & 3) as u8) } # [doc = "Bits 30:31 - Programmable counter length of digital glitch filter for DIN15"] # [inline (always)] pub fn filteren15_0_din15 (& self) -> FILTEREN15_0_DIN15_R { FILTEREN15_0_DIN15_R :: new (((self . bits >> 30) & 3) as u8) } } impl W { # [doc = "Bits 0:1 - Programmable counter length of digital glitch filter for DIN0"] # [inline (always)] # [must_use] pub fn filteren15_0_din0 (& mut self) -> FILTEREN15_0_DIN0_W < FILTEREN15_0_SPEC , 0 > { FILTEREN15_0_DIN0_W :: new (self) } # [doc = "Bits 2:3 - Programmable counter length of digital glitch filter for DIN1"] # [inline (always)] # [must_use] pub fn filteren15_0_din1 (& mut self) -> FILTEREN15_0_DIN1_W < FILTEREN15_0_SPEC , 2 > { FILTEREN15_0_DIN1_W :: new (self) } # [doc = "Bits 4:5 - Programmable counter length of digital glitch filter for DIN2"] # [inline (always)] # [must_use] pub fn filteren15_0_din2 (& mut self) -> FILTEREN15_0_DIN2_W < FILTEREN15_0_SPEC , 4 > { FILTEREN15_0_DIN2_W :: new (self) } # [doc = "Bits 6:7 - Programmable counter length of digital glitch filter for DIN3"] # [inline (always)] # [must_use] pub fn filteren15_0_din3 (& mut self) -> FILTEREN15_0_DIN3_W < FILTEREN15_0_SPEC , 6 > { FILTEREN15_0_DIN3_W :: new (self) } # [doc = "Bits 8:9 - Programmable counter length of digital glitch filter for DIN4"] # [inline (always)] # [must_use] pub fn filteren15_0_din4 (& mut self) -> FILTEREN15_0_DIN4_W < FILTEREN15_0_SPEC , 8 > { FILTEREN15_0_DIN4_W :: new (self) } # [doc = "Bits 10:11 - Programmable counter length of digital glitch filter for DIN5"] # [inline (always)] # [must_use] pub fn filteren15_0_din5 (& mut self) -> FILTEREN15_0_DIN5_W < FILTEREN15_0_SPEC , 10 > { FILTEREN15_0_DIN5_W :: new (self) } # [doc = "Bits 12:13 - Programmable counter length of digital glitch filter for DIN6"] # [inline (always)] # [must_use] pub fn filteren15_0_din6 (& mut self) -> FILTEREN15_0_DIN6_W < FILTEREN15_0_SPEC , 12 > { FILTEREN15_0_DIN6_W :: new (self) } # [doc = "Bits 14:15 - Programmable counter length of digital glitch filter for DIN7"] # [inline (always)] # [must_use] pub fn filteren15_0_din7 (& mut self) -> FILTEREN15_0_DIN7_W < FILTEREN15_0_SPEC , 14 > { FILTEREN15_0_DIN7_W :: new (self) } # [doc = "Bits 16:17 - Programmable counter length of digital glitch filter for DIN8"] # [inline (always)] # [must_use] pub fn filteren15_0_din8 (& mut self) -> FILTEREN15_0_DIN8_W < FILTEREN15_0_SPEC , 16 > { FILTEREN15_0_DIN8_W :: new (self) } # [doc = "Bits 18:19 - Programmable counter length of digital glitch filter for DIN9"] # [inline (always)] # [must_use] pub fn filteren15_0_din9 (& mut self) -> FILTEREN15_0_DIN9_W < FILTEREN15_0_SPEC , 18 > { FILTEREN15_0_DIN9_W :: new (self) } # [doc = "Bits 20:21 - Programmable counter length of digital glitch filter for DIN10"] # [inline (always)] # [must_use] pub fn filteren15_0_din10 (& mut self) -> FILTEREN15_0_DIN10_W < FILTEREN15_0_SPEC , 20 > { FILTEREN15_0_DIN10_W :: new (self) } # [doc = "Bits 22:23 - Programmable counter length of digital glitch filter for DIN11"] # [inline (always)] # [must_use] pub fn filteren15_0_din11 (& mut self) -> FILTEREN15_0_DIN11_W < FILTEREN15_0_SPEC , 22 > { FILTEREN15_0_DIN11_W :: new (self) } # [doc = "Bits 24:25 - Programmable counter length of digital glitch filter for DIN12"] # [inline (always)] # [must_use] pub fn filteren15_0_din12 (& mut self) -> FILTEREN15_0_DIN12_W < FILTEREN15_0_SPEC , 24 > { FILTEREN15_0_DIN12_W :: new (self) } # [doc = "Bits 26:27 - Programmable counter length of digital glitch filter for DIN13"] # [inline (always)] # [must_use] pub fn filteren15_0_din13 (& mut self) -> FILTEREN15_0_DIN13_W < FILTEREN15_0_SPEC , 26 > { FILTEREN15_0_DIN13_W :: new (self) } # [doc = "Bits 28:29 - Programmable counter length of digital glitch filter for DIN14"] # [inline (always)] # [must_use] pub fn filteren15_0_din14 (& mut self) -> FILTEREN15_0_DIN14_W < FILTEREN15_0_SPEC , 28 > { FILTEREN15_0_DIN14_W :: new (self) } # [doc = "Bits 30:31 - Programmable counter length of digital glitch filter for DIN15"] # [inline (always)] # [must_use] pub fn filteren15_0_din15 (& mut self) -> FILTEREN15_0_DIN15_W < FILTEREN15_0_SPEC , 30 > { FILTEREN15_0_DIN15_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Filter Enable 15 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`filteren15_0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`filteren15_0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FILTEREN15_0_SPEC ; impl crate :: RegisterSpec for FILTEREN15_0_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`filteren15_0::R`](R) reader structure"] impl crate :: Readable for FILTEREN15_0_SPEC { } # [doc = "`write(|w| ..)` method takes [`filteren15_0::W`](W) writer structure"] impl crate :: Writable for FILTEREN15_0_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets FILTEREN15_0 to value 0"] impl crate :: Resettable for FILTEREN15_0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }