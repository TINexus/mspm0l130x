# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { _reserved0 : [u8 ; 0x0400] , # [doc = "0x400 - Subsciber Port 0"] pub fsub_0 : FSUB_0 , # [doc = "0x404 - Subscriber Port 1"] pub fsub_1 : FSUB_1 , _reserved2 : [u8 ; 0x3c] , # [doc = "0x444 - Publisher Port 0"] pub fpub_0 : FPUB_0 , # [doc = "0x448 - Publisher Port 1"] pub fpub_1 : FPUB_1 , _reserved4 : [u8 ; 0x03b4] , # [doc = "0x800 - Power enable"] pub pwren : PWREN , # [doc = "0x804 - Reset Control"] pub rstctl : RSTCTL , _reserved6 : [u8 ; 0x0c] , # [doc = "0x814 - Status Register"] pub stat : STAT , _reserved7 : [u8 ; 0x07f8] , # [doc = "0x1010 - Clock Override"] pub clkovr : CLKOVR , _reserved8 : [u8 ; 0x04] , # [doc = "0x1018 - Peripheral Debug Control"] pub pdbgctl : PDBGCTL , _reserved9 : [u8 ; 0x04] , # [doc = "0x1020 - Interrupt index"] pub int_event0_iidx : INT_EVENT0_IIDX , _reserved10 : [u8 ; 0x04] , # [doc = "0x1028 - Interrupt mask"] pub int_event0_imask : INT_EVENT0_IMASK , _reserved11 : [u8 ; 0x04] , # [doc = "0x1030 - Raw interrupt status"] pub int_event0_ris : INT_EVENT0_RIS , _reserved12 : [u8 ; 0x04] , # [doc = "0x1038 - Masked interrupt status"] pub int_event0_mis : INT_EVENT0_MIS , _reserved13 : [u8 ; 0x04] , # [doc = "0x1040 - Interrupt set"] pub int_event0_iset : INT_EVENT0_ISET , _reserved14 : [u8 ; 0x04] , # [doc = "0x1048 - Interrupt clear"] pub int_event0_iclr : INT_EVENT0_ICLR , _reserved15 : [u8 ; 0x04] , # [doc = "0x1050 - Interrupt index"] pub int_event1_iidx : INT_EVENT1_IIDX , _reserved16 : [u8 ; 0x04] , # [doc = "0x1058 - Interrupt mask"] pub int_event1_imask : INT_EVENT1_IMASK , _reserved17 : [u8 ; 0x04] , # [doc = "0x1060 - Raw interrupt status"] pub int_event1_ris : INT_EVENT1_RIS , _reserved18 : [u8 ; 0x04] , # [doc = "0x1068 - Masked interrupt status"] pub int_event1_mis : INT_EVENT1_MIS , _reserved19 : [u8 ; 0x04] , # [doc = "0x1070 - Interrupt set"] pub int_event1_iset : INT_EVENT1_ISET , _reserved20 : [u8 ; 0x04] , # [doc = "0x1078 - Interrupt clear"] pub int_event1_iclr : INT_EVENT1_ICLR , _reserved21 : [u8 ; 0x04] , # [doc = "0x1080 - Interrupt index"] pub int_event2_iidx : INT_EVENT2_IIDX , _reserved22 : [u8 ; 0x04] , # [doc = "0x1088 - Interrupt mask"] pub int_event2_imask : INT_EVENT2_IMASK , _reserved23 : [u8 ; 0x04] , # [doc = "0x1090 - Raw interrupt status"] pub int_event2_ris : INT_EVENT2_RIS , _reserved24 : [u8 ; 0x04] , # [doc = "0x1098 - Masked interrupt status"] pub int_event2_mis : INT_EVENT2_MIS , _reserved25 : [u8 ; 0x04] , # [doc = "0x10a0 - Interrupt set"] pub int_event2_iset : INT_EVENT2_ISET , _reserved26 : [u8 ; 0x04] , # [doc = "0x10a8 - Interrupt clear"] pub int_event2_iclr : INT_EVENT2_ICLR , _reserved27 : [u8 ; 0x34] , # [doc = "0x10e0 - Event Mode"] pub evt_mode : EVT_MODE , _reserved28 : [u8 ; 0x18] , # [doc = "0x10fc - Module Description"] pub desc : DESC , _reserved29 : [u8 ; 0x0100] , # [doc = "0x1200 - Data output 3 to 0"] pub dout3_0 : DOUT3_0 , # [doc = "0x1204 - Data output 7 to 4"] pub dout7_4 : DOUT7_4 , # [doc = "0x1208 - Data output 11 to 8"] pub dout11_8 : DOUT11_8 , # [doc = "0x120c - Data output 15 to 12"] pub dout15_12 : DOUT15_12 , # [doc = "0x1210 - Data output 19 to 16"] pub dout19_16 : DOUT19_16 , # [doc = "0x1214 - Data output 23 to 20"] pub dout23_20 : DOUT23_20 , # [doc = "0x1218 - Data output 27 to 24"] pub dout27_24 : DOUT27_24 , # [doc = "0x121c - Data output 31 to 28"] pub dout31_28 : DOUT31_28 , _reserved37 : [u8 ; 0x60] , # [doc = "0x1280 - Data output 31 to 0"] pub dout31_0 : DOUT31_0 , _reserved38 : [u8 ; 0x0c] , # [doc = "0x1290 - Data output set 31 to 0"] pub doutset31_0 : DOUTSET31_0 , _reserved39 : [u8 ; 0x0c] , # [doc = "0x12a0 - Data output clear 31 to 0"] pub doutclr31_0 : DOUTCLR31_0 , _reserved40 : [u8 ; 0x0c] , # [doc = "0x12b0 - Data output toggle 31 to 0"] pub douttgl31_0 : DOUTTGL31_0 , _reserved41 : [u8 ; 0x0c] , # [doc = "0x12c0 - Data output enable 31 to 0"] pub doe31_0 : DOE31_0 , _reserved42 : [u8 ; 0x0c] , # [doc = "0x12d0 - Data output enable set 31 to 0"] pub doeset31_0 : DOESET31_0 , _reserved43 : [u8 ; 0x0c] , # [doc = "0x12e0 - Data output enable clear 31 to 0"] pub doeclr31_0 : DOECLR31_0 , _reserved44 : [u8 ; 0x1c] , # [doc = "0x1300 - Data input 3 to 0"] pub din3_0 : DIN3_0 , # [doc = "0x1304 - Data input 7 to 4"] pub din7_4 : DIN7_4 , # [doc = "0x1308 - Data input 11 to 8"] pub din11_8 : DIN11_8 , # [doc = "0x130c - Data input 15 to 12"] pub din15_12 : DIN15_12 , # [doc = "0x1310 - Data input 19 to 16"] pub din19_16 : DIN19_16 , # [doc = "0x1314 - Data input 23 to 20"] pub din23_20 : DIN23_20 , # [doc = "0x1318 - Data input 27 to 24"] pub din27_24 : DIN27_24 , # [doc = "0x131c - Data input 31 to 28"] pub din31_28 : DIN31_28 , _reserved52 : [u8 ; 0x60] , # [doc = "0x1380 - Data input 31 to 0"] pub din31_0 : DIN31_0 , _reserved53 : [u8 ; 0x0c] , # [doc = "0x1390 - Polarity 15 to 0"] pub polarity15_0 : POLARITY15_0 , _reserved54 : [u8 ; 0x0c] , # [doc = "0x13a0 - Polarity 31 to 16"] pub polarity31_16 : POLARITY31_16 , _reserved55 : [u8 ; 0x5c] , # [doc = "0x1400 - FAST WAKE GLOBAL EN"] pub ctl : CTL , # [doc = "0x1404 - FAST WAKE ENABLE"] pub fastwake : FASTWAKE , _reserved57 : [u8 ; 0xf8] , # [doc = "0x1500 - Subscriber 0 configuration"] pub sub0cfg : SUB0CFG , _reserved58 : [u8 ; 0x04] , # [doc = "0x1508 - Filter Enable 15 to 0"] pub filteren15_0 : FILTEREN15_0 , # [doc = "0x150c - Filter Enable 31 to 16"] pub filteren31_16 : FILTEREN31_16 , # [doc = "0x1510 - DMA Write MASK"] pub dmamask : DMAMASK , _reserved61 : [u8 ; 0x0c] , # [doc = "0x1520 - Subscriber 1 configuration"] pub sub1cfg : SUB1CFG , } # [doc = "FSUB_0 (rw) register accessor: Subsciber Port 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fsub_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fsub_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fsub_0`]
module"] pub type FSUB_0 = crate :: Reg < fsub_0 :: FSUB_0_SPEC > ; # [doc = "Subsciber Port 0"] pub mod fsub_0 ; # [doc = "FSUB_1 (rw) register accessor: Subscriber Port 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fsub_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fsub_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fsub_1`]
module"] pub type FSUB_1 = crate :: Reg < fsub_1 :: FSUB_1_SPEC > ; # [doc = "Subscriber Port 1"] pub mod fsub_1 ; # [doc = "FPUB_0 (rw) register accessor: Publisher Port 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fpub_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fpub_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fpub_0`]
module"] pub type FPUB_0 = crate :: Reg < fpub_0 :: FPUB_0_SPEC > ; # [doc = "Publisher Port 0"] pub mod fpub_0 ; # [doc = "FPUB_1 (rw) register accessor: Publisher Port 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fpub_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fpub_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fpub_1`]
module"] pub type FPUB_1 = crate :: Reg < fpub_1 :: FPUB_1_SPEC > ; # [doc = "Publisher Port 1"] pub mod fpub_1 ; # [doc = "PWREN (rw) register accessor: Power enable\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pwren::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pwren::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pwren`]
module"] pub type PWREN = crate :: Reg < pwren :: PWREN_SPEC > ; # [doc = "Power enable"] pub mod pwren ; # [doc = "RSTCTL (w) register accessor: Reset Control\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rstctl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rstctl`]
module"] pub type RSTCTL = crate :: Reg < rstctl :: RSTCTL_SPEC > ; # [doc = "Reset Control"] pub mod rstctl ; # [doc = "STAT (r) register accessor: Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stat::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"] pub type STAT = crate :: Reg < stat :: STAT_SPEC > ; # [doc = "Status Register"] pub mod stat ; # [doc = "CLKOVR (rw) register accessor: Clock Override\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkovr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkovr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkovr`]
module"] pub type CLKOVR = crate :: Reg < clkovr :: CLKOVR_SPEC > ; # [doc = "Clock Override"] pub mod clkovr ; # [doc = "PDBGCTL (rw) register accessor: Peripheral Debug Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pdbgctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pdbgctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pdbgctl`]
module"] pub type PDBGCTL = crate :: Reg < pdbgctl :: PDBGCTL_SPEC > ; # [doc = "Peripheral Debug Control"] pub mod pdbgctl ; # [doc = "INT_EVENT0_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iidx`]
module"] pub type INT_EVENT0_IIDX = crate :: Reg < int_event0_iidx :: INT_EVENT0_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event0_iidx ; # [doc = "INT_EVENT0_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_imask`]
module"] pub type INT_EVENT0_IMASK = crate :: Reg < int_event0_imask :: INT_EVENT0_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event0_imask ; # [doc = "INT_EVENT0_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_ris`]
module"] pub type INT_EVENT0_RIS = crate :: Reg < int_event0_ris :: INT_EVENT0_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event0_ris ; # [doc = "INT_EVENT0_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_mis`]
module"] pub type INT_EVENT0_MIS = crate :: Reg < int_event0_mis :: INT_EVENT0_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event0_mis ; # [doc = "INT_EVENT0_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iset`]
module"] pub type INT_EVENT0_ISET = crate :: Reg < int_event0_iset :: INT_EVENT0_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event0_iset ; # [doc = "INT_EVENT0_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iclr`]
module"] pub type INT_EVENT0_ICLR = crate :: Reg < int_event0_iclr :: INT_EVENT0_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event0_iclr ; # [doc = "INT_EVENT1_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iidx`]
module"] pub type INT_EVENT1_IIDX = crate :: Reg < int_event1_iidx :: INT_EVENT1_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event1_iidx ; # [doc = "INT_EVENT1_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_imask`]
module"] pub type INT_EVENT1_IMASK = crate :: Reg < int_event1_imask :: INT_EVENT1_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event1_imask ; # [doc = "INT_EVENT1_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_ris`]
module"] pub type INT_EVENT1_RIS = crate :: Reg < int_event1_ris :: INT_EVENT1_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event1_ris ; # [doc = "INT_EVENT1_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_mis`]
module"] pub type INT_EVENT1_MIS = crate :: Reg < int_event1_mis :: INT_EVENT1_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event1_mis ; # [doc = "INT_EVENT1_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iset`]
module"] pub type INT_EVENT1_ISET = crate :: Reg < int_event1_iset :: INT_EVENT1_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event1_iset ; # [doc = "INT_EVENT1_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iclr`]
module"] pub type INT_EVENT1_ICLR = crate :: Reg < int_event1_iclr :: INT_EVENT1_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event1_iclr ; # [doc = "INT_EVENT2_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iidx`]
module"] pub type INT_EVENT2_IIDX = crate :: Reg < int_event2_iidx :: INT_EVENT2_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event2_iidx ; # [doc = "INT_EVENT2_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_imask`]
module"] pub type INT_EVENT2_IMASK = crate :: Reg < int_event2_imask :: INT_EVENT2_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event2_imask ; # [doc = "INT_EVENT2_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_ris`]
module"] pub type INT_EVENT2_RIS = crate :: Reg < int_event2_ris :: INT_EVENT2_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event2_ris ; # [doc = "INT_EVENT2_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_mis`]
module"] pub type INT_EVENT2_MIS = crate :: Reg < int_event2_mis :: INT_EVENT2_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event2_mis ; # [doc = "INT_EVENT2_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iset`]
module"] pub type INT_EVENT2_ISET = crate :: Reg < int_event2_iset :: INT_EVENT2_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event2_iset ; # [doc = "INT_EVENT2_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iclr`]
module"] pub type INT_EVENT2_ICLR = crate :: Reg < int_event2_iclr :: INT_EVENT2_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event2_iclr ; # [doc = "EVT_MODE (rw) register accessor: Event Mode\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evt_mode::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`evt_mode::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evt_mode`]
module"] pub type EVT_MODE = crate :: Reg < evt_mode :: EVT_MODE_SPEC > ; # [doc = "Event Mode"] pub mod evt_mode ; # [doc = "DESC (r) register accessor: Module Description\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`desc::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@desc`]
module"] pub type DESC = crate :: Reg < desc :: DESC_SPEC > ; # [doc = "Module Description"] pub mod desc ; # [doc = "DOUT3_0 (w) register accessor: Data output 3 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout3_0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout3_0`]
module"] pub type DOUT3_0 = crate :: Reg < dout3_0 :: DOUT3_0_SPEC > ; # [doc = "Data output 3 to 0"] pub mod dout3_0 ; # [doc = "DOUT7_4 (w) register accessor: Data output 7 to 4\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout7_4::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout7_4`]
module"] pub type DOUT7_4 = crate :: Reg < dout7_4 :: DOUT7_4_SPEC > ; # [doc = "Data output 7 to 4"] pub mod dout7_4 ; # [doc = "DOUT11_8 (w) register accessor: Data output 11 to 8\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout11_8::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout11_8`]
module"] pub type DOUT11_8 = crate :: Reg < dout11_8 :: DOUT11_8_SPEC > ; # [doc = "Data output 11 to 8"] pub mod dout11_8 ; # [doc = "DOUT15_12 (w) register accessor: Data output 15 to 12\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout15_12::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout15_12`]
module"] pub type DOUT15_12 = crate :: Reg < dout15_12 :: DOUT15_12_SPEC > ; # [doc = "Data output 15 to 12"] pub mod dout15_12 ; # [doc = "DOUT19_16 (w) register accessor: Data output 19 to 16\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout19_16::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout19_16`]
module"] pub type DOUT19_16 = crate :: Reg < dout19_16 :: DOUT19_16_SPEC > ; # [doc = "Data output 19 to 16"] pub mod dout19_16 ; # [doc = "DOUT23_20 (w) register accessor: Data output 23 to 20\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout23_20::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout23_20`]
module"] pub type DOUT23_20 = crate :: Reg < dout23_20 :: DOUT23_20_SPEC > ; # [doc = "Data output 23 to 20"] pub mod dout23_20 ; # [doc = "DOUT27_24 (w) register accessor: Data output 27 to 24\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout27_24::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout27_24`]
module"] pub type DOUT27_24 = crate :: Reg < dout27_24 :: DOUT27_24_SPEC > ; # [doc = "Data output 27 to 24"] pub mod dout27_24 ; # [doc = "DOUT31_28 (w) register accessor: Data output 31 to 28\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout31_28::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout31_28`]
module"] pub type DOUT31_28 = crate :: Reg < dout31_28 :: DOUT31_28_SPEC > ; # [doc = "Data output 31 to 28"] pub mod dout31_28 ; # [doc = "DOUT31_0 (rw) register accessor: Data output 31 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dout31_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dout31_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dout31_0`]
module"] pub type DOUT31_0 = crate :: Reg < dout31_0 :: DOUT31_0_SPEC > ; # [doc = "Data output 31 to 0"] pub mod dout31_0 ; # [doc = "DOUTSET31_0 (w) register accessor: Data output set 31 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`doutset31_0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@doutset31_0`]
module"] pub type DOUTSET31_0 = crate :: Reg < doutset31_0 :: DOUTSET31_0_SPEC > ; # [doc = "Data output set 31 to 0"] pub mod doutset31_0 ; # [doc = "DOUTCLR31_0 (w) register accessor: Data output clear 31 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`doutclr31_0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@doutclr31_0`]
module"] pub type DOUTCLR31_0 = crate :: Reg < doutclr31_0 :: DOUTCLR31_0_SPEC > ; # [doc = "Data output clear 31 to 0"] pub mod doutclr31_0 ; # [doc = "DOUTTGL31_0 (w) register accessor: Data output toggle 31 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`douttgl31_0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@douttgl31_0`]
module"] pub type DOUTTGL31_0 = crate :: Reg < douttgl31_0 :: DOUTTGL31_0_SPEC > ; # [doc = "Data output toggle 31 to 0"] pub mod douttgl31_0 ; # [doc = "DOE31_0 (rw) register accessor: Data output enable 31 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`doe31_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`doe31_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@doe31_0`]
module"] pub type DOE31_0 = crate :: Reg < doe31_0 :: DOE31_0_SPEC > ; # [doc = "Data output enable 31 to 0"] pub mod doe31_0 ; # [doc = "DOESET31_0 (w) register accessor: Data output enable set 31 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`doeset31_0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@doeset31_0`]
module"] pub type DOESET31_0 = crate :: Reg < doeset31_0 :: DOESET31_0_SPEC > ; # [doc = "Data output enable set 31 to 0"] pub mod doeset31_0 ; # [doc = "DOECLR31_0 (w) register accessor: Data output enable clear 31 to 0\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`doeclr31_0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@doeclr31_0`]
module"] pub type DOECLR31_0 = crate :: Reg < doeclr31_0 :: DOECLR31_0_SPEC > ; # [doc = "Data output enable clear 31 to 0"] pub mod doeclr31_0 ; # [doc = "DIN3_0 (r) register accessor: Data input 3 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din3_0::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din3_0`]
module"] pub type DIN3_0 = crate :: Reg < din3_0 :: DIN3_0_SPEC > ; # [doc = "Data input 3 to 0"] pub mod din3_0 ; # [doc = "DIN7_4 (r) register accessor: Data input 7 to 4\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din7_4::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din7_4`]
module"] pub type DIN7_4 = crate :: Reg < din7_4 :: DIN7_4_SPEC > ; # [doc = "Data input 7 to 4"] pub mod din7_4 ; # [doc = "DIN11_8 (r) register accessor: Data input 11 to 8\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din11_8::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din11_8`]
module"] pub type DIN11_8 = crate :: Reg < din11_8 :: DIN11_8_SPEC > ; # [doc = "Data input 11 to 8"] pub mod din11_8 ; # [doc = "DIN15_12 (r) register accessor: Data input 15 to 12\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din15_12::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din15_12`]
module"] pub type DIN15_12 = crate :: Reg < din15_12 :: DIN15_12_SPEC > ; # [doc = "Data input 15 to 12"] pub mod din15_12 ; # [doc = "DIN19_16 (r) register accessor: Data input 19 to 16\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din19_16::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din19_16`]
module"] pub type DIN19_16 = crate :: Reg < din19_16 :: DIN19_16_SPEC > ; # [doc = "Data input 19 to 16"] pub mod din19_16 ; # [doc = "DIN23_20 (r) register accessor: Data input 23 to 20\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din23_20::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din23_20`]
module"] pub type DIN23_20 = crate :: Reg < din23_20 :: DIN23_20_SPEC > ; # [doc = "Data input 23 to 20"] pub mod din23_20 ; # [doc = "DIN27_24 (r) register accessor: Data input 27 to 24\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din27_24::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din27_24`]
module"] pub type DIN27_24 = crate :: Reg < din27_24 :: DIN27_24_SPEC > ; # [doc = "Data input 27 to 24"] pub mod din27_24 ; # [doc = "DIN31_28 (r) register accessor: Data input 31 to 28\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din31_28::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din31_28`]
module"] pub type DIN31_28 = crate :: Reg < din31_28 :: DIN31_28_SPEC > ; # [doc = "Data input 31 to 28"] pub mod din31_28 ; # [doc = "DIN31_0 (r) register accessor: Data input 31 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`din31_0::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@din31_0`]
module"] pub type DIN31_0 = crate :: Reg < din31_0 :: DIN31_0_SPEC > ; # [doc = "Data input 31 to 0"] pub mod din31_0 ; # [doc = "POLARITY15_0 (rw) register accessor: Polarity 15 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`polarity15_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`polarity15_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@polarity15_0`]
module"] pub type POLARITY15_0 = crate :: Reg < polarity15_0 :: POLARITY15_0_SPEC > ; # [doc = "Polarity 15 to 0"] pub mod polarity15_0 ; # [doc = "POLARITY31_16 (rw) register accessor: Polarity 31 to 16\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`polarity31_16::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`polarity31_16::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@polarity31_16`]
module"] pub type POLARITY31_16 = crate :: Reg < polarity31_16 :: POLARITY31_16_SPEC > ; # [doc = "Polarity 31 to 16"] pub mod polarity31_16 ; # [doc = "CTL (rw) register accessor: FAST WAKE GLOBAL EN\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"] pub type CTL = crate :: Reg < ctl :: CTL_SPEC > ; # [doc = "FAST WAKE GLOBAL EN"] pub mod ctl ; # [doc = "FASTWAKE (rw) register accessor: FAST WAKE ENABLE\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fastwake::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fastwake::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fastwake`]
module"] pub type FASTWAKE = crate :: Reg < fastwake :: FASTWAKE_SPEC > ; # [doc = "FAST WAKE ENABLE"] pub mod fastwake ; # [doc = "SUB0CFG (rw) register accessor: Subscriber 0 configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sub0cfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sub0cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sub0cfg`]
module"] pub type SUB0CFG = crate :: Reg < sub0cfg :: SUB0CFG_SPEC > ; # [doc = "Subscriber 0 configuration"] pub mod sub0cfg ; # [doc = "FILTEREN15_0 (rw) register accessor: Filter Enable 15 to 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`filteren15_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`filteren15_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@filteren15_0`]
module"] pub type FILTEREN15_0 = crate :: Reg < filteren15_0 :: FILTEREN15_0_SPEC > ; # [doc = "Filter Enable 15 to 0"] pub mod filteren15_0 ; # [doc = "FILTEREN31_16 (rw) register accessor: Filter Enable 31 to 16\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`filteren31_16::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`filteren31_16::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@filteren31_16`]
module"] pub type FILTEREN31_16 = crate :: Reg < filteren31_16 :: FILTEREN31_16_SPEC > ; # [doc = "Filter Enable 31 to 16"] pub mod filteren31_16 ; # [doc = "DMAMASK (rw) register accessor: DMA Write MASK\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmamask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmamask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmamask`]
module"] pub type DMAMASK = crate :: Reg < dmamask :: DMAMASK_SPEC > ; # [doc = "DMA Write MASK"] pub mod dmamask ; # [doc = "SUB1CFG (rw) register accessor: Subscriber 1 configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sub1cfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sub1cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sub1cfg`]
module"] pub type SUB1CFG = crate :: Reg < sub1cfg :: SUB1CFG_SPEC > ; # [doc = "Subscriber 1 configuration"] pub mod sub1cfg ;