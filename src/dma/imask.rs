# [doc = "Register `IMASK` reader"] pub type R = crate :: R < IMASK_SPEC > ; # [doc = "Register `IMASK` writer"] pub type W = crate :: W < IMASK_SPEC > ; # [doc = "Field `IMASK_DMACH0` reader - DMA Channel 0 interrupt signal. Size counter reached zero (DMASZ=0)."] pub type IMASK_DMACH0_R = crate :: BitReader < IMASK_DMACH0_A > ; # [doc = "DMA Channel 0 interrupt signal. Size counter reached zero (DMASZ=0).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_DMACH0_A { # [doc = "0: CLR"] IMASK_DMACH0_CLR = 0 , # [doc = "1: SET"] IMASK_DMACH0_SET = 1 , } impl From < IMASK_DMACH0_A > for bool { # [inline (always)] fn from (variant : IMASK_DMACH0_A) -> Self { variant as u8 != 0 } } impl IMASK_DMACH0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_DMACH0_A { match self . bits { false => IMASK_DMACH0_A :: IMASK_DMACH0_CLR , true => IMASK_DMACH0_A :: IMASK_DMACH0_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_dmach0_clr (& self) -> bool { * self == IMASK_DMACH0_A :: IMASK_DMACH0_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_dmach0_set (& self) -> bool { * self == IMASK_DMACH0_A :: IMASK_DMACH0_SET } } # [doc = "Field `IMASK_DMACH0` writer - DMA Channel 0 interrupt signal. Size counter reached zero (DMASZ=0)."] pub type IMASK_DMACH0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_DMACH0_A > ; impl < 'a , REG , const O : u8 > IMASK_DMACH0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_dmach0_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DMACH0_A :: IMASK_DMACH0_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_dmach0_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DMACH0_A :: IMASK_DMACH0_SET) } } # [doc = "Field `IMASK_DMACH1` reader - DMA Channel 1 interrupt signal. Size counter reached zero (DMASZ=0)."] pub type IMASK_DMACH1_R = crate :: BitReader < IMASK_DMACH1_A > ; # [doc = "DMA Channel 1 interrupt signal. Size counter reached zero (DMASZ=0).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_DMACH1_A { # [doc = "0: CLR"] IMASK_DMACH1_CLR = 0 , # [doc = "1: SET"] IMASK_DMACH1_SET = 1 , } impl From < IMASK_DMACH1_A > for bool { # [inline (always)] fn from (variant : IMASK_DMACH1_A) -> Self { variant as u8 != 0 } } impl IMASK_DMACH1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_DMACH1_A { match self . bits { false => IMASK_DMACH1_A :: IMASK_DMACH1_CLR , true => IMASK_DMACH1_A :: IMASK_DMACH1_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_dmach1_clr (& self) -> bool { * self == IMASK_DMACH1_A :: IMASK_DMACH1_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_dmach1_set (& self) -> bool { * self == IMASK_DMACH1_A :: IMASK_DMACH1_SET } } # [doc = "Field `IMASK_DMACH1` writer - DMA Channel 1 interrupt signal. Size counter reached zero (DMASZ=0)."] pub type IMASK_DMACH1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_DMACH1_A > ; impl < 'a , REG , const O : u8 > IMASK_DMACH1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_dmach1_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DMACH1_A :: IMASK_DMACH1_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_dmach1_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DMACH1_A :: IMASK_DMACH1_SET) } } # [doc = "Field `IMASK_DMACH2` reader - DMA Channel 2 interrupt signal. Size counter reached zero (DMASZ=0)."] pub type IMASK_DMACH2_R = crate :: BitReader < IMASK_DMACH2_A > ; # [doc = "DMA Channel 2 interrupt signal. Size counter reached zero (DMASZ=0).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_DMACH2_A { # [doc = "0: CLR"] IMASK_DMACH2_CLR = 0 , # [doc = "1: SET"] IMASK_DMACH2_SET = 1 , } impl From < IMASK_DMACH2_A > for bool { # [inline (always)] fn from (variant : IMASK_DMACH2_A) -> Self { variant as u8 != 0 } } impl IMASK_DMACH2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_DMACH2_A { match self . bits { false => IMASK_DMACH2_A :: IMASK_DMACH2_CLR , true => IMASK_DMACH2_A :: IMASK_DMACH2_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_dmach2_clr (& self) -> bool { * self == IMASK_DMACH2_A :: IMASK_DMACH2_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_dmach2_set (& self) -> bool { * self == IMASK_DMACH2_A :: IMASK_DMACH2_SET } } # [doc = "Field `IMASK_DMACH2` writer - DMA Channel 2 interrupt signal. Size counter reached zero (DMASZ=0)."] pub type IMASK_DMACH2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_DMACH2_A > ; impl < 'a , REG , const O : u8 > IMASK_DMACH2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_dmach2_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DMACH2_A :: IMASK_DMACH2_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_dmach2_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DMACH2_A :: IMASK_DMACH2_SET) } } # [doc = "Field `IMASK_PREIRQCH0` reader - Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold."] pub type IMASK_PREIRQCH0_R = crate :: BitReader < IMASK_PREIRQCH0_A > ; # [doc = "Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_PREIRQCH0_A { # [doc = "0: CLR"] IMASK_PREIRQCH0_CLR = 0 , # [doc = "1: SET"] IMASK_PREIRQCH0_SET = 1 , } impl From < IMASK_PREIRQCH0_A > for bool { # [inline (always)] fn from (variant : IMASK_PREIRQCH0_A) -> Self { variant as u8 != 0 } } impl IMASK_PREIRQCH0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_PREIRQCH0_A { match self . bits { false => IMASK_PREIRQCH0_A :: IMASK_PREIRQCH0_CLR , true => IMASK_PREIRQCH0_A :: IMASK_PREIRQCH0_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_preirqch0_clr (& self) -> bool { * self == IMASK_PREIRQCH0_A :: IMASK_PREIRQCH0_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_preirqch0_set (& self) -> bool { * self == IMASK_PREIRQCH0_A :: IMASK_PREIRQCH0_SET } } # [doc = "Field `IMASK_PREIRQCH0` writer - Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold."] pub type IMASK_PREIRQCH0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_PREIRQCH0_A > ; impl < 'a , REG , const O : u8 > IMASK_PREIRQCH0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_preirqch0_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_PREIRQCH0_A :: IMASK_PREIRQCH0_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_preirqch0_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_PREIRQCH0_A :: IMASK_PREIRQCH0_SET) } } # [doc = "Field `IMASK_ADDRERR` reader - DMA address error, SRC address not reachable."] pub type IMASK_ADDRERR_R = crate :: BitReader < IMASK_ADDRERR_A > ; # [doc = "DMA address error, SRC address not reachable.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_ADDRERR_A { # [doc = "0: CLR"] IMASK_ADDRERR_CLR = 0 , # [doc = "1: SET"] IMASK_ADDRERR_SET = 1 , } impl From < IMASK_ADDRERR_A > for bool { # [inline (always)] fn from (variant : IMASK_ADDRERR_A) -> Self { variant as u8 != 0 } } impl IMASK_ADDRERR_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_ADDRERR_A { match self . bits { false => IMASK_ADDRERR_A :: IMASK_ADDRERR_CLR , true => IMASK_ADDRERR_A :: IMASK_ADDRERR_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_addrerr_clr (& self) -> bool { * self == IMASK_ADDRERR_A :: IMASK_ADDRERR_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_addrerr_set (& self) -> bool { * self == IMASK_ADDRERR_A :: IMASK_ADDRERR_SET } } # [doc = "Field `IMASK_ADDRERR` writer - DMA address error, SRC address not reachable."] pub type IMASK_ADDRERR_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_ADDRERR_A > ; impl < 'a , REG , const O : u8 > IMASK_ADDRERR_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_addrerr_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_ADDRERR_A :: IMASK_ADDRERR_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_addrerr_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_ADDRERR_A :: IMASK_ADDRERR_SET) } } # [doc = "Field `IMASK_DATAERR` reader - DMA data error, SRC data might be corrupted (PAR or ECC error)."] pub type IMASK_DATAERR_R = crate :: BitReader < IMASK_DATAERR_A > ; # [doc = "DMA data error, SRC data might be corrupted (PAR or ECC error).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_DATAERR_A { # [doc = "0: CLR"] IMASK_DATAERR_CLR = 0 , # [doc = "1: SET"] IMASK_DATAERR_SET = 1 , } impl From < IMASK_DATAERR_A > for bool { # [inline (always)] fn from (variant : IMASK_DATAERR_A) -> Self { variant as u8 != 0 } } impl IMASK_DATAERR_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_DATAERR_A { match self . bits { false => IMASK_DATAERR_A :: IMASK_DATAERR_CLR , true => IMASK_DATAERR_A :: IMASK_DATAERR_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_dataerr_clr (& self) -> bool { * self == IMASK_DATAERR_A :: IMASK_DATAERR_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_dataerr_set (& self) -> bool { * self == IMASK_DATAERR_A :: IMASK_DATAERR_SET } } # [doc = "Field `IMASK_DATAERR` writer - DMA data error, SRC data might be corrupted (PAR or ECC error)."] pub type IMASK_DATAERR_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_DATAERR_A > ; impl < 'a , REG , const O : u8 > IMASK_DATAERR_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_dataerr_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DATAERR_A :: IMASK_DATAERR_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_dataerr_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_DATAERR_A :: IMASK_DATAERR_SET) } } impl R { # [doc = "Bit 0 - DMA Channel 0 interrupt signal. Size counter reached zero (DMASZ=0)."] # [inline (always)] pub fn imask_dmach0 (& self) -> IMASK_DMACH0_R { IMASK_DMACH0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - DMA Channel 1 interrupt signal. Size counter reached zero (DMASZ=0)."] # [inline (always)] pub fn imask_dmach1 (& self) -> IMASK_DMACH1_R { IMASK_DMACH1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - DMA Channel 2 interrupt signal. Size counter reached zero (DMASZ=0)."] # [inline (always)] pub fn imask_dmach2 (& self) -> IMASK_DMACH2_R { IMASK_DMACH2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 16 - Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold."] # [inline (always)] pub fn imask_preirqch0 (& self) -> IMASK_PREIRQCH0_R { IMASK_PREIRQCH0_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - DMA address error, SRC address not reachable."] # [inline (always)] pub fn imask_addrerr (& self) -> IMASK_ADDRERR_R { IMASK_ADDRERR_R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - DMA data error, SRC data might be corrupted (PAR or ECC error)."] # [inline (always)] pub fn imask_dataerr (& self) -> IMASK_DATAERR_R { IMASK_DATAERR_R :: new (((self . bits >> 25) & 1) != 0) } } impl W { # [doc = "Bit 0 - DMA Channel 0 interrupt signal. Size counter reached zero (DMASZ=0)."] # [inline (always)] # [must_use] pub fn imask_dmach0 (& mut self) -> IMASK_DMACH0_W < IMASK_SPEC , 0 > { IMASK_DMACH0_W :: new (self) } # [doc = "Bit 1 - DMA Channel 1 interrupt signal. Size counter reached zero (DMASZ=0)."] # [inline (always)] # [must_use] pub fn imask_dmach1 (& mut self) -> IMASK_DMACH1_W < IMASK_SPEC , 1 > { IMASK_DMACH1_W :: new (self) } # [doc = "Bit 2 - DMA Channel 2 interrupt signal. Size counter reached zero (DMASZ=0)."] # [inline (always)] # [must_use] pub fn imask_dmach2 (& mut self) -> IMASK_DMACH2_W < IMASK_SPEC , 2 > { IMASK_DMACH2_W :: new (self) } # [doc = "Bit 16 - Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold."] # [inline (always)] # [must_use] pub fn imask_preirqch0 (& mut self) -> IMASK_PREIRQCH0_W < IMASK_SPEC , 16 > { IMASK_PREIRQCH0_W :: new (self) } # [doc = "Bit 24 - DMA address error, SRC address not reachable."] # [inline (always)] # [must_use] pub fn imask_addrerr (& mut self) -> IMASK_ADDRERR_W < IMASK_SPEC , 24 > { IMASK_ADDRERR_W :: new (self) } # [doc = "Bit 25 - DMA data error, SRC data might be corrupted (PAR or ECC error)."] # [inline (always)] # [must_use] pub fn imask_dataerr (& mut self) -> IMASK_DATAERR_W < IMASK_SPEC , 25 > { IMASK_DATAERR_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`imask::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`imask::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IMASK_SPEC ; impl crate :: RegisterSpec for IMASK_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`imask::R`](R) reader structure"] impl crate :: Readable for IMASK_SPEC { } # [doc = "`write(|w| ..)` method takes [`imask::W`](W) writer structure"] impl crate :: Writable for IMASK_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets IMASK to value 0"] impl crate :: Resettable for IMASK_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }