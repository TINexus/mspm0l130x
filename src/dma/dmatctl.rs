# [doc = "Register `DMATCTL` reader"] pub type R = crate :: R < DMATCTL_SPEC > ; # [doc = "Register `DMATCTL` writer"] pub type W = crate :: W < DMATCTL_SPEC > ; # [doc = "Field `DMATCTL_DMATSEL` reader - DMA Trigger Select Note: Reference the datasheet of the device to see the specific trigger mapping."] pub type DMATCTL_DMATSEL_R = crate :: FieldReader < DMATCTL_DMATSEL_A > ; # [doc = "DMA Trigger Select Note: Reference the datasheet of the device to see the specific trigger mapping.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum DMATCTL_DMATSEL_A { # [doc = "0: DMAREQ"] DMATCTL_DMATSEL_DMAREQ = 0 , } impl From < DMATCTL_DMATSEL_A > for u8 { # [inline (always)] fn from (variant : DMATCTL_DMATSEL_A) -> Self { variant as _ } } impl crate :: FieldSpec for DMATCTL_DMATSEL_A { type Ux = u8 ; } impl DMATCTL_DMATSEL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < DMATCTL_DMATSEL_A > { match self . bits { 0 => Some (DMATCTL_DMATSEL_A :: DMATCTL_DMATSEL_DMAREQ) , _ => None , } } # [doc = "DMAREQ"] # [inline (always)] pub fn is_dmatctl_dmatsel_dmareq (& self) -> bool { * self == DMATCTL_DMATSEL_A :: DMATCTL_DMATSEL_DMAREQ } } # [doc = "Field `DMATCTL_DMATSEL` writer - DMA Trigger Select Note: Reference the datasheet of the device to see the specific trigger mapping."] pub type DMATCTL_DMATSEL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 6 , O , DMATCTL_DMATSEL_A > ; impl < 'a , REG , const O : u8 > DMATCTL_DMATSEL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DMAREQ"] # [inline (always)] pub fn dmatctl_dmatsel_dmareq (self) -> & 'a mut crate :: W < REG > { self . variant (DMATCTL_DMATSEL_A :: DMATCTL_DMATSEL_DMAREQ) } } # [doc = "Field `DMATCTL_DMATINT` reader - DMA Trigger by Internal Channel"] pub type DMATCTL_DMATINT_R = crate :: BitReader < DMATCTL_DMATINT_A > ; # [doc = "DMA Trigger by Internal Channel\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMATCTL_DMATINT_A { # [doc = "0: EXTERNAL"] DMATCTL_DMATINT_EXTERNAL = 0 , # [doc = "1: INTERNAL"] DMATCTL_DMATINT_INTERNAL = 1 , } impl From < DMATCTL_DMATINT_A > for bool { # [inline (always)] fn from (variant : DMATCTL_DMATINT_A) -> Self { variant as u8 != 0 } } impl DMATCTL_DMATINT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMATCTL_DMATINT_A { match self . bits { false => DMATCTL_DMATINT_A :: DMATCTL_DMATINT_EXTERNAL , true => DMATCTL_DMATINT_A :: DMATCTL_DMATINT_INTERNAL , } } # [doc = "EXTERNAL"] # [inline (always)] pub fn is_dmatctl_dmatint_external (& self) -> bool { * self == DMATCTL_DMATINT_A :: DMATCTL_DMATINT_EXTERNAL } # [doc = "INTERNAL"] # [inline (always)] pub fn is_dmatctl_dmatint_internal (& self) -> bool { * self == DMATCTL_DMATINT_A :: DMATCTL_DMATINT_INTERNAL } } # [doc = "Field `DMATCTL_DMATINT` writer - DMA Trigger by Internal Channel"] pub type DMATCTL_DMATINT_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMATCTL_DMATINT_A > ; impl < 'a , REG , const O : u8 > DMATCTL_DMATINT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "EXTERNAL"] # [inline (always)] pub fn dmatctl_dmatint_external (self) -> & 'a mut crate :: W < REG > { self . variant (DMATCTL_DMATINT_A :: DMATCTL_DMATINT_EXTERNAL) } # [doc = "INTERNAL"] # [inline (always)] pub fn dmatctl_dmatint_internal (self) -> & 'a mut crate :: W < REG > { self . variant (DMATCTL_DMATINT_A :: DMATCTL_DMATINT_INTERNAL) } } impl R { # [doc = "Bits 0:5 - DMA Trigger Select Note: Reference the datasheet of the device to see the specific trigger mapping."] # [inline (always)] pub fn dmatctl_dmatsel (& self) -> DMATCTL_DMATSEL_R { DMATCTL_DMATSEL_R :: new ((self . bits & 0x3f) as u8) } # [doc = "Bit 7 - DMA Trigger by Internal Channel"] # [inline (always)] pub fn dmatctl_dmatint (& self) -> DMATCTL_DMATINT_R { DMATCTL_DMATINT_R :: new (((self . bits >> 7) & 1) != 0) } } impl W { # [doc = "Bits 0:5 - DMA Trigger Select Note: Reference the datasheet of the device to see the specific trigger mapping."] # [inline (always)] # [must_use] pub fn dmatctl_dmatsel (& mut self) -> DMATCTL_DMATSEL_W < DMATCTL_SPEC , 0 > { DMATCTL_DMATSEL_W :: new (self) } # [doc = "Bit 7 - DMA Trigger by Internal Channel"] # [inline (always)] # [must_use] pub fn dmatctl_dmatint (& mut self) -> DMATCTL_DMATINT_W < DMATCTL_SPEC , 7 > { DMATCTL_DMATINT_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "DMA Trigger Select\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmatctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmatctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DMATCTL_SPEC ; impl crate :: RegisterSpec for DMATCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`dmatctl::R`](R) reader structure"] impl crate :: Readable for DMATCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`dmatctl::W`](W) writer structure"] impl crate :: Writable for DMATCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DMATCTL to value 0"] impl crate :: Resettable for DMATCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }