# [doc = "Register `DMAPRIO` reader"] pub type R = crate :: R < DMAPRIO_SPEC > ; # [doc = "Register `DMAPRIO` writer"] pub type W = crate :: W < DMAPRIO_SPEC > ; # [doc = "Field `DMAPRIO_ROUNDROBIN` reader - Round robin. This bit enables the round-robin DMA channel priorities."] pub type DMAPRIO_ROUNDROBIN_R = crate :: BitReader < DMAPRIO_ROUNDROBIN_A > ; # [doc = "Round robin. This bit enables the round-robin DMA channel priorities.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum DMAPRIO_ROUNDROBIN_A { # [doc = "0: DISABLE"] DMAPRIO_ROUNDROBIN_DISABLE = 0 , # [doc = "1: ENABLE"] DMAPRIO_ROUNDROBIN_ENABLE = 1 , } impl From < DMAPRIO_ROUNDROBIN_A > for bool { # [inline (always)] fn from (variant : DMAPRIO_ROUNDROBIN_A) -> Self { variant as u8 != 0 } } impl DMAPRIO_ROUNDROBIN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAPRIO_ROUNDROBIN_A { match self . bits { false => DMAPRIO_ROUNDROBIN_A :: DMAPRIO_ROUNDROBIN_DISABLE , true => DMAPRIO_ROUNDROBIN_A :: DMAPRIO_ROUNDROBIN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_dmaprio_roundrobin_disable (& self) -> bool { * self == DMAPRIO_ROUNDROBIN_A :: DMAPRIO_ROUNDROBIN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_dmaprio_roundrobin_enable (& self) -> bool { * self == DMAPRIO_ROUNDROBIN_A :: DMAPRIO_ROUNDROBIN_ENABLE } } # [doc = "Field `DMAPRIO_ROUNDROBIN` writer - Round robin. This bit enables the round-robin DMA channel priorities."] pub type DMAPRIO_ROUNDROBIN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , DMAPRIO_ROUNDROBIN_A > ; impl < 'a , REG , const O : u8 > DMAPRIO_ROUNDROBIN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn dmaprio_roundrobin_disable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAPRIO_ROUNDROBIN_A :: DMAPRIO_ROUNDROBIN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn dmaprio_roundrobin_enable (self) -> & 'a mut crate :: W < REG > { self . variant (DMAPRIO_ROUNDROBIN_A :: DMAPRIO_ROUNDROBIN_ENABLE) } } # [doc = "Field `DMAPRIO_BURSTSZ` reader - Define the burst size of a block transfer, before the priority is re-evaluated"] pub type DMAPRIO_BURSTSZ_R = crate :: FieldReader < DMAPRIO_BURSTSZ_A > ; # [doc = "Define the burst size of a block transfer, before the priority is re-evaluated\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum DMAPRIO_BURSTSZ_A { # [doc = "0: INFINITI"] DMAPRIO_BURSTSZ_INFINITI = 0 , # [doc = "1: BURST_8"] DMAPRIO_BURSTSZ_BURST_8 = 1 , # [doc = "2: BUSRT_16"] DMAPRIO_BURSTSZ_BUSRT_16 = 2 , # [doc = "3: BURST_32"] DMAPRIO_BURSTSZ_BURST_32 = 3 , } impl From < DMAPRIO_BURSTSZ_A > for u8 { # [inline (always)] fn from (variant : DMAPRIO_BURSTSZ_A) -> Self { variant as _ } } impl crate :: FieldSpec for DMAPRIO_BURSTSZ_A { type Ux = u8 ; } impl DMAPRIO_BURSTSZ_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> DMAPRIO_BURSTSZ_A { match self . bits { 0 => DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_INFINITI , 1 => DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BURST_8 , 2 => DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BUSRT_16 , 3 => DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BURST_32 , _ => unreachable ! () , } } # [doc = "INFINITI"] # [inline (always)] pub fn is_dmaprio_burstsz_infiniti (& self) -> bool { * self == DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_INFINITI } # [doc = "BURST_8"] # [inline (always)] pub fn is_dmaprio_burstsz_burst_8 (& self) -> bool { * self == DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BURST_8 } # [doc = "BUSRT_16"] # [inline (always)] pub fn is_dmaprio_burstsz_busrt_16 (& self) -> bool { * self == DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BUSRT_16 } # [doc = "BURST_32"] # [inline (always)] pub fn is_dmaprio_burstsz_burst_32 (& self) -> bool { * self == DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BURST_32 } } # [doc = "Field `DMAPRIO_BURSTSZ` writer - Define the burst size of a block transfer, before the priority is re-evaluated"] pub type DMAPRIO_BURSTSZ_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , DMAPRIO_BURSTSZ_A > ; impl < 'a , REG , const O : u8 > DMAPRIO_BURSTSZ_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "INFINITI"] # [inline (always)] pub fn dmaprio_burstsz_infiniti (self) -> & 'a mut crate :: W < REG > { self . variant (DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_INFINITI) } # [doc = "BURST_8"] # [inline (always)] pub fn dmaprio_burstsz_burst_8 (self) -> & 'a mut crate :: W < REG > { self . variant (DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BURST_8) } # [doc = "BUSRT_16"] # [inline (always)] pub fn dmaprio_burstsz_busrt_16 (self) -> & 'a mut crate :: W < REG > { self . variant (DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BUSRT_16) } # [doc = "BURST_32"] # [inline (always)] pub fn dmaprio_burstsz_burst_32 (self) -> & 'a mut crate :: W < REG > { self . variant (DMAPRIO_BURSTSZ_A :: DMAPRIO_BURSTSZ_BURST_32) } } impl R { # [doc = "Bit 0 - Round robin. This bit enables the round-robin DMA channel priorities."] # [inline (always)] pub fn dmaprio_roundrobin (& self) -> DMAPRIO_ROUNDROBIN_R { DMAPRIO_ROUNDROBIN_R :: new ((self . bits & 1) != 0) } # [doc = "Bits 16:17 - Define the burst size of a block transfer, before the priority is re-evaluated"] # [inline (always)] pub fn dmaprio_burstsz (& self) -> DMAPRIO_BURSTSZ_R { DMAPRIO_BURSTSZ_R :: new (((self . bits >> 16) & 3) as u8) } } impl W { # [doc = "Bit 0 - Round robin. This bit enables the round-robin DMA channel priorities."] # [inline (always)] # [must_use] pub fn dmaprio_roundrobin (& mut self) -> DMAPRIO_ROUNDROBIN_W < DMAPRIO_SPEC , 0 > { DMAPRIO_ROUNDROBIN_W :: new (self) } # [doc = "Bits 16:17 - Define the burst size of a block transfer, before the priority is re-evaluated"] # [inline (always)] # [must_use] pub fn dmaprio_burstsz (& mut self) -> DMAPRIO_BURSTSZ_W < DMAPRIO_SPEC , 16 > { DMAPRIO_BURSTSZ_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "DMA Channel Priority Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmaprio::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmaprio::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DMAPRIO_SPEC ; impl crate :: RegisterSpec for DMAPRIO_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`dmaprio::R`](R) reader structure"] impl crate :: Readable for DMAPRIO_SPEC { } # [doc = "`write(|w| ..)` method takes [`dmaprio::W`](W) writer structure"] impl crate :: Writable for DMAPRIO_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DMAPRIO to value 0"] impl crate :: Resettable for DMAPRIO_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }