# [doc = "Register `ICLR` writer"] pub type W = crate :: W < ICLR_SPEC > ; # [doc = "DMA Channel 0 interrupt signals that size counter reached zero (DMASZ=0).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ICLR_DMACH0_AW { # [doc = "0: NO_EFFECT"] ICLR_DMACH0_NO_EFFECT = 0 , # [doc = "1: CLR"] ICLR_DMACH0_CLR = 1 , } impl From < ICLR_DMACH0_AW > for bool { # [inline (always)] fn from (variant : ICLR_DMACH0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ICLR_DMACH0` writer - DMA Channel 0 interrupt signals that size counter reached zero (DMASZ=0)."] pub type ICLR_DMACH0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ICLR_DMACH0_AW > ; impl < 'a , REG , const O : u8 > ICLR_DMACH0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iclr_dmach0_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DMACH0_AW :: ICLR_DMACH0_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn iclr_dmach0_clr (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DMACH0_AW :: ICLR_DMACH0_CLR) } } # [doc = "DMA Channel 1 interrupt signals that size counter reached zero (DMASZ=0).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ICLR_DMACH1_AW { # [doc = "0: NO_EFFECT"] ICLR_DMACH1_NO_EFFECT = 0 , # [doc = "1: CLR"] ICLR_DMACH1_CLR = 1 , } impl From < ICLR_DMACH1_AW > for bool { # [inline (always)] fn from (variant : ICLR_DMACH1_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ICLR_DMACH1` writer - DMA Channel 1 interrupt signals that size counter reached zero (DMASZ=0)."] pub type ICLR_DMACH1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ICLR_DMACH1_AW > ; impl < 'a , REG , const O : u8 > ICLR_DMACH1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iclr_dmach1_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DMACH1_AW :: ICLR_DMACH1_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn iclr_dmach1_clr (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DMACH1_AW :: ICLR_DMACH1_CLR) } } # [doc = "DMA Channel 2 interrupt signals that size counter reached zero (DMASZ=0).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ICLR_DMACH2_AW { # [doc = "0: NO_EFFECT"] ICLR_DMACH2_NO_EFFECT = 0 , # [doc = "1: CLR"] ICLR_DMACH2_CLR = 1 , } impl From < ICLR_DMACH2_AW > for bool { # [inline (always)] fn from (variant : ICLR_DMACH2_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ICLR_DMACH2` writer - DMA Channel 2 interrupt signals that size counter reached zero (DMASZ=0)."] pub type ICLR_DMACH2_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ICLR_DMACH2_AW > ; impl < 'a , REG , const O : u8 > ICLR_DMACH2_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iclr_dmach2_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DMACH2_AW :: ICLR_DMACH2_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn iclr_dmach2_clr (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DMACH2_AW :: ICLR_DMACH2_CLR) } } # [doc = "Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ICLR_PREIRQCH0_AW { # [doc = "0: CLR"] ICLR_PREIRQCH0_CLR = 0 , # [doc = "1: SET"] ICLR_PREIRQCH0_SET = 1 , } impl From < ICLR_PREIRQCH0_AW > for bool { # [inline (always)] fn from (variant : ICLR_PREIRQCH0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ICLR_PREIRQCH0` writer - Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold."] pub type ICLR_PREIRQCH0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ICLR_PREIRQCH0_AW > ; impl < 'a , REG , const O : u8 > ICLR_PREIRQCH0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn iclr_preirqch0_clr (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_PREIRQCH0_AW :: ICLR_PREIRQCH0_CLR) } # [doc = "SET"] # [inline (always)] pub fn iclr_preirqch0_set (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_PREIRQCH0_AW :: ICLR_PREIRQCH0_SET) } } # [doc = "DMA address error, SRC address not reachable.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ICLR_ADDRERR_AW { # [doc = "0: CLR"] ICLR_ADDRERR_CLR = 0 , # [doc = "1: SET"] ICLR_ADDRERR_SET = 1 , } impl From < ICLR_ADDRERR_AW > for bool { # [inline (always)] fn from (variant : ICLR_ADDRERR_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ICLR_ADDRERR` writer - DMA address error, SRC address not reachable."] pub type ICLR_ADDRERR_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ICLR_ADDRERR_AW > ; impl < 'a , REG , const O : u8 > ICLR_ADDRERR_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn iclr_addrerr_clr (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_ADDRERR_AW :: ICLR_ADDRERR_CLR) } # [doc = "SET"] # [inline (always)] pub fn iclr_addrerr_set (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_ADDRERR_AW :: ICLR_ADDRERR_SET) } } # [doc = "DMA data error, SRC data might be corrupted (PAR or ECC error).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ICLR_DATAERR_AW { # [doc = "0: CLR"] ICLR_DATAERR_CLR = 0 , # [doc = "1: SET"] ICLR_DATAERR_SET = 1 , } impl From < ICLR_DATAERR_AW > for bool { # [inline (always)] fn from (variant : ICLR_DATAERR_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ICLR_DATAERR` writer - DMA data error, SRC data might be corrupted (PAR or ECC error)."] pub type ICLR_DATAERR_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ICLR_DATAERR_AW > ; impl < 'a , REG , const O : u8 > ICLR_DATAERR_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn iclr_dataerr_clr (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DATAERR_AW :: ICLR_DATAERR_CLR) } # [doc = "SET"] # [inline (always)] pub fn iclr_dataerr_set (self) -> & 'a mut crate :: W < REG > { self . variant (ICLR_DATAERR_AW :: ICLR_DATAERR_SET) } } impl W { # [doc = "Bit 0 - DMA Channel 0 interrupt signals that size counter reached zero (DMASZ=0)."] # [inline (always)] # [must_use] pub fn iclr_dmach0 (& mut self) -> ICLR_DMACH0_W < ICLR_SPEC , 0 > { ICLR_DMACH0_W :: new (self) } # [doc = "Bit 1 - DMA Channel 1 interrupt signals that size counter reached zero (DMASZ=0)."] # [inline (always)] # [must_use] pub fn iclr_dmach1 (& mut self) -> ICLR_DMACH1_W < ICLR_SPEC , 1 > { ICLR_DMACH1_W :: new (self) } # [doc = "Bit 2 - DMA Channel 2 interrupt signals that size counter reached zero (DMASZ=0)."] # [inline (always)] # [must_use] pub fn iclr_dmach2 (& mut self) -> ICLR_DMACH2_W < ICLR_SPEC , 2 > { ICLR_DMACH2_W :: new (self) } # [doc = "Bit 16 - Pre-IRQ for Channel 0. Size counter reached Pre-IRQ threshold."] # [inline (always)] # [must_use] pub fn iclr_preirqch0 (& mut self) -> ICLR_PREIRQCH0_W < ICLR_SPEC , 16 > { ICLR_PREIRQCH0_W :: new (self) } # [doc = "Bit 24 - DMA address error, SRC address not reachable."] # [inline (always)] # [must_use] pub fn iclr_addrerr (& mut self) -> ICLR_ADDRERR_W < ICLR_SPEC , 24 > { ICLR_ADDRERR_W :: new (self) } # [doc = "Bit 25 - DMA data error, SRC data might be corrupted (PAR or ECC error)."] # [inline (always)] # [must_use] pub fn iclr_dataerr (& mut self) -> ICLR_DATAERR_W < ICLR_SPEC , 25 > { ICLR_DATAERR_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`iclr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ICLR_SPEC ; impl crate :: RegisterSpec for ICLR_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`iclr::W`](W) writer structure"] impl crate :: Writable for ICLR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets ICLR to value 0"] impl crate :: Resettable for ICLR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }