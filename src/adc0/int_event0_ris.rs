# [doc = "Register `INT_EVENT0_RIS` reader"] pub type R = crate :: R < INT_EVENT0_RIS_SPEC > ; # [doc = "Field `INT_EVENT0_RIS_OVIFG` reader - Raw interrupt flag for MEMRESx overflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] pub type INT_EVENT0_RIS_OVIFG_R = crate :: BitReader < INT_EVENT0_RIS_OVIFG_A > ; # [doc = "Raw interrupt flag for MEMRESx overflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_OVIFG_A { # [doc = "0: CLR"] INT_EVENT0_RIS_OVIFG_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_OVIFG_SET = 1 , } impl From < INT_EVENT0_RIS_OVIFG_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_OVIFG_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_OVIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_OVIFG_A { match self . bits { false => INT_EVENT0_RIS_OVIFG_A :: INT_EVENT0_RIS_OVIFG_CLR , true => INT_EVENT0_RIS_OVIFG_A :: INT_EVENT0_RIS_OVIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_ovifg_clr (& self) -> bool { * self == INT_EVENT0_RIS_OVIFG_A :: INT_EVENT0_RIS_OVIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_ovifg_set (& self) -> bool { * self == INT_EVENT0_RIS_OVIFG_A :: INT_EVENT0_RIS_OVIFG_SET } } # [doc = "Field `INT_EVENT0_RIS_TOVIFG` reader - Raw interrupt flag for sequence conversion trigger overflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] pub type INT_EVENT0_RIS_TOVIFG_R = crate :: BitReader < INT_EVENT0_RIS_TOVIFG_A > ; # [doc = "Raw interrupt flag for sequence conversion trigger overflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_TOVIFG_A { # [doc = "0: CLR"] INT_EVENT0_RIS_TOVIFG_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_TOVIFG_SET = 1 , } impl From < INT_EVENT0_RIS_TOVIFG_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_TOVIFG_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_TOVIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_TOVIFG_A { match self . bits { false => INT_EVENT0_RIS_TOVIFG_A :: INT_EVENT0_RIS_TOVIFG_CLR , true => INT_EVENT0_RIS_TOVIFG_A :: INT_EVENT0_RIS_TOVIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_tovifg_clr (& self) -> bool { * self == INT_EVENT0_RIS_TOVIFG_A :: INT_EVENT0_RIS_TOVIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_tovifg_set (& self) -> bool { * self == INT_EVENT0_RIS_TOVIFG_A :: INT_EVENT0_RIS_TOVIFG_SET } } # [doc = "Field `INT_EVENT0_RIS_HIGHIFG` reader - Raw interrupt flag for the MEMRESx result register being higher than the WCHIGHx threshold of the window comparator. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] pub type INT_EVENT0_RIS_HIGHIFG_R = crate :: BitReader < INT_EVENT0_RIS_HIGHIFG_A > ; # [doc = "Raw interrupt flag for the MEMRESx result register being higher than the WCHIGHx threshold of the window comparator. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_HIGHIFG_A { # [doc = "0: CLR"] INT_EVENT0_RIS_HIGHIFG_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_HIGHIFG_SET = 1 , } impl From < INT_EVENT0_RIS_HIGHIFG_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_HIGHIFG_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_HIGHIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_HIGHIFG_A { match self . bits { false => INT_EVENT0_RIS_HIGHIFG_A :: INT_EVENT0_RIS_HIGHIFG_CLR , true => INT_EVENT0_RIS_HIGHIFG_A :: INT_EVENT0_RIS_HIGHIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_highifg_clr (& self) -> bool { * self == INT_EVENT0_RIS_HIGHIFG_A :: INT_EVENT0_RIS_HIGHIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_highifg_set (& self) -> bool { * self == INT_EVENT0_RIS_HIGHIFG_A :: INT_EVENT0_RIS_HIGHIFG_SET } } # [doc = "Field `INT_EVENT0_RIS_LOWIFG` reader - Raw interrupt flag for the MEMRESx result register being below than the WCLOWx threshold of the window comparator. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] pub type INT_EVENT0_RIS_LOWIFG_R = crate :: BitReader < INT_EVENT0_RIS_LOWIFG_A > ; # [doc = "Raw interrupt flag for the MEMRESx result register being below than the WCLOWx threshold of the window comparator. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_LOWIFG_A { # [doc = "0: CLR"] INT_EVENT0_RIS_LOWIFG_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_LOWIFG_SET = 1 , } impl From < INT_EVENT0_RIS_LOWIFG_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_LOWIFG_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_LOWIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_LOWIFG_A { match self . bits { false => INT_EVENT0_RIS_LOWIFG_A :: INT_EVENT0_RIS_LOWIFG_CLR , true => INT_EVENT0_RIS_LOWIFG_A :: INT_EVENT0_RIS_LOWIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_lowifg_clr (& self) -> bool { * self == INT_EVENT0_RIS_LOWIFG_A :: INT_EVENT0_RIS_LOWIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_lowifg_set (& self) -> bool { * self == INT_EVENT0_RIS_LOWIFG_A :: INT_EVENT0_RIS_LOWIFG_SET } } # [doc = "Field `INT_EVENT0_RIS_INIFG` reader - Mask INIFG in MIS_EX register."] pub type INT_EVENT0_RIS_INIFG_R = crate :: BitReader < INT_EVENT0_RIS_INIFG_A > ; # [doc = "Mask INIFG in MIS_EX register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_INIFG_A { # [doc = "0: CLR"] INT_EVENT0_RIS_INIFG_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_INIFG_SET = 1 , } impl From < INT_EVENT0_RIS_INIFG_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_INIFG_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_INIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_INIFG_A { match self . bits { false => INT_EVENT0_RIS_INIFG_A :: INT_EVENT0_RIS_INIFG_CLR , true => INT_EVENT0_RIS_INIFG_A :: INT_EVENT0_RIS_INIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_inifg_clr (& self) -> bool { * self == INT_EVENT0_RIS_INIFG_A :: INT_EVENT0_RIS_INIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_inifg_set (& self) -> bool { * self == INT_EVENT0_RIS_INIFG_A :: INT_EVENT0_RIS_INIFG_SET } } # [doc = "Field `INT_EVENT0_RIS_DMADONE` reader - Raw interrupt flag for DMADONE. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] pub type INT_EVENT0_RIS_DMADONE_R = crate :: BitReader < INT_EVENT0_RIS_DMADONE_A > ; # [doc = "Raw interrupt flag for DMADONE. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DMADONE_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DMADONE_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DMADONE_SET = 1 , } impl From < INT_EVENT0_RIS_DMADONE_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DMADONE_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DMADONE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DMADONE_A { match self . bits { false => INT_EVENT0_RIS_DMADONE_A :: INT_EVENT0_RIS_DMADONE_CLR , true => INT_EVENT0_RIS_DMADONE_A :: INT_EVENT0_RIS_DMADONE_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dmadone_clr (& self) -> bool { * self == INT_EVENT0_RIS_DMADONE_A :: INT_EVENT0_RIS_DMADONE_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dmadone_set (& self) -> bool { * self == INT_EVENT0_RIS_DMADONE_A :: INT_EVENT0_RIS_DMADONE_SET } } # [doc = "Field `INT_EVENT0_RIS_UVIFG` reader - Raw interrupt flag for MEMRESx underflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR is set to 1."] pub type INT_EVENT0_RIS_UVIFG_R = crate :: BitReader < INT_EVENT0_RIS_UVIFG_A > ; # [doc = "Raw interrupt flag for MEMRESx underflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR is set to 1.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_UVIFG_A { # [doc = "0: CLR"] INT_EVENT0_RIS_UVIFG_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_UVIFG_SET = 1 , } impl From < INT_EVENT0_RIS_UVIFG_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_UVIFG_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_UVIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_UVIFG_A { match self . bits { false => INT_EVENT0_RIS_UVIFG_A :: INT_EVENT0_RIS_UVIFG_CLR , true => INT_EVENT0_RIS_UVIFG_A :: INT_EVENT0_RIS_UVIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_uvifg_clr (& self) -> bool { * self == INT_EVENT0_RIS_UVIFG_A :: INT_EVENT0_RIS_UVIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_uvifg_set (& self) -> bool { * self == INT_EVENT0_RIS_UVIFG_A :: INT_EVENT0_RIS_UVIFG_SET } } # [doc = "Field `INT_EVENT0_RIS_MEMRESIFG0` reader - Raw interrupt status for MEMRES0. This bit is set to 1 when MEMRES0 is loaded with a new conversion result. Reading MEMRES0 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] pub type INT_EVENT0_RIS_MEMRESIFG0_R = crate :: BitReader < INT_EVENT0_RIS_MEMRESIFG0_A > ; # [doc = "Raw interrupt status for MEMRES0. This bit is set to 1 when MEMRES0 is loaded with a new conversion result. Reading MEMRES0 register will clear this bit, or when the corresponding bit in ICLR is set to 1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_MEMRESIFG0_A { # [doc = "0: CLR"] INT_EVENT0_RIS_MEMRESIFG0_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_MEMRESIFG0_SET = 1 , } impl From < INT_EVENT0_RIS_MEMRESIFG0_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_MEMRESIFG0_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_MEMRESIFG0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_MEMRESIFG0_A { match self . bits { false => INT_EVENT0_RIS_MEMRESIFG0_A :: INT_EVENT0_RIS_MEMRESIFG0_CLR , true => INT_EVENT0_RIS_MEMRESIFG0_A :: INT_EVENT0_RIS_MEMRESIFG0_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_memresifg0_clr (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG0_A :: INT_EVENT0_RIS_MEMRESIFG0_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_memresifg0_set (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG0_A :: INT_EVENT0_RIS_MEMRESIFG0_SET } } # [doc = "Field `INT_EVENT0_RIS_MEMRESIFG1` reader - Raw interrupt status for MEMRES1. This bit is set to 1 when MEMRES1 is loaded with a new conversion result. Reading MEMRES1 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] pub type INT_EVENT0_RIS_MEMRESIFG1_R = crate :: BitReader < INT_EVENT0_RIS_MEMRESIFG1_A > ; # [doc = "Raw interrupt status for MEMRES1. This bit is set to 1 when MEMRES1 is loaded with a new conversion result. Reading MEMRES1 register will clear this bit, or when the corresponding bit in ICLR is set to 1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_MEMRESIFG1_A { # [doc = "0: CLR"] INT_EVENT0_RIS_MEMRESIFG1_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_MEMRESIFG1_SET = 1 , } impl From < INT_EVENT0_RIS_MEMRESIFG1_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_MEMRESIFG1_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_MEMRESIFG1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_MEMRESIFG1_A { match self . bits { false => INT_EVENT0_RIS_MEMRESIFG1_A :: INT_EVENT0_RIS_MEMRESIFG1_CLR , true => INT_EVENT0_RIS_MEMRESIFG1_A :: INT_EVENT0_RIS_MEMRESIFG1_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_memresifg1_clr (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG1_A :: INT_EVENT0_RIS_MEMRESIFG1_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_memresifg1_set (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG1_A :: INT_EVENT0_RIS_MEMRESIFG1_SET } } # [doc = "Field `INT_EVENT0_RIS_MEMRESIFG2` reader - Raw interrupt status for MEMRES2. This bit is set to 1 when MEMRES2 is loaded with a new conversion result. Reading MEMRES2 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] pub type INT_EVENT0_RIS_MEMRESIFG2_R = crate :: BitReader < INT_EVENT0_RIS_MEMRESIFG2_A > ; # [doc = "Raw interrupt status for MEMRES2. This bit is set to 1 when MEMRES2 is loaded with a new conversion result. Reading MEMRES2 register will clear this bit, or when the corresponding bit in ICLR is set to 1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_MEMRESIFG2_A { # [doc = "0: CLR"] INT_EVENT0_RIS_MEMRESIFG2_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_MEMRESIFG2_SET = 1 , } impl From < INT_EVENT0_RIS_MEMRESIFG2_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_MEMRESIFG2_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_MEMRESIFG2_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_MEMRESIFG2_A { match self . bits { false => INT_EVENT0_RIS_MEMRESIFG2_A :: INT_EVENT0_RIS_MEMRESIFG2_CLR , true => INT_EVENT0_RIS_MEMRESIFG2_A :: INT_EVENT0_RIS_MEMRESIFG2_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_memresifg2_clr (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG2_A :: INT_EVENT0_RIS_MEMRESIFG2_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_memresifg2_set (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG2_A :: INT_EVENT0_RIS_MEMRESIFG2_SET } } # [doc = "Field `INT_EVENT0_RIS_MEMRESIFG3` reader - Raw interrupt status for MEMRES3. This bit is set to 1 when MEMRES3 is loaded with a new conversion result. Reading MEMRES3 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] pub type INT_EVENT0_RIS_MEMRESIFG3_R = crate :: BitReader < INT_EVENT0_RIS_MEMRESIFG3_A > ; # [doc = "Raw interrupt status for MEMRES3. This bit is set to 1 when MEMRES3 is loaded with a new conversion result. Reading MEMRES3 register will clear this bit, or when the corresponding bit in ICLR is set to 1\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_MEMRESIFG3_A { # [doc = "0: CLR"] INT_EVENT0_RIS_MEMRESIFG3_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_MEMRESIFG3_SET = 1 , } impl From < INT_EVENT0_RIS_MEMRESIFG3_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_MEMRESIFG3_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_MEMRESIFG3_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_MEMRESIFG3_A { match self . bits { false => INT_EVENT0_RIS_MEMRESIFG3_A :: INT_EVENT0_RIS_MEMRESIFG3_CLR , true => INT_EVENT0_RIS_MEMRESIFG3_A :: INT_EVENT0_RIS_MEMRESIFG3_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_memresifg3_clr (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG3_A :: INT_EVENT0_RIS_MEMRESIFG3_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_memresifg3_set (& self) -> bool { * self == INT_EVENT0_RIS_MEMRESIFG3_A :: INT_EVENT0_RIS_MEMRESIFG3_SET } } impl R { # [doc = "Bit 0 - Raw interrupt flag for MEMRESx overflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] # [inline (always)] pub fn int_event0_ris_ovifg (& self) -> INT_EVENT0_RIS_OVIFG_R { INT_EVENT0_RIS_OVIFG_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Raw interrupt flag for sequence conversion trigger overflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] # [inline (always)] pub fn int_event0_ris_tovifg (& self) -> INT_EVENT0_RIS_TOVIFG_R { INT_EVENT0_RIS_TOVIFG_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Raw interrupt flag for the MEMRESx result register being higher than the WCHIGHx threshold of the window comparator. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] # [inline (always)] pub fn int_event0_ris_highifg (& self) -> INT_EVENT0_RIS_HIGHIFG_R { INT_EVENT0_RIS_HIGHIFG_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Raw interrupt flag for the MEMRESx result register being below than the WCLOWx threshold of the window comparator. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] # [inline (always)] pub fn int_event0_ris_lowifg (& self) -> INT_EVENT0_RIS_LOWIFG_R { INT_EVENT0_RIS_LOWIFG_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Mask INIFG in MIS_EX register."] # [inline (always)] pub fn int_event0_ris_inifg (& self) -> INT_EVENT0_RIS_INIFG_R { INT_EVENT0_RIS_INIFG_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Raw interrupt flag for DMADONE. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR_EX is set to 1."] # [inline (always)] pub fn int_event0_ris_dmadone (& self) -> INT_EVENT0_RIS_DMADONE_R { INT_EVENT0_RIS_DMADONE_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Raw interrupt flag for MEMRESx underflow. This bit is reset to 0 by IIDX read or when corresponding bit in ICLR is set to 1."] # [inline (always)] pub fn int_event0_ris_uvifg (& self) -> INT_EVENT0_RIS_UVIFG_R { INT_EVENT0_RIS_UVIFG_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 8 - Raw interrupt status for MEMRES0. This bit is set to 1 when MEMRES0 is loaded with a new conversion result. Reading MEMRES0 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] # [inline (always)] pub fn int_event0_ris_memresifg0 (& self) -> INT_EVENT0_RIS_MEMRESIFG0_R { INT_EVENT0_RIS_MEMRESIFG0_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Raw interrupt status for MEMRES1. This bit is set to 1 when MEMRES1 is loaded with a new conversion result. Reading MEMRES1 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] # [inline (always)] pub fn int_event0_ris_memresifg1 (& self) -> INT_EVENT0_RIS_MEMRESIFG1_R { INT_EVENT0_RIS_MEMRESIFG1_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Raw interrupt status for MEMRES2. This bit is set to 1 when MEMRES2 is loaded with a new conversion result. Reading MEMRES2 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] # [inline (always)] pub fn int_event0_ris_memresifg2 (& self) -> INT_EVENT0_RIS_MEMRESIFG2_R { INT_EVENT0_RIS_MEMRESIFG2_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Raw interrupt status for MEMRES3. This bit is set to 1 when MEMRES3 is loaded with a new conversion result. Reading MEMRES3 register will clear this bit, or when the corresponding bit in ICLR is set to 1"] # [inline (always)] pub fn int_event0_ris_memresifg3 (& self) -> INT_EVENT0_RIS_MEMRESIFG3_R { INT_EVENT0_RIS_MEMRESIFG3_R :: new (((self . bits >> 11) & 1) != 0) } } # [doc = "Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_RIS_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_ris::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_RIS_SPEC { } # [doc = "`reset()` method sets INT_EVENT0_RIS to value 0"] impl crate :: Resettable for INT_EVENT0_RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }