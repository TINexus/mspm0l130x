# [doc = "Register `SCOMP1` reader"] pub type R = crate :: R < SCOMP1_SPEC > ; # [doc = "Register `SCOMP1` writer"] pub type W = crate :: W < SCOMP1_SPEC > ; # [doc = "Field `SCOMP1_VAL` reader - Specifies the number of sample clocks. When VAL = 0 or 1, number of sample clocks = Sample clock divide value. When VAL &amp;gt; 1, number of sample clocks = VAL x Sample clock divide value. Note: Sample clock divide value is not the value written to SCLKDIV but the actual divide value (SCLKDIV = 2 implies divide value is 4). Example: VAL = 4, SCLKDIV = 3 implies 32 sample clock cycles."] pub type SCOMP1_VAL_R = crate :: FieldReader < u16 > ; # [doc = "Field `SCOMP1_VAL` writer - Specifies the number of sample clocks. When VAL = 0 or 1, number of sample clocks = Sample clock divide value. When VAL &amp;gt; 1, number of sample clocks = VAL x Sample clock divide value. Note: Sample clock divide value is not the value written to SCLKDIV but the actual divide value (SCLKDIV = 2 implies divide value is 4). Example: VAL = 4, SCLKDIV = 3 implies 32 sample clock cycles."] pub type SCOMP1_VAL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 10 , O , u16 > ; impl R { # [doc = "Bits 0:9 - Specifies the number of sample clocks. When VAL = 0 or 1, number of sample clocks = Sample clock divide value. When VAL &amp;gt; 1, number of sample clocks = VAL x Sample clock divide value. Note: Sample clock divide value is not the value written to SCLKDIV but the actual divide value (SCLKDIV = 2 implies divide value is 4). Example: VAL = 4, SCLKDIV = 3 implies 32 sample clock cycles."] # [inline (always)] pub fn scomp1_val (& self) -> SCOMP1_VAL_R { SCOMP1_VAL_R :: new ((self . bits & 0x03ff) as u16) } } impl W { # [doc = "Bits 0:9 - Specifies the number of sample clocks. When VAL = 0 or 1, number of sample clocks = Sample clock divide value. When VAL &amp;gt; 1, number of sample clocks = VAL x Sample clock divide value. Note: Sample clock divide value is not the value written to SCLKDIV but the actual divide value (SCLKDIV = 2 implies divide value is 4). Example: VAL = 4, SCLKDIV = 3 implies 32 sample clock cycles."] # [inline (always)] # [must_use] pub fn scomp1_val (& mut self) -> SCOMP1_VAL_W < SCOMP1_SPEC , 0 > { SCOMP1_VAL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Sample Time Compare 1 Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`scomp1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`scomp1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SCOMP1_SPEC ; impl crate :: RegisterSpec for SCOMP1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`scomp1::R`](R) reader structure"] impl crate :: Readable for SCOMP1_SPEC { } # [doc = "`write(|w| ..)` method takes [`scomp1::W`](W) writer structure"] impl crate :: Writable for SCOMP1_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SCOMP1 to value 0"] impl crate :: Resettable for SCOMP1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }