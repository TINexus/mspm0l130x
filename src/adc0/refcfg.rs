# [doc = "Register `REFCFG` reader"] pub type R = crate :: R < REFCFG_SPEC > ; # [doc = "Register `REFCFG` writer"] pub type W = crate :: W < REFCFG_SPEC > ; # [doc = "Field `REFCFG_REFEN` reader - Reference buffer enable"] pub type REFCFG_REFEN_R = crate :: BitReader ; # [doc = "Field `REFCFG_REFEN` writer - Reference buffer enable"] pub type REFCFG_REFEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `REFCFG_REFVSEL` reader - Configures reference buffer output voltage."] pub type REFCFG_REFVSEL_R = crate :: BitReader ; # [doc = "Field `REFCFG_REFVSEL` writer - Configures reference buffer output voltage."] pub type REFCFG_REFVSEL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `REFCFG_IBPROG` reader - Configures reference buffer bias current output value."] pub type REFCFG_IBPROG_R = crate :: FieldReader ; # [doc = "Field `REFCFG_IBPROG` writer - Configures reference buffer bias current output value."] pub type REFCFG_IBPROG_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O > ; impl R { # [doc = "Bit 0 - Reference buffer enable"] # [inline (always)] pub fn refcfg_refen (& self) -> REFCFG_REFEN_R { REFCFG_REFEN_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Configures reference buffer output voltage."] # [inline (always)] pub fn refcfg_refvsel (& self) -> REFCFG_REFVSEL_R { REFCFG_REFVSEL_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bits 3:4 - Configures reference buffer bias current output value."] # [inline (always)] pub fn refcfg_ibprog (& self) -> REFCFG_IBPROG_R { REFCFG_IBPROG_R :: new (((self . bits >> 3) & 3) as u8) } } impl W { # [doc = "Bit 0 - Reference buffer enable"] # [inline (always)] # [must_use] pub fn refcfg_refen (& mut self) -> REFCFG_REFEN_W < REFCFG_SPEC , 0 > { REFCFG_REFEN_W :: new (self) } # [doc = "Bit 1 - Configures reference buffer output voltage."] # [inline (always)] # [must_use] pub fn refcfg_refvsel (& mut self) -> REFCFG_REFVSEL_W < REFCFG_SPEC , 1 > { REFCFG_REFVSEL_W :: new (self) } # [doc = "Bits 3:4 - Configures reference buffer bias current output value."] # [inline (always)] # [must_use] pub fn refcfg_ibprog (& mut self) -> REFCFG_IBPROG_W < REFCFG_SPEC , 3 > { REFCFG_IBPROG_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Reference Buffer Configuration Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`refcfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`refcfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct REFCFG_SPEC ; impl crate :: RegisterSpec for REFCFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`refcfg::R`](R) reader structure"] impl crate :: Readable for REFCFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`refcfg::W`](W) writer structure"] impl crate :: Writable for REFCFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets REFCFG to value 0"] impl crate :: Resettable for REFCFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }