# [doc = "Register `CTL1` reader"] pub type R = crate :: R < CTL1_SPEC > ; # [doc = "Register `CTL1` writer"] pub type W = crate :: W < CTL1_SPEC > ; # [doc = "Field `CTL1_TRIGSRC` reader - Sample trigger source"] pub type CTL1_TRIGSRC_R = crate :: BitReader < CTL1_TRIGSRC_A > ; # [doc = "Sample trigger source\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTL1_TRIGSRC_A { # [doc = "0: SOFTWARE"] CTL1_TRIGSRC_SOFTWARE = 0 , # [doc = "1: EVENT"] CTL1_TRIGSRC_EVENT = 1 , } impl From < CTL1_TRIGSRC_A > for bool { # [inline (always)] fn from (variant : CTL1_TRIGSRC_A) -> Self { variant as u8 != 0 } } impl CTL1_TRIGSRC_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_TRIGSRC_A { match self . bits { false => CTL1_TRIGSRC_A :: CTL1_TRIGSRC_SOFTWARE , true => CTL1_TRIGSRC_A :: CTL1_TRIGSRC_EVENT , } } # [doc = "SOFTWARE"] # [inline (always)] pub fn is_ctl1_trigsrc_software (& self) -> bool { * self == CTL1_TRIGSRC_A :: CTL1_TRIGSRC_SOFTWARE } # [doc = "EVENT"] # [inline (always)] pub fn is_ctl1_trigsrc_event (& self) -> bool { * self == CTL1_TRIGSRC_A :: CTL1_TRIGSRC_EVENT } } # [doc = "Field `CTL1_TRIGSRC` writer - Sample trigger source"] pub type CTL1_TRIGSRC_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CTL1_TRIGSRC_A > ; impl < 'a , REG , const O : u8 > CTL1_TRIGSRC_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "SOFTWARE"] # [inline (always)] pub fn ctl1_trigsrc_software (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_TRIGSRC_A :: CTL1_TRIGSRC_SOFTWARE) } # [doc = "EVENT"] # [inline (always)] pub fn ctl1_trigsrc_event (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_TRIGSRC_A :: CTL1_TRIGSRC_EVENT) } } # [doc = "Field `CTL1_SC` reader - Start of conversion"] pub type CTL1_SC_R = crate :: BitReader < CTL1_SC_A > ; # [doc = "Start of conversion\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTL1_SC_A { # [doc = "0: STOP"] CTL1_SC_STOP = 0 , # [doc = "1: START"] CTL1_SC_START = 1 , } impl From < CTL1_SC_A > for bool { # [inline (always)] fn from (variant : CTL1_SC_A) -> Self { variant as u8 != 0 } } impl CTL1_SC_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_SC_A { match self . bits { false => CTL1_SC_A :: CTL1_SC_STOP , true => CTL1_SC_A :: CTL1_SC_START , } } # [doc = "STOP"] # [inline (always)] pub fn is_ctl1_sc_stop (& self) -> bool { * self == CTL1_SC_A :: CTL1_SC_STOP } # [doc = "START"] # [inline (always)] pub fn is_ctl1_sc_start (& self) -> bool { * self == CTL1_SC_A :: CTL1_SC_START } } # [doc = "Field `CTL1_SC` writer - Start of conversion"] pub type CTL1_SC_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CTL1_SC_A > ; impl < 'a , REG , const O : u8 > CTL1_SC_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "STOP"] # [inline (always)] pub fn ctl1_sc_stop (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_SC_A :: CTL1_SC_STOP) } # [doc = "START"] # [inline (always)] pub fn ctl1_sc_start (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_SC_A :: CTL1_SC_START) } } # [doc = "Field `CTL1_CONSEQ` reader - Conversion sequence mode"] pub type CTL1_CONSEQ_R = crate :: FieldReader < CTL1_CONSEQ_A > ; # [doc = "Conversion sequence mode\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CTL1_CONSEQ_A { # [doc = "0: SINGLE"] CTL1_CONSEQ_SINGLE = 0 , # [doc = "1: SEQUENCE"] CTL1_CONSEQ_SEQUENCE = 1 , # [doc = "2: REPEATSINGLE"] CTL1_CONSEQ_REPEATSINGLE = 2 , # [doc = "3: REPEATSEQUENCE"] CTL1_CONSEQ_REPEATSEQUENCE = 3 , } impl From < CTL1_CONSEQ_A > for u8 { # [inline (always)] fn from (variant : CTL1_CONSEQ_A) -> Self { variant as _ } } impl crate :: FieldSpec for CTL1_CONSEQ_A { type Ux = u8 ; } impl CTL1_CONSEQ_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_CONSEQ_A { match self . bits { 0 => CTL1_CONSEQ_A :: CTL1_CONSEQ_SINGLE , 1 => CTL1_CONSEQ_A :: CTL1_CONSEQ_SEQUENCE , 2 => CTL1_CONSEQ_A :: CTL1_CONSEQ_REPEATSINGLE , 3 => CTL1_CONSEQ_A :: CTL1_CONSEQ_REPEATSEQUENCE , _ => unreachable ! () , } } # [doc = "SINGLE"] # [inline (always)] pub fn is_ctl1_conseq_single (& self) -> bool { * self == CTL1_CONSEQ_A :: CTL1_CONSEQ_SINGLE } # [doc = "SEQUENCE"] # [inline (always)] pub fn is_ctl1_conseq_sequence (& self) -> bool { * self == CTL1_CONSEQ_A :: CTL1_CONSEQ_SEQUENCE } # [doc = "REPEATSINGLE"] # [inline (always)] pub fn is_ctl1_conseq_repeatsingle (& self) -> bool { * self == CTL1_CONSEQ_A :: CTL1_CONSEQ_REPEATSINGLE } # [doc = "REPEATSEQUENCE"] # [inline (always)] pub fn is_ctl1_conseq_repeatsequence (& self) -> bool { * self == CTL1_CONSEQ_A :: CTL1_CONSEQ_REPEATSEQUENCE } } # [doc = "Field `CTL1_CONSEQ` writer - Conversion sequence mode"] pub type CTL1_CONSEQ_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CTL1_CONSEQ_A > ; impl < 'a , REG , const O : u8 > CTL1_CONSEQ_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "SINGLE"] # [inline (always)] pub fn ctl1_conseq_single (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_CONSEQ_A :: CTL1_CONSEQ_SINGLE) } # [doc = "SEQUENCE"] # [inline (always)] pub fn ctl1_conseq_sequence (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_CONSEQ_A :: CTL1_CONSEQ_SEQUENCE) } # [doc = "REPEATSINGLE"] # [inline (always)] pub fn ctl1_conseq_repeatsingle (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_CONSEQ_A :: CTL1_CONSEQ_REPEATSINGLE) } # [doc = "REPEATSEQUENCE"] # [inline (always)] pub fn ctl1_conseq_repeatsequence (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_CONSEQ_A :: CTL1_CONSEQ_REPEATSEQUENCE) } } # [doc = "Field `CTL1_SAMPMODE` reader - Sample mode. This bit selects the source of the sampling signal. MANUAL option is not valid when TRIGSRC is selected as hardware event trigger."] pub type CTL1_SAMPMODE_R = crate :: BitReader < CTL1_SAMPMODE_A > ; # [doc = "Sample mode. This bit selects the source of the sampling signal. MANUAL option is not valid when TRIGSRC is selected as hardware event trigger.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTL1_SAMPMODE_A { # [doc = "0: AUTO"] CTL1_SAMPMODE_AUTO = 0 , # [doc = "1: MANUAL"] CTL1_SAMPMODE_MANUAL = 1 , } impl From < CTL1_SAMPMODE_A > for bool { # [inline (always)] fn from (variant : CTL1_SAMPMODE_A) -> Self { variant as u8 != 0 } } impl CTL1_SAMPMODE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_SAMPMODE_A { match self . bits { false => CTL1_SAMPMODE_A :: CTL1_SAMPMODE_AUTO , true => CTL1_SAMPMODE_A :: CTL1_SAMPMODE_MANUAL , } } # [doc = "AUTO"] # [inline (always)] pub fn is_ctl1_sampmode_auto (& self) -> bool { * self == CTL1_SAMPMODE_A :: CTL1_SAMPMODE_AUTO } # [doc = "MANUAL"] # [inline (always)] pub fn is_ctl1_sampmode_manual (& self) -> bool { * self == CTL1_SAMPMODE_A :: CTL1_SAMPMODE_MANUAL } } # [doc = "Field `CTL1_SAMPMODE` writer - Sample mode. This bit selects the source of the sampling signal. MANUAL option is not valid when TRIGSRC is selected as hardware event trigger."] pub type CTL1_SAMPMODE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CTL1_SAMPMODE_A > ; impl < 'a , REG , const O : u8 > CTL1_SAMPMODE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "AUTO"] # [inline (always)] pub fn ctl1_sampmode_auto (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_SAMPMODE_A :: CTL1_SAMPMODE_AUTO) } # [doc = "MANUAL"] # [inline (always)] pub fn ctl1_sampmode_manual (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_SAMPMODE_A :: CTL1_SAMPMODE_MANUAL) } } # [doc = "Field `CTL1_AVGN` reader - Hardware averager numerator. Selects number of conversions to accumulate for current MEMCTLx and then it is divided by AVGD. Result will be stored in MEMRESx."] pub type CTL1_AVGN_R = crate :: FieldReader < CTL1_AVGN_A > ; # [doc = "Hardware averager numerator. Selects number of conversions to accumulate for current MEMCTLx and then it is divided by AVGD. Result will be stored in MEMRESx.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CTL1_AVGN_A { # [doc = "0: DISABLE"] CTL1_AVGN_DISABLE = 0 , # [doc = "1: AVG_2"] CTL1_AVGN_AVG_2 = 1 , # [doc = "2: AVG_4"] CTL1_AVGN_AVG_4 = 2 , # [doc = "3: AVG_8"] CTL1_AVGN_AVG_8 = 3 , # [doc = "4: AVG_16"] CTL1_AVGN_AVG_16 = 4 , # [doc = "5: AVG_32"] CTL1_AVGN_AVG_32 = 5 , # [doc = "6: AVG_64"] CTL1_AVGN_AVG_64 = 6 , # [doc = "7: AVG_128"] CTL1_AVGN_AVG_128 = 7 , } impl From < CTL1_AVGN_A > for u8 { # [inline (always)] fn from (variant : CTL1_AVGN_A) -> Self { variant as _ } } impl crate :: FieldSpec for CTL1_AVGN_A { type Ux = u8 ; } impl CTL1_AVGN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_AVGN_A { match self . bits { 0 => CTL1_AVGN_A :: CTL1_AVGN_DISABLE , 1 => CTL1_AVGN_A :: CTL1_AVGN_AVG_2 , 2 => CTL1_AVGN_A :: CTL1_AVGN_AVG_4 , 3 => CTL1_AVGN_A :: CTL1_AVGN_AVG_8 , 4 => CTL1_AVGN_A :: CTL1_AVGN_AVG_16 , 5 => CTL1_AVGN_A :: CTL1_AVGN_AVG_32 , 6 => CTL1_AVGN_A :: CTL1_AVGN_AVG_64 , 7 => CTL1_AVGN_A :: CTL1_AVGN_AVG_128 , _ => unreachable ! () , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_ctl1_avgn_disable (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_DISABLE } # [doc = "AVG_2"] # [inline (always)] pub fn is_ctl1_avgn_avg_2 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_2 } # [doc = "AVG_4"] # [inline (always)] pub fn is_ctl1_avgn_avg_4 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_4 } # [doc = "AVG_8"] # [inline (always)] pub fn is_ctl1_avgn_avg_8 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_8 } # [doc = "AVG_16"] # [inline (always)] pub fn is_ctl1_avgn_avg_16 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_16 } # [doc = "AVG_32"] # [inline (always)] pub fn is_ctl1_avgn_avg_32 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_32 } # [doc = "AVG_64"] # [inline (always)] pub fn is_ctl1_avgn_avg_64 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_64 } # [doc = "AVG_128"] # [inline (always)] pub fn is_ctl1_avgn_avg_128 (& self) -> bool { * self == CTL1_AVGN_A :: CTL1_AVGN_AVG_128 } } # [doc = "Field `CTL1_AVGN` writer - Hardware averager numerator. Selects number of conversions to accumulate for current MEMCTLx and then it is divided by AVGD. Result will be stored in MEMRESx."] pub type CTL1_AVGN_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , CTL1_AVGN_A > ; impl < 'a , REG , const O : u8 > CTL1_AVGN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLE"] # [inline (always)] pub fn ctl1_avgn_disable (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_DISABLE) } # [doc = "AVG_2"] # [inline (always)] pub fn ctl1_avgn_avg_2 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_2) } # [doc = "AVG_4"] # [inline (always)] pub fn ctl1_avgn_avg_4 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_4) } # [doc = "AVG_8"] # [inline (always)] pub fn ctl1_avgn_avg_8 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_8) } # [doc = "AVG_16"] # [inline (always)] pub fn ctl1_avgn_avg_16 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_16) } # [doc = "AVG_32"] # [inline (always)] pub fn ctl1_avgn_avg_32 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_32) } # [doc = "AVG_64"] # [inline (always)] pub fn ctl1_avgn_avg_64 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_64) } # [doc = "AVG_128"] # [inline (always)] pub fn ctl1_avgn_avg_128 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGN_A :: CTL1_AVGN_AVG_128) } } # [doc = "Field `CTL1_AVGD` reader - Hardware averager denominator. The number to divide the accumulated value by (this is a shift). Note result register is maximum of 16-bits long so if not shifted appropirately result will be truncated."] pub type CTL1_AVGD_R = crate :: FieldReader < CTL1_AVGD_A > ; # [doc = "Hardware averager denominator. The number to divide the accumulated value by (this is a shift). Note result register is maximum of 16-bits long so if not shifted appropirately result will be truncated.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CTL1_AVGD_A { # [doc = "0: SHIFT0"] CTL1_AVGD_SHIFT0 = 0 , # [doc = "1: SHIFT1"] CTL1_AVGD_SHIFT1 = 1 , # [doc = "2: SHIFT2"] CTL1_AVGD_SHIFT2 = 2 , # [doc = "3: SHIFT3"] CTL1_AVGD_SHIFT3 = 3 , # [doc = "4: SHIFT4"] CTL1_AVGD_SHIFT4 = 4 , # [doc = "5: SHIFT5"] CTL1_AVGD_SHIFT5 = 5 , # [doc = "6: SHIFT6"] CTL1_AVGD_SHIFT6 = 6 , # [doc = "7: SHIFT7"] CTL1_AVGD_SHIFT7 = 7 , } impl From < CTL1_AVGD_A > for u8 { # [inline (always)] fn from (variant : CTL1_AVGD_A) -> Self { variant as _ } } impl crate :: FieldSpec for CTL1_AVGD_A { type Ux = u8 ; } impl CTL1_AVGD_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL1_AVGD_A { match self . bits { 0 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT0 , 1 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT1 , 2 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT2 , 3 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT3 , 4 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT4 , 5 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT5 , 6 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT6 , 7 => CTL1_AVGD_A :: CTL1_AVGD_SHIFT7 , _ => unreachable ! () , } } # [doc = "SHIFT0"] # [inline (always)] pub fn is_ctl1_avgd_shift0 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT0 } # [doc = "SHIFT1"] # [inline (always)] pub fn is_ctl1_avgd_shift1 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT1 } # [doc = "SHIFT2"] # [inline (always)] pub fn is_ctl1_avgd_shift2 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT2 } # [doc = "SHIFT3"] # [inline (always)] pub fn is_ctl1_avgd_shift3 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT3 } # [doc = "SHIFT4"] # [inline (always)] pub fn is_ctl1_avgd_shift4 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT4 } # [doc = "SHIFT5"] # [inline (always)] pub fn is_ctl1_avgd_shift5 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT5 } # [doc = "SHIFT6"] # [inline (always)] pub fn is_ctl1_avgd_shift6 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT6 } # [doc = "SHIFT7"] # [inline (always)] pub fn is_ctl1_avgd_shift7 (& self) -> bool { * self == CTL1_AVGD_A :: CTL1_AVGD_SHIFT7 } } # [doc = "Field `CTL1_AVGD` writer - Hardware averager denominator. The number to divide the accumulated value by (this is a shift). Note result register is maximum of 16-bits long so if not shifted appropirately result will be truncated."] pub type CTL1_AVGD_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , CTL1_AVGD_A > ; impl < 'a , REG , const O : u8 > CTL1_AVGD_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "SHIFT0"] # [inline (always)] pub fn ctl1_avgd_shift0 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT0) } # [doc = "SHIFT1"] # [inline (always)] pub fn ctl1_avgd_shift1 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT1) } # [doc = "SHIFT2"] # [inline (always)] pub fn ctl1_avgd_shift2 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT2) } # [doc = "SHIFT3"] # [inline (always)] pub fn ctl1_avgd_shift3 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT3) } # [doc = "SHIFT4"] # [inline (always)] pub fn ctl1_avgd_shift4 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT4) } # [doc = "SHIFT5"] # [inline (always)] pub fn ctl1_avgd_shift5 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT5) } # [doc = "SHIFT6"] # [inline (always)] pub fn ctl1_avgd_shift6 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT6) } # [doc = "SHIFT7"] # [inline (always)] pub fn ctl1_avgd_shift7 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL1_AVGD_A :: CTL1_AVGD_SHIFT7) } } impl R { # [doc = "Bit 0 - Sample trigger source"] # [inline (always)] pub fn ctl1_trigsrc (& self) -> CTL1_TRIGSRC_R { CTL1_TRIGSRC_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - Start of conversion"] # [inline (always)] pub fn ctl1_sc (& self) -> CTL1_SC_R { CTL1_SC_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bits 16:17 - Conversion sequence mode"] # [inline (always)] pub fn ctl1_conseq (& self) -> CTL1_CONSEQ_R { CTL1_CONSEQ_R :: new (((self . bits >> 16) & 3) as u8) } # [doc = "Bit 20 - Sample mode. This bit selects the source of the sampling signal. MANUAL option is not valid when TRIGSRC is selected as hardware event trigger."] # [inline (always)] pub fn ctl1_sampmode (& self) -> CTL1_SAMPMODE_R { CTL1_SAMPMODE_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bits 24:26 - Hardware averager numerator. Selects number of conversions to accumulate for current MEMCTLx and then it is divided by AVGD. Result will be stored in MEMRESx."] # [inline (always)] pub fn ctl1_avgn (& self) -> CTL1_AVGN_R { CTL1_AVGN_R :: new (((self . bits >> 24) & 7) as u8) } # [doc = "Bits 28:30 - Hardware averager denominator. The number to divide the accumulated value by (this is a shift). Note result register is maximum of 16-bits long so if not shifted appropirately result will be truncated."] # [inline (always)] pub fn ctl1_avgd (& self) -> CTL1_AVGD_R { CTL1_AVGD_R :: new (((self . bits >> 28) & 7) as u8) } } impl W { # [doc = "Bit 0 - Sample trigger source"] # [inline (always)] # [must_use] pub fn ctl1_trigsrc (& mut self) -> CTL1_TRIGSRC_W < CTL1_SPEC , 0 > { CTL1_TRIGSRC_W :: new (self) } # [doc = "Bit 8 - Start of conversion"] # [inline (always)] # [must_use] pub fn ctl1_sc (& mut self) -> CTL1_SC_W < CTL1_SPEC , 8 > { CTL1_SC_W :: new (self) } # [doc = "Bits 16:17 - Conversion sequence mode"] # [inline (always)] # [must_use] pub fn ctl1_conseq (& mut self) -> CTL1_CONSEQ_W < CTL1_SPEC , 16 > { CTL1_CONSEQ_W :: new (self) } # [doc = "Bit 20 - Sample mode. This bit selects the source of the sampling signal. MANUAL option is not valid when TRIGSRC is selected as hardware event trigger."] # [inline (always)] # [must_use] pub fn ctl1_sampmode (& mut self) -> CTL1_SAMPMODE_W < CTL1_SPEC , 20 > { CTL1_SAMPMODE_W :: new (self) } # [doc = "Bits 24:26 - Hardware averager numerator. Selects number of conversions to accumulate for current MEMCTLx and then it is divided by AVGD. Result will be stored in MEMRESx."] # [inline (always)] # [must_use] pub fn ctl1_avgn (& mut self) -> CTL1_AVGN_W < CTL1_SPEC , 24 > { CTL1_AVGN_W :: new (self) } # [doc = "Bits 28:30 - Hardware averager denominator. The number to divide the accumulated value by (this is a shift). Note result register is maximum of 16-bits long so if not shifted appropirately result will be truncated."] # [inline (always)] # [must_use] pub fn ctl1_avgd (& mut self) -> CTL1_AVGD_W < CTL1_SPEC , 28 > { CTL1_AVGD_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Control Register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CTL1_SPEC ; impl crate :: RegisterSpec for CTL1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ctl1::R`](R) reader structure"] impl crate :: Readable for CTL1_SPEC { } # [doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"] impl crate :: Writable for CTL1_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CTL1 to value 0"] impl crate :: Resettable for CTL1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }