# [doc = "Register `CTL3` reader"] pub type R = crate :: R < CTL3_SPEC > ; # [doc = "Register `CTL3` writer"] pub type W = crate :: W < CTL3_SPEC > ; # [doc = "Field `CTL3_ASCCHSEL` reader - ASC channel select."] pub type CTL3_ASCCHSEL_R = crate :: FieldReader ; # [doc = "Field `CTL3_ASCCHSEL` writer - ASC channel select."] pub type CTL3_ASCCHSEL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 5 , O > ; # [doc = "Field `CTL3_ASCSTIME` reader - ASC sample time compare value select. This is used to select between SCOMP0 and SCOMP1 registers for ASC operation."] pub type CTL3_ASCSTIME_R = crate :: BitReader ; # [doc = "Field `CTL3_ASCSTIME` writer - ASC sample time compare value select. This is used to select between SCOMP0 and SCOMP1 registers for ASC operation."] pub type CTL3_ASCSTIME_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `CTL3_ASCVRSEL` reader - Selects voltage reference for ASC operation. VEREFM must be connected to on-board ground when external reference option is selected."] pub type CTL3_ASCVRSEL_R = crate :: FieldReader ; # [doc = "Field `CTL3_ASCVRSEL` writer - Selects voltage reference for ASC operation. VEREFM must be connected to on-board ground when external reference option is selected."] pub type CTL3_ASCVRSEL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O > ; impl R { # [doc = "Bits 0:4 - ASC channel select."] # [inline (always)] pub fn ctl3_ascchsel (& self) -> CTL3_ASCCHSEL_R { CTL3_ASCCHSEL_R :: new ((self . bits & 0x1f) as u8) } # [doc = "Bit 8 - ASC sample time compare value select. This is used to select between SCOMP0 and SCOMP1 registers for ASC operation."] # [inline (always)] pub fn ctl3_ascstime (& self) -> CTL3_ASCSTIME_R { CTL3_ASCSTIME_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bits 12:13 - Selects voltage reference for ASC operation. VEREFM must be connected to on-board ground when external reference option is selected."] # [inline (always)] pub fn ctl3_ascvrsel (& self) -> CTL3_ASCVRSEL_R { CTL3_ASCVRSEL_R :: new (((self . bits >> 12) & 3) as u8) } } impl W { # [doc = "Bits 0:4 - ASC channel select."] # [inline (always)] # [must_use] pub fn ctl3_ascchsel (& mut self) -> CTL3_ASCCHSEL_W < CTL3_SPEC , 0 > { CTL3_ASCCHSEL_W :: new (self) } # [doc = "Bit 8 - ASC sample time compare value select. This is used to select between SCOMP0 and SCOMP1 registers for ASC operation."] # [inline (always)] # [must_use] pub fn ctl3_ascstime (& mut self) -> CTL3_ASCSTIME_W < CTL3_SPEC , 8 > { CTL3_ASCSTIME_W :: new (self) } # [doc = "Bits 12:13 - Selects voltage reference for ASC operation. VEREFM must be connected to on-board ground when external reference option is selected."] # [inline (always)] # [must_use] pub fn ctl3_ascvrsel (& mut self) -> CTL3_ASCVRSEL_W < CTL3_SPEC , 12 > { CTL3_ASCVRSEL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Control Register 3\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl3::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl3::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CTL3_SPEC ; impl crate :: RegisterSpec for CTL3_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ctl3::R`](R) reader structure"] impl crate :: Readable for CTL3_SPEC { } # [doc = "`write(|w| ..)` method takes [`ctl3::W`](W) writer structure"] impl crate :: Writable for CTL3_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CTL3 to value 0"] impl crate :: Resettable for CTL3_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }