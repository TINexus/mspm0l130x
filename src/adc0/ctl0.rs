# [doc = "Register `CTL0` reader"] pub type R = crate :: R < CTL0_SPEC > ; # [doc = "Register `CTL0` writer"] pub type W = crate :: W < CTL0_SPEC > ; # [doc = "Field `CTL0_ENC` reader - Enable conversion"] pub type CTL0_ENC_R = crate :: BitReader < CTL0_ENC_A > ; # [doc = "Enable conversion\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTL0_ENC_A { # [doc = "0: OFF"] CTL0_ENC_OFF = 0 , # [doc = "1: ON"] CTL0_ENC_ON = 1 , } impl From < CTL0_ENC_A > for bool { # [inline (always)] fn from (variant : CTL0_ENC_A) -> Self { variant as u8 != 0 } } impl CTL0_ENC_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL0_ENC_A { match self . bits { false => CTL0_ENC_A :: CTL0_ENC_OFF , true => CTL0_ENC_A :: CTL0_ENC_ON , } } # [doc = "OFF"] # [inline (always)] pub fn is_ctl0_enc_off (& self) -> bool { * self == CTL0_ENC_A :: CTL0_ENC_OFF } # [doc = "ON"] # [inline (always)] pub fn is_ctl0_enc_on (& self) -> bool { * self == CTL0_ENC_A :: CTL0_ENC_ON } } # [doc = "Field `CTL0_ENC` writer - Enable conversion"] pub type CTL0_ENC_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CTL0_ENC_A > ; impl < 'a , REG , const O : u8 > CTL0_ENC_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "OFF"] # [inline (always)] pub fn ctl0_enc_off (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_ENC_A :: CTL0_ENC_OFF) } # [doc = "ON"] # [inline (always)] pub fn ctl0_enc_on (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_ENC_A :: CTL0_ENC_ON) } } # [doc = "Field `CTL0_PWRDN` reader - Power down policy"] pub type CTL0_PWRDN_R = crate :: BitReader < CTL0_PWRDN_A > ; # [doc = "Power down policy\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CTL0_PWRDN_A { # [doc = "0: AUTO"] CTL0_PWRDN_AUTO = 0 , # [doc = "1: MANUAL"] CTL0_PWRDN_MANUAL = 1 , } impl From < CTL0_PWRDN_A > for bool { # [inline (always)] fn from (variant : CTL0_PWRDN_A) -> Self { variant as u8 != 0 } } impl CTL0_PWRDN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL0_PWRDN_A { match self . bits { false => CTL0_PWRDN_A :: CTL0_PWRDN_AUTO , true => CTL0_PWRDN_A :: CTL0_PWRDN_MANUAL , } } # [doc = "AUTO"] # [inline (always)] pub fn is_ctl0_pwrdn_auto (& self) -> bool { * self == CTL0_PWRDN_A :: CTL0_PWRDN_AUTO } # [doc = "MANUAL"] # [inline (always)] pub fn is_ctl0_pwrdn_manual (& self) -> bool { * self == CTL0_PWRDN_A :: CTL0_PWRDN_MANUAL } } # [doc = "Field `CTL0_PWRDN` writer - Power down policy"] pub type CTL0_PWRDN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CTL0_PWRDN_A > ; impl < 'a , REG , const O : u8 > CTL0_PWRDN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "AUTO"] # [inline (always)] pub fn ctl0_pwrdn_auto (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_PWRDN_A :: CTL0_PWRDN_AUTO) } # [doc = "MANUAL"] # [inline (always)] pub fn ctl0_pwrdn_manual (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_PWRDN_A :: CTL0_PWRDN_MANUAL) } } # [doc = "Field `CTL0_SCLKDIV` reader - Sample clock divider"] pub type CTL0_SCLKDIV_R = crate :: FieldReader < CTL0_SCLKDIV_A > ; # [doc = "Sample clock divider\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CTL0_SCLKDIV_A { # [doc = "0: DIV_BY_1"] CTL0_SCLKDIV_DIV_BY_1 = 0 , # [doc = "1: DIV_BY_2"] CTL0_SCLKDIV_DIV_BY_2 = 1 , # [doc = "2: DIV_BY_4"] CTL0_SCLKDIV_DIV_BY_4 = 2 , # [doc = "3: DIV_BY_8"] CTL0_SCLKDIV_DIV_BY_8 = 3 , # [doc = "4: DIV_BY_16"] CTL0_SCLKDIV_DIV_BY_16 = 4 , # [doc = "5: DIV_BY_24"] CTL0_SCLKDIV_DIV_BY_24 = 5 , # [doc = "6: DIV_BY_32"] CTL0_SCLKDIV_DIV_BY_32 = 6 , # [doc = "7: DIV_BY_48"] CTL0_SCLKDIV_DIV_BY_48 = 7 , } impl From < CTL0_SCLKDIV_A > for u8 { # [inline (always)] fn from (variant : CTL0_SCLKDIV_A) -> Self { variant as _ } } impl crate :: FieldSpec for CTL0_SCLKDIV_A { type Ux = u8 ; } impl CTL0_SCLKDIV_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CTL0_SCLKDIV_A { match self . bits { 0 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_1 , 1 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_2 , 2 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_4 , 3 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_8 , 4 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_16 , 5 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_24 , 6 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_32 , 7 => CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_48 , _ => unreachable ! () , } } # [doc = "DIV_BY_1"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_1 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_1 } # [doc = "DIV_BY_2"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_2 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_2 } # [doc = "DIV_BY_4"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_4 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_4 } # [doc = "DIV_BY_8"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_8 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_8 } # [doc = "DIV_BY_16"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_16 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_16 } # [doc = "DIV_BY_24"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_24 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_24 } # [doc = "DIV_BY_32"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_32 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_32 } # [doc = "DIV_BY_48"] # [inline (always)] pub fn is_ctl0_sclkdiv_div_by_48 (& self) -> bool { * self == CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_48 } } # [doc = "Field `CTL0_SCLKDIV` writer - Sample clock divider"] pub type CTL0_SCLKDIV_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , CTL0_SCLKDIV_A > ; impl < 'a , REG , const O : u8 > CTL0_SCLKDIV_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DIV_BY_1"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_1 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_1) } # [doc = "DIV_BY_2"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_2 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_2) } # [doc = "DIV_BY_4"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_4 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_4) } # [doc = "DIV_BY_8"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_8 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_8) } # [doc = "DIV_BY_16"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_16 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_16) } # [doc = "DIV_BY_24"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_24 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_24) } # [doc = "DIV_BY_32"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_32 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_32) } # [doc = "DIV_BY_48"] # [inline (always)] pub fn ctl0_sclkdiv_div_by_48 (self) -> & 'a mut crate :: W < REG > { self . variant (CTL0_SCLKDIV_A :: CTL0_SCLKDIV_DIV_BY_48) } } impl R { # [doc = "Bit 0 - Enable conversion"] # [inline (always)] pub fn ctl0_enc (& self) -> CTL0_ENC_R { CTL0_ENC_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 16 - Power down policy"] # [inline (always)] pub fn ctl0_pwrdn (& self) -> CTL0_PWRDN_R { CTL0_PWRDN_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bits 24:26 - Sample clock divider"] # [inline (always)] pub fn ctl0_sclkdiv (& self) -> CTL0_SCLKDIV_R { CTL0_SCLKDIV_R :: new (((self . bits >> 24) & 7) as u8) } } impl W { # [doc = "Bit 0 - Enable conversion"] # [inline (always)] # [must_use] pub fn ctl0_enc (& mut self) -> CTL0_ENC_W < CTL0_SPEC , 0 > { CTL0_ENC_W :: new (self) } # [doc = "Bit 16 - Power down policy"] # [inline (always)] # [must_use] pub fn ctl0_pwrdn (& mut self) -> CTL0_PWRDN_W < CTL0_SPEC , 16 > { CTL0_PWRDN_W :: new (self) } # [doc = "Bits 24:26 - Sample clock divider"] # [inline (always)] # [must_use] pub fn ctl0_sclkdiv (& mut self) -> CTL0_SCLKDIV_W < CTL0_SPEC , 24 > { CTL0_SCLKDIV_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Control Register 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CTL0_SPEC ; impl crate :: RegisterSpec for CTL0_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ctl0::R`](R) reader structure"] impl crate :: Readable for CTL0_SPEC { } # [doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"] impl crate :: Writable for CTL0_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CTL0 to value 0"] impl crate :: Resettable for CTL0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }