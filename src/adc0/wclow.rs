# [doc = "Register `WCLOW` reader"] pub type R = crate :: R < WCLOW_SPEC > ; # [doc = "Register `WCLOW` writer"] pub type W = crate :: W < WCLOW_SPEC > ; # [doc = "Field `WCLOW_DATA` reader - If DF = 0, unsigned binary format has to be used. The value based on the resolution has to be right aligned with the MSB on the left. For 10-bits and 8-bits resolution, unused bits have to be 0s. If DF = 1, 2s-complement format has to be used. The value based on the resolution has to be left aligned with the LSB on the right. For 10-bits and 8-bits resolution, unused bits have to be 0s."] pub type WCLOW_DATA_R = crate :: FieldReader < u16 > ; # [doc = "Field `WCLOW_DATA` writer - If DF = 0, unsigned binary format has to be used. The value based on the resolution has to be right aligned with the MSB on the left. For 10-bits and 8-bits resolution, unused bits have to be 0s. If DF = 1, 2s-complement format has to be used. The value based on the resolution has to be left aligned with the LSB on the right. For 10-bits and 8-bits resolution, unused bits have to be 0s."] pub type WCLOW_DATA_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 16 , O , u16 > ; impl R { # [doc = "Bits 0:15 - If DF = 0, unsigned binary format has to be used. The value based on the resolution has to be right aligned with the MSB on the left. For 10-bits and 8-bits resolution, unused bits have to be 0s. If DF = 1, 2s-complement format has to be used. The value based on the resolution has to be left aligned with the LSB on the right. For 10-bits and 8-bits resolution, unused bits have to be 0s."] # [inline (always)] pub fn wclow_data (& self) -> WCLOW_DATA_R { WCLOW_DATA_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15 - If DF = 0, unsigned binary format has to be used. The value based on the resolution has to be right aligned with the MSB on the left. For 10-bits and 8-bits resolution, unused bits have to be 0s. If DF = 1, 2s-complement format has to be used. The value based on the resolution has to be left aligned with the LSB on the right. For 10-bits and 8-bits resolution, unused bits have to be 0s."] # [inline (always)] # [must_use] pub fn wclow_data (& mut self) -> WCLOW_DATA_W < WCLOW_SPEC , 0 > { WCLOW_DATA_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Window Comparator Low Threshold Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`wclow::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`wclow::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct WCLOW_SPEC ; impl crate :: RegisterSpec for WCLOW_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`wclow::R`](R) reader structure"] impl crate :: Readable for WCLOW_SPEC { } # [doc = "`write(|w| ..)` method takes [`wclow::W`](W) writer structure"] impl crate :: Writable for WCLOW_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets WCLOW to value 0"] impl crate :: Resettable for WCLOW_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }