# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { _reserved0 : [u8 ; 0x0400] , # [doc = "0x400 - Subscriber Configuration Register."] pub fsub_0 : FSUB_0 , _reserved1 : [u8 ; 0x40] , # [doc = "0x444 - Publisher Configuration Register."] pub fpub_1 : FPUB_1 , _reserved2 : [u8 ; 0x03b8] , # [doc = "0x800 - Power enable"] pub pwren : PWREN , # [doc = "0x804 - Reset Control"] pub rstctl : RSTCTL , # [doc = "0x808 - ADC clock configuration Register"] pub clkcfg : CLKCFG , _reserved5 : [u8 ; 0x08] , # [doc = "0x814 - Status Register"] pub stat : STAT , _reserved6 : [u8 ; 0x0808] , # [doc = "0x1020 - Interrupt index"] pub int_event0_iidx : INT_EVENT0_IIDX , _reserved7 : [u8 ; 0x04] , # [doc = "0x1028 - Interrupt mask"] pub int_event0_imask : INT_EVENT0_IMASK , _reserved8 : [u8 ; 0x04] , # [doc = "0x1030 - Raw interrupt status"] pub int_event0_ris : INT_EVENT0_RIS , _reserved9 : [u8 ; 0x04] , # [doc = "0x1038 - Masked interrupt status"] pub int_event0_mis : INT_EVENT0_MIS , _reserved10 : [u8 ; 0x04] , # [doc = "0x1040 - Interrupt set"] pub int_event0_iset : INT_EVENT0_ISET , _reserved11 : [u8 ; 0x04] , # [doc = "0x1048 - Interrupt clear"] pub int_event0_iclr : INT_EVENT0_ICLR , _reserved12 : [u8 ; 0x04] , # [doc = "0x1050 - Interrupt index"] pub int_event1_iidx : INT_EVENT1_IIDX , _reserved13 : [u8 ; 0x04] , # [doc = "0x1058 - Interrupt mask"] pub int_event1_imask : INT_EVENT1_IMASK , _reserved14 : [u8 ; 0x04] , # [doc = "0x1060 - Raw interrupt status"] pub int_event1_ris : INT_EVENT1_RIS , _reserved15 : [u8 ; 0x04] , # [doc = "0x1068 - Masked interrupt status"] pub int_event1_mis : INT_EVENT1_MIS , _reserved16 : [u8 ; 0x04] , # [doc = "0x1070 - Interrupt set"] pub int_event1_iset : INT_EVENT1_ISET , _reserved17 : [u8 ; 0x04] , # [doc = "0x1078 - Interrupt clear"] pub int_event1_iclr : INT_EVENT1_ICLR , _reserved18 : [u8 ; 0x04] , # [doc = "0x1080 - Interrupt index"] pub int_event2_iidx : INT_EVENT2_IIDX , _reserved19 : [u8 ; 0x04] , # [doc = "0x1088 - Interrupt mask extension"] pub int_event2_imask : INT_EVENT2_IMASK , _reserved20 : [u8 ; 0x04] , # [doc = "0x1090 - Raw interrupt status extension"] pub int_event2_ris : INT_EVENT2_RIS , _reserved21 : [u8 ; 0x04] , # [doc = "0x1098 - Masked interrupt status extension"] pub int_event2_mis : INT_EVENT2_MIS , _reserved22 : [u8 ; 0x04] , # [doc = "0x10a0 - Interrupt set extension"] pub int_event2_iset : INT_EVENT2_ISET , _reserved23 : [u8 ; 0x04] , # [doc = "0x10a8 - Interrupt clear extension"] pub int_event2_iclr : INT_EVENT2_ICLR , _reserved24 : [u8 ; 0x34] , # [doc = "0x10e0 - Event Mode"] pub evt_mode : EVT_MODE , _reserved25 : [u8 ; 0x18] , # [doc = "0x10fc - Module Description"] pub desc : DESC , # [doc = "0x1100 - Control Register 0"] pub ctl0 : CTL0 , # [doc = "0x1104 - Control Register 1"] pub ctl1 : CTL1 , # [doc = "0x1108 - Control Register 2"] pub ctl2 : CTL2 , # [doc = "0x110c - Control Register 3"] pub ctl3 : CTL3 , # [doc = "0x1110 - Sample Clock Frequency Range Register"] pub clkfreq : CLKFREQ , # [doc = "0x1114 - Sample Time Compare 0 Register"] pub scomp0 : SCOMP0 , # [doc = "0x1118 - Sample Time Compare 1 Register"] pub scomp1 : SCOMP1 , # [doc = "0x111c - Reference Buffer Configuration Register"] pub refcfg : REFCFG , _reserved34 : [u8 ; 0x28] , # [doc = "0x1148 - Window Comparator Low Threshold Register"] pub wclow : WCLOW , _reserved35 : [u8 ; 0x04] , # [doc = "0x1150 - Window Comparator High Threshold Register"] pub wchigh : WCHIGH , _reserved36 : [u8 ; 0x2c] , # [doc = "0x1180..0x1190 - Conversion Memory Control Register"] pub memctl : [MEMCTL ; 4] , _reserved37 : [u8 ; 0x01b0] , # [doc = "0x1340 - Status Register"] pub status : STATUS , } # [doc = "FSUB_0 (rw) register accessor: Subscriber Configuration Register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fsub_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fsub_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fsub_0`]
module"] pub type FSUB_0 = crate :: Reg < fsub_0 :: FSUB_0_SPEC > ; # [doc = "Subscriber Configuration Register."] pub mod fsub_0 ; # [doc = "FPUB_1 (rw) register accessor: Publisher Configuration Register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fpub_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fpub_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fpub_1`]
module"] pub type FPUB_1 = crate :: Reg < fpub_1 :: FPUB_1_SPEC > ; # [doc = "Publisher Configuration Register."] pub mod fpub_1 ; # [doc = "PWREN (rw) register accessor: Power enable\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pwren::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pwren::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pwren`]
module"] pub type PWREN = crate :: Reg < pwren :: PWREN_SPEC > ; # [doc = "Power enable"] pub mod pwren ; # [doc = "RSTCTL (w) register accessor: Reset Control\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rstctl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rstctl`]
module"] pub type RSTCTL = crate :: Reg < rstctl :: RSTCTL_SPEC > ; # [doc = "Reset Control"] pub mod rstctl ; # [doc = "CLKCFG (rw) register accessor: ADC clock configuration Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkcfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkcfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkcfg`]
module"] pub type CLKCFG = crate :: Reg < clkcfg :: CLKCFG_SPEC > ; # [doc = "ADC clock configuration Register"] pub mod clkcfg ; # [doc = "STAT (r) register accessor: Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stat::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"] pub type STAT = crate :: Reg < stat :: STAT_SPEC > ; # [doc = "Status Register"] pub mod stat ; # [doc = "INT_EVENT0_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iidx`]
module"] pub type INT_EVENT0_IIDX = crate :: Reg < int_event0_iidx :: INT_EVENT0_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event0_iidx ; # [doc = "INT_EVENT0_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_imask`]
module"] pub type INT_EVENT0_IMASK = crate :: Reg < int_event0_imask :: INT_EVENT0_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event0_imask ; # [doc = "INT_EVENT0_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_ris`]
module"] pub type INT_EVENT0_RIS = crate :: Reg < int_event0_ris :: INT_EVENT0_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event0_ris ; # [doc = "INT_EVENT0_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_mis`]
module"] pub type INT_EVENT0_MIS = crate :: Reg < int_event0_mis :: INT_EVENT0_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event0_mis ; # [doc = "INT_EVENT0_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iset`]
module"] pub type INT_EVENT0_ISET = crate :: Reg < int_event0_iset :: INT_EVENT0_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event0_iset ; # [doc = "INT_EVENT0_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iclr`]
module"] pub type INT_EVENT0_ICLR = crate :: Reg < int_event0_iclr :: INT_EVENT0_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event0_iclr ; # [doc = "INT_EVENT1_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iidx`]
module"] pub type INT_EVENT1_IIDX = crate :: Reg < int_event1_iidx :: INT_EVENT1_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event1_iidx ; # [doc = "INT_EVENT1_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_imask`]
module"] pub type INT_EVENT1_IMASK = crate :: Reg < int_event1_imask :: INT_EVENT1_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event1_imask ; # [doc = "INT_EVENT1_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_ris`]
module"] pub type INT_EVENT1_RIS = crate :: Reg < int_event1_ris :: INT_EVENT1_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event1_ris ; # [doc = "INT_EVENT1_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_mis`]
module"] pub type INT_EVENT1_MIS = crate :: Reg < int_event1_mis :: INT_EVENT1_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event1_mis ; # [doc = "INT_EVENT1_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iset`]
module"] pub type INT_EVENT1_ISET = crate :: Reg < int_event1_iset :: INT_EVENT1_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event1_iset ; # [doc = "INT_EVENT1_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iclr`]
module"] pub type INT_EVENT1_ICLR = crate :: Reg < int_event1_iclr :: INT_EVENT1_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event1_iclr ; # [doc = "INT_EVENT2_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iidx`]
module"] pub type INT_EVENT2_IIDX = crate :: Reg < int_event2_iidx :: INT_EVENT2_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event2_iidx ; # [doc = "INT_EVENT2_IMASK (rw) register accessor: Interrupt mask extension\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_imask`]
module"] pub type INT_EVENT2_IMASK = crate :: Reg < int_event2_imask :: INT_EVENT2_IMASK_SPEC > ; # [doc = "Interrupt mask extension"] pub mod int_event2_imask ; # [doc = "INT_EVENT2_RIS (r) register accessor: Raw interrupt status extension\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_ris`]
module"] pub type INT_EVENT2_RIS = crate :: Reg < int_event2_ris :: INT_EVENT2_RIS_SPEC > ; # [doc = "Raw interrupt status extension"] pub mod int_event2_ris ; # [doc = "INT_EVENT2_MIS (r) register accessor: Masked interrupt status extension\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_mis`]
module"] pub type INT_EVENT2_MIS = crate :: Reg < int_event2_mis :: INT_EVENT2_MIS_SPEC > ; # [doc = "Masked interrupt status extension"] pub mod int_event2_mis ; # [doc = "INT_EVENT2_ISET (w) register accessor: Interrupt set extension\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iset`]
module"] pub type INT_EVENT2_ISET = crate :: Reg < int_event2_iset :: INT_EVENT2_ISET_SPEC > ; # [doc = "Interrupt set extension"] pub mod int_event2_iset ; # [doc = "INT_EVENT2_ICLR (w) register accessor: Interrupt clear extension\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iclr`]
module"] pub type INT_EVENT2_ICLR = crate :: Reg < int_event2_iclr :: INT_EVENT2_ICLR_SPEC > ; # [doc = "Interrupt clear extension"] pub mod int_event2_iclr ; # [doc = "EVT_MODE (r) register accessor: Event Mode\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evt_mode::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evt_mode`]
module"] pub type EVT_MODE = crate :: Reg < evt_mode :: EVT_MODE_SPEC > ; # [doc = "Event Mode"] pub mod evt_mode ; # [doc = "DESC (r) register accessor: Module Description\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`desc::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@desc`]
module"] pub type DESC = crate :: Reg < desc :: DESC_SPEC > ; # [doc = "Module Description"] pub mod desc ; # [doc = "CTL0 (rw) register accessor: Control Register 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"] pub type CTL0 = crate :: Reg < ctl0 :: CTL0_SPEC > ; # [doc = "Control Register 0"] pub mod ctl0 ; # [doc = "CTL1 (rw) register accessor: Control Register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"] pub type CTL1 = crate :: Reg < ctl1 :: CTL1_SPEC > ; # [doc = "Control Register 1"] pub mod ctl1 ; # [doc = "CTL2 (rw) register accessor: Control Register 2\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl2`]
module"] pub type CTL2 = crate :: Reg < ctl2 :: CTL2_SPEC > ; # [doc = "Control Register 2"] pub mod ctl2 ; # [doc = "CLKFREQ (rw) register accessor: Sample Clock Frequency Range Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkfreq::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkfreq::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkfreq`]
module"] pub type CLKFREQ = crate :: Reg < clkfreq :: CLKFREQ_SPEC > ; # [doc = "Sample Clock Frequency Range Register"] pub mod clkfreq ; # [doc = "CTL3 (rw) register accessor: Control Register 3\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl3::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl3::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl3`]
module"] pub type CTL3 = crate :: Reg < ctl3 :: CTL3_SPEC > ; # [doc = "Control Register 3"] pub mod ctl3 ; # [doc = "SCOMP0 (rw) register accessor: Sample Time Compare 0 Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`scomp0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`scomp0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@scomp0`]
module"] pub type SCOMP0 = crate :: Reg < scomp0 :: SCOMP0_SPEC > ; # [doc = "Sample Time Compare 0 Register"] pub mod scomp0 ; # [doc = "SCOMP1 (rw) register accessor: Sample Time Compare 1 Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`scomp1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`scomp1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@scomp1`]
module"] pub type SCOMP1 = crate :: Reg < scomp1 :: SCOMP1_SPEC > ; # [doc = "Sample Time Compare 1 Register"] pub mod scomp1 ; # [doc = "REFCFG (rw) register accessor: Reference Buffer Configuration Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`refcfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`refcfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@refcfg`]
module"] pub type REFCFG = crate :: Reg < refcfg :: REFCFG_SPEC > ; # [doc = "Reference Buffer Configuration Register"] pub mod refcfg ; # [doc = "WCLOW (rw) register accessor: Window Comparator Low Threshold Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`wclow::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`wclow::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wclow`]
module"] pub type WCLOW = crate :: Reg < wclow :: WCLOW_SPEC > ; # [doc = "Window Comparator Low Threshold Register"] pub mod wclow ; # [doc = "WCHIGH (rw) register accessor: Window Comparator High Threshold Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`wchigh::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`wchigh::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wchigh`]
module"] pub type WCHIGH = crate :: Reg < wchigh :: WCHIGH_SPEC > ; # [doc = "Window Comparator High Threshold Register"] pub mod wchigh ; # [doc = "MEMCTL (rw) register accessor: Conversion Memory Control Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`memctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`memctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@memctl`]
module"] pub type MEMCTL = crate :: Reg < memctl :: MEMCTL_SPEC > ; # [doc = "Conversion Memory Control Register"] pub mod memctl ; # [doc = "STATUS (r) register accessor: Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`status::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status`]
module"] pub type STATUS = crate :: Reg < status :: STATUS_SPEC > ; # [doc = "Status Register"] pub mod status ;