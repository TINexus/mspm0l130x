# [doc = "Register `SWDCFG` writer"] pub type W = crate :: W < SWDCFG_SPEC > ; # [doc = "Set DISABLE to disable the SWD function on SWD pins, allowing the SWD pins to be used as GPIO.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SWDCFG_DISABLE_AW { # [doc = "1: TRUE"] SWDCFG_DISABLE_TRUE = 1 , } impl From < SWDCFG_DISABLE_AW > for bool { # [inline (always)] fn from (variant : SWDCFG_DISABLE_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `SWDCFG_DISABLE` writer - Set DISABLE to disable the SWD function on SWD pins, allowing the SWD pins to be used as GPIO."] pub type SWDCFG_DISABLE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SWDCFG_DISABLE_AW > ; impl < 'a , REG , const O : u8 > SWDCFG_DISABLE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "TRUE"] # [inline (always)] pub fn swdcfg_disable_true (self) -> & 'a mut crate :: W < REG > { self . variant (SWDCFG_DISABLE_AW :: SWDCFG_DISABLE_TRUE) } } # [doc = "The key value 62h (98) must be written to KEY together with DISBALE to disable the SWD functions.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SWDCFG_KEY_AW { # [doc = "98: VALUE"] SWDCFG_KEY_VALUE = 98 , } impl From < SWDCFG_KEY_AW > for u8 { # [inline (always)] fn from (variant : SWDCFG_KEY_AW) -> Self { variant as _ } } impl crate :: FieldSpec for SWDCFG_KEY_AW { type Ux = u8 ; } # [doc = "Field `SWDCFG_KEY` writer - The key value 62h (98) must be written to KEY together with DISBALE to disable the SWD functions."] pub type SWDCFG_KEY_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O , SWDCFG_KEY_AW > ; impl < 'a , REG , const O : u8 > SWDCFG_KEY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "VALUE"] # [inline (always)] pub fn swdcfg_key_value (self) -> & 'a mut crate :: W < REG > { self . variant (SWDCFG_KEY_AW :: SWDCFG_KEY_VALUE) } } impl W { # [doc = "Bit 0 - Set DISABLE to disable the SWD function on SWD pins, allowing the SWD pins to be used as GPIO."] # [inline (always)] # [must_use] pub fn swdcfg_disable (& mut self) -> SWDCFG_DISABLE_W < SWDCFG_SPEC , 0 > { SWDCFG_DISABLE_W :: new (self) } # [doc = "Bits 24:31 - The key value 62h (98) must be written to KEY together with DISBALE to disable the SWD functions."] # [inline (always)] # [must_use] pub fn swdcfg_key (& mut self) -> SWDCFG_KEY_W < SWDCFG_SPEC , 24 > { SWDCFG_KEY_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Disable the SWD function on the SWD pins\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`swdcfg::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SWDCFG_SPEC ; impl crate :: RegisterSpec for SWDCFG_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`swdcfg::W`](W) writer structure"] impl crate :: Writable for SWDCFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SWDCFG to value 0"] impl crate :: Resettable for SWDCFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }