# [doc = "Register `BORTHRESHOLD` reader"] pub type R = crate :: R < BORTHRESHOLD_SPEC > ; # [doc = "Register `BORTHRESHOLD` writer"] pub type W = crate :: W < BORTHRESHOLD_SPEC > ; # [doc = "Field `BORTHRESHOLD_LEVEL` reader - LEVEL specifies the desired BOR threshold and BOR mode."] pub type BORTHRESHOLD_LEVEL_R = crate :: FieldReader < BORTHRESHOLD_LEVEL_A > ; # [doc = "LEVEL specifies the desired BOR threshold and BOR mode.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum BORTHRESHOLD_LEVEL_A { # [doc = "0: BORMIN"] BORTHRESHOLD_LEVEL_BORMIN = 0 , # [doc = "1: BORLEVEL1"] BORTHRESHOLD_LEVEL_BORLEVEL1 = 1 , # [doc = "2: BORLEVEL2"] BORTHRESHOLD_LEVEL_BORLEVEL2 = 2 , # [doc = "3: BORLEVEL3"] BORTHRESHOLD_LEVEL_BORLEVEL3 = 3 , } impl From < BORTHRESHOLD_LEVEL_A > for u8 { # [inline (always)] fn from (variant : BORTHRESHOLD_LEVEL_A) -> Self { variant as _ } } impl crate :: FieldSpec for BORTHRESHOLD_LEVEL_A { type Ux = u8 ; } impl BORTHRESHOLD_LEVEL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> BORTHRESHOLD_LEVEL_A { match self . bits { 0 => BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORMIN , 1 => BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL1 , 2 => BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL2 , 3 => BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL3 , _ => unreachable ! () , } } # [doc = "BORMIN"] # [inline (always)] pub fn is_borthreshold_level_bormin (& self) -> bool { * self == BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORMIN } # [doc = "BORLEVEL1"] # [inline (always)] pub fn is_borthreshold_level_borlevel1 (& self) -> bool { * self == BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL1 } # [doc = "BORLEVEL2"] # [inline (always)] pub fn is_borthreshold_level_borlevel2 (& self) -> bool { * self == BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL2 } # [doc = "BORLEVEL3"] # [inline (always)] pub fn is_borthreshold_level_borlevel3 (& self) -> bool { * self == BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL3 } } # [doc = "Field `BORTHRESHOLD_LEVEL` writer - LEVEL specifies the desired BOR threshold and BOR mode."] pub type BORTHRESHOLD_LEVEL_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , BORTHRESHOLD_LEVEL_A > ; impl < 'a , REG , const O : u8 > BORTHRESHOLD_LEVEL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "BORMIN"] # [inline (always)] pub fn borthreshold_level_bormin (self) -> & 'a mut crate :: W < REG > { self . variant (BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORMIN) } # [doc = "BORLEVEL1"] # [inline (always)] pub fn borthreshold_level_borlevel1 (self) -> & 'a mut crate :: W < REG > { self . variant (BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL1) } # [doc = "BORLEVEL2"] # [inline (always)] pub fn borthreshold_level_borlevel2 (self) -> & 'a mut crate :: W < REG > { self . variant (BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL2) } # [doc = "BORLEVEL3"] # [inline (always)] pub fn borthreshold_level_borlevel3 (self) -> & 'a mut crate :: W < REG > { self . variant (BORTHRESHOLD_LEVEL_A :: BORTHRESHOLD_LEVEL_BORLEVEL3) } } impl R { # [doc = "Bits 0:1 - LEVEL specifies the desired BOR threshold and BOR mode."] # [inline (always)] pub fn borthreshold_level (& self) -> BORTHRESHOLD_LEVEL_R { BORTHRESHOLD_LEVEL_R :: new ((self . bits & 3) as u8) } } impl W { # [doc = "Bits 0:1 - LEVEL specifies the desired BOR threshold and BOR mode."] # [inline (always)] # [must_use] pub fn borthreshold_level (& mut self) -> BORTHRESHOLD_LEVEL_W < BORTHRESHOLD_SPEC , 0 > { BORTHRESHOLD_LEVEL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "BOR threshold selection\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`borthreshold::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`borthreshold::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BORTHRESHOLD_SPEC ; impl crate :: RegisterSpec for BORTHRESHOLD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`borthreshold::R`](R) reader structure"] impl crate :: Readable for BORTHRESHOLD_SPEC { } # [doc = "`write(|w| ..)` method takes [`borthreshold::W`](W) writer structure"] impl crate :: Writable for BORTHRESHOLD_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets BORTHRESHOLD to value 0"] impl crate :: Resettable for BORTHRESHOLD_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }