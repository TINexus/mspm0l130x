# [doc = "Register `NMIRIS` reader"] pub type R = crate :: R < NMIRIS_SPEC > ; # [doc = "Field `NMIRIS_BORLVL` reader - Raw status of the BORLVL NMI"] pub type NMIRIS_BORLVL_R = crate :: BitReader < NMIRIS_BORLVL_A > ; # [doc = "Raw status of the BORLVL NMI\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum NMIRIS_BORLVL_A { # [doc = "0: FALSE"] NMIRIS_BORLVL_FALSE = 0 , # [doc = "1: TRUE"] NMIRIS_BORLVL_TRUE = 1 , } impl From < NMIRIS_BORLVL_A > for bool { # [inline (always)] fn from (variant : NMIRIS_BORLVL_A) -> Self { variant as u8 != 0 } } impl NMIRIS_BORLVL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> NMIRIS_BORLVL_A { match self . bits { false => NMIRIS_BORLVL_A :: NMIRIS_BORLVL_FALSE , true => NMIRIS_BORLVL_A :: NMIRIS_BORLVL_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_nmiris_borlvl_false (& self) -> bool { * self == NMIRIS_BORLVL_A :: NMIRIS_BORLVL_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_nmiris_borlvl_true (& self) -> bool { * self == NMIRIS_BORLVL_A :: NMIRIS_BORLVL_TRUE } } # [doc = "Field `NMIRIS_WWDT0` reader - Watch Dog 0 Fault"] pub type NMIRIS_WWDT0_R = crate :: BitReader < NMIRIS_WWDT0_A > ; # [doc = "Watch Dog 0 Fault\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum NMIRIS_WWDT0_A { # [doc = "0: FALSE"] NMIRIS_WWDT0_FALSE = 0 , # [doc = "1: TRUE"] NMIRIS_WWDT0_TRUE = 1 , } impl From < NMIRIS_WWDT0_A > for bool { # [inline (always)] fn from (variant : NMIRIS_WWDT0_A) -> Self { variant as u8 != 0 } } impl NMIRIS_WWDT0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> NMIRIS_WWDT0_A { match self . bits { false => NMIRIS_WWDT0_A :: NMIRIS_WWDT0_FALSE , true => NMIRIS_WWDT0_A :: NMIRIS_WWDT0_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_nmiris_wwdt0_false (& self) -> bool { * self == NMIRIS_WWDT0_A :: NMIRIS_WWDT0_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_nmiris_wwdt0_true (& self) -> bool { * self == NMIRIS_WWDT0_A :: NMIRIS_WWDT0_TRUE } } impl R { # [doc = "Bit 0 - Raw status of the BORLVL NMI"] # [inline (always)] pub fn nmiris_borlvl (& self) -> NMIRIS_BORLVL_R { NMIRIS_BORLVL_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Watch Dog 0 Fault"] # [inline (always)] pub fn nmiris_wwdt0 (& self) -> NMIRIS_WWDT0_R { NMIRIS_WWDT0_R :: new (((self . bits >> 1) & 1) != 0) } } # [doc = "NMI raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`nmiris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct NMIRIS_SPEC ; impl crate :: RegisterSpec for NMIRIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`nmiris::R`](R) reader structure"] impl crate :: Readable for NMIRIS_SPEC { } # [doc = "`reset()` method sets NMIRIS to value 0"] impl crate :: Resettable for NMIRIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }