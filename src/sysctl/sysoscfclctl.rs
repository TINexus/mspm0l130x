# [doc = "Register `SYSOSCFCLCTL` writer"] pub type W = crate :: W < SYSOSCFCLCTL_SPEC > ; # [doc = "Set SETUSEFCL to enable the frequency correction loop in SYSOSC. Once enabled, this state is locked until the next BOOTRST.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSOSCFCLCTL_SETUSEFCL_AW { # [doc = "1: TRUE"] SYSOSCFCLCTL_SETUSEFCL_TRUE = 1 , } impl From < SYSOSCFCLCTL_SETUSEFCL_AW > for bool { # [inline (always)] fn from (variant : SYSOSCFCLCTL_SETUSEFCL_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `SYSOSCFCLCTL_SETUSEFCL` writer - Set SETUSEFCL to enable the frequency correction loop in SYSOSC. Once enabled, this state is locked until the next BOOTRST."] pub type SYSOSCFCLCTL_SETUSEFCL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSOSCFCLCTL_SETUSEFCL_AW > ; impl < 'a , REG , const O : u8 > SYSOSCFCLCTL_SETUSEFCL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "TRUE"] # [inline (always)] pub fn sysoscfclctl_setusefcl_true (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCFCLCTL_SETUSEFCL_AW :: SYSOSCFCLCTL_SETUSEFCL_TRUE) } } # [doc = "The key value of 2Ah (42) must be written to KEY together with SETUSEFCL to enable the FCL.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SYSOSCFCLCTL_KEY_AW { # [doc = "42: VALUE"] SYSOSCFCLCTL_KEY_VALUE = 42 , } impl From < SYSOSCFCLCTL_KEY_AW > for u8 { # [inline (always)] fn from (variant : SYSOSCFCLCTL_KEY_AW) -> Self { variant as _ } } impl crate :: FieldSpec for SYSOSCFCLCTL_KEY_AW { type Ux = u8 ; } # [doc = "Field `SYSOSCFCLCTL_KEY` writer - The key value of 2Ah (42) must be written to KEY together with SETUSEFCL to enable the FCL."] pub type SYSOSCFCLCTL_KEY_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O , SYSOSCFCLCTL_KEY_AW > ; impl < 'a , REG , const O : u8 > SYSOSCFCLCTL_KEY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "VALUE"] # [inline (always)] pub fn sysoscfclctl_key_value (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCFCLCTL_KEY_AW :: SYSOSCFCLCTL_KEY_VALUE) } } impl W { # [doc = "Bit 0 - Set SETUSEFCL to enable the frequency correction loop in SYSOSC. Once enabled, this state is locked until the next BOOTRST."] # [inline (always)] # [must_use] pub fn sysoscfclctl_setusefcl (& mut self) -> SYSOSCFCLCTL_SETUSEFCL_W < SYSOSCFCLCTL_SPEC , 0 > { SYSOSCFCLCTL_SETUSEFCL_W :: new (self) } # [doc = "Bits 24:31 - The key value of 2Ah (42) must be written to KEY together with SETUSEFCL to enable the FCL."] # [inline (always)] # [must_use] pub fn sysoscfclctl_key (& mut self) -> SYSOSCFCLCTL_KEY_W < SYSOSCFCLCTL_SPEC , 24 > { SYSOSCFCLCTL_KEY_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "SYSOSC frequency correction loop (FCL) ROSC enable\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sysoscfclctl::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SYSOSCFCLCTL_SPEC ; impl crate :: RegisterSpec for SYSOSCFCLCTL_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`sysoscfclctl::W`](W) writer structure"] impl crate :: Writable for SYSOSCFCLCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SYSOSCFCLCTL to value 0"] impl crate :: Resettable for SYSOSCFCLCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }