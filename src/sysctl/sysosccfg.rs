# [doc = "Register `SYSOSCCFG` reader"] pub type R = crate :: R < SYSOSCCFG_SPEC > ; # [doc = "Register `SYSOSCCFG` writer"] pub type W = crate :: W < SYSOSCCFG_SPEC > ; # [doc = "Field `SYSOSCCFG_FREQ` reader - Target operating frequency for the system oscillator (SYSOSC)"] pub type SYSOSCCFG_FREQ_R = crate :: FieldReader < SYSOSCCFG_FREQ_A > ; # [doc = "Target operating frequency for the system oscillator (SYSOSC)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SYSOSCCFG_FREQ_A { # [doc = "0: SYSOSCBASE"] SYSOSCCFG_FREQ_SYSOSCBASE = 0 , # [doc = "1: SYSOSC4M"] SYSOSCCFG_FREQ_SYSOSC4M = 1 , # [doc = "2: SYSOSCUSER"] SYSOSCCFG_FREQ_SYSOSCUSER = 2 , # [doc = "3: SYSOSCTURBO"] SYSOSCCFG_FREQ_SYSOSCTURBO = 3 , } impl From < SYSOSCCFG_FREQ_A > for u8 { # [inline (always)] fn from (variant : SYSOSCCFG_FREQ_A) -> Self { variant as _ } } impl crate :: FieldSpec for SYSOSCCFG_FREQ_A { type Ux = u8 ; } impl SYSOSCCFG_FREQ_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSOSCCFG_FREQ_A { match self . bits { 0 => SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCBASE , 1 => SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSC4M , 2 => SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCUSER , 3 => SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCTURBO , _ => unreachable ! () , } } # [doc = "SYSOSCBASE"] # [inline (always)] pub fn is_sysosccfg_freq_sysoscbase (& self) -> bool { * self == SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCBASE } # [doc = "SYSOSC4M"] # [inline (always)] pub fn is_sysosccfg_freq_sysosc4m (& self) -> bool { * self == SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSC4M } # [doc = "SYSOSCUSER"] # [inline (always)] pub fn is_sysosccfg_freq_sysoscuser (& self) -> bool { * self == SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCUSER } # [doc = "SYSOSCTURBO"] # [inline (always)] pub fn is_sysosccfg_freq_sysoscturbo (& self) -> bool { * self == SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCTURBO } } # [doc = "Field `SYSOSCCFG_FREQ` writer - Target operating frequency for the system oscillator (SYSOSC)"] pub type SYSOSCCFG_FREQ_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , SYSOSCCFG_FREQ_A > ; impl < 'a , REG , const O : u8 > SYSOSCCFG_FREQ_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "SYSOSCBASE"] # [inline (always)] pub fn sysosccfg_freq_sysoscbase (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCBASE) } # [doc = "SYSOSC4M"] # [inline (always)] pub fn sysosccfg_freq_sysosc4m (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSC4M) } # [doc = "SYSOSCUSER"] # [inline (always)] pub fn sysosccfg_freq_sysoscuser (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCUSER) } # [doc = "SYSOSCTURBO"] # [inline (always)] pub fn sysosccfg_freq_sysoscturbo (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_FREQ_A :: SYSOSCCFG_FREQ_SYSOSCTURBO) } } # [doc = "Field `SYSOSCCFG_USE4MHZSTOP` reader - USE4MHZSTOP sets the SYSOSC stop mode frequency policy. When entering STOP mode, the SYSOSC frequency may be automatically switched to 4MHz to reduce SYSOSC power consumption."] pub type SYSOSCCFG_USE4MHZSTOP_R = crate :: BitReader < SYSOSCCFG_USE4MHZSTOP_A > ; # [doc = "USE4MHZSTOP sets the SYSOSC stop mode frequency policy. When entering STOP mode, the SYSOSC frequency may be automatically switched to 4MHz to reduce SYSOSC power consumption.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSOSCCFG_USE4MHZSTOP_A { # [doc = "0: DISABLE"] SYSOSCCFG_USE4MHZSTOP_DISABLE = 0 , # [doc = "1: ENABLE"] SYSOSCCFG_USE4MHZSTOP_ENABLE = 1 , } impl From < SYSOSCCFG_USE4MHZSTOP_A > for bool { # [inline (always)] fn from (variant : SYSOSCCFG_USE4MHZSTOP_A) -> Self { variant as u8 != 0 } } impl SYSOSCCFG_USE4MHZSTOP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSOSCCFG_USE4MHZSTOP_A { match self . bits { false => SYSOSCCFG_USE4MHZSTOP_A :: SYSOSCCFG_USE4MHZSTOP_DISABLE , true => SYSOSCCFG_USE4MHZSTOP_A :: SYSOSCCFG_USE4MHZSTOP_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sysosccfg_use4mhzstop_disable (& self) -> bool { * self == SYSOSCCFG_USE4MHZSTOP_A :: SYSOSCCFG_USE4MHZSTOP_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sysosccfg_use4mhzstop_enable (& self) -> bool { * self == SYSOSCCFG_USE4MHZSTOP_A :: SYSOSCCFG_USE4MHZSTOP_ENABLE } } # [doc = "Field `SYSOSCCFG_USE4MHZSTOP` writer - USE4MHZSTOP sets the SYSOSC stop mode frequency policy. When entering STOP mode, the SYSOSC frequency may be automatically switched to 4MHz to reduce SYSOSC power consumption."] pub type SYSOSCCFG_USE4MHZSTOP_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSOSCCFG_USE4MHZSTOP_A > ; impl < 'a , REG , const O : u8 > SYSOSCCFG_USE4MHZSTOP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sysosccfg_use4mhzstop_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_USE4MHZSTOP_A :: SYSOSCCFG_USE4MHZSTOP_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sysosccfg_use4mhzstop_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_USE4MHZSTOP_A :: SYSOSCCFG_USE4MHZSTOP_ENABLE) } } # [doc = "Field `SYSOSCCFG_DISABLESTOP` reader - DISABLESTOP sets the SYSOSC stop mode enable/disable policy. When operating in STOP mode, the SYSOSC may be automatically disabled. When set, ULPCLK will run from LFCLK in STOP mode and SYSOSC will be disabled to reduce power consumption."] pub type SYSOSCCFG_DISABLESTOP_R = crate :: BitReader < SYSOSCCFG_DISABLESTOP_A > ; # [doc = "DISABLESTOP sets the SYSOSC stop mode enable/disable policy. When operating in STOP mode, the SYSOSC may be automatically disabled. When set, ULPCLK will run from LFCLK in STOP mode and SYSOSC will be disabled to reduce power consumption.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSOSCCFG_DISABLESTOP_A { # [doc = "0: DISABLE"] SYSOSCCFG_DISABLESTOP_DISABLE = 0 , # [doc = "1: ENABLE"] SYSOSCCFG_DISABLESTOP_ENABLE = 1 , } impl From < SYSOSCCFG_DISABLESTOP_A > for bool { # [inline (always)] fn from (variant : SYSOSCCFG_DISABLESTOP_A) -> Self { variant as u8 != 0 } } impl SYSOSCCFG_DISABLESTOP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSOSCCFG_DISABLESTOP_A { match self . bits { false => SYSOSCCFG_DISABLESTOP_A :: SYSOSCCFG_DISABLESTOP_DISABLE , true => SYSOSCCFG_DISABLESTOP_A :: SYSOSCCFG_DISABLESTOP_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sysosccfg_disablestop_disable (& self) -> bool { * self == SYSOSCCFG_DISABLESTOP_A :: SYSOSCCFG_DISABLESTOP_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sysosccfg_disablestop_enable (& self) -> bool { * self == SYSOSCCFG_DISABLESTOP_A :: SYSOSCCFG_DISABLESTOP_ENABLE } } # [doc = "Field `SYSOSCCFG_DISABLESTOP` writer - DISABLESTOP sets the SYSOSC stop mode enable/disable policy. When operating in STOP mode, the SYSOSC may be automatically disabled. When set, ULPCLK will run from LFCLK in STOP mode and SYSOSC will be disabled to reduce power consumption."] pub type SYSOSCCFG_DISABLESTOP_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSOSCCFG_DISABLESTOP_A > ; impl < 'a , REG , const O : u8 > SYSOSCCFG_DISABLESTOP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sysosccfg_disablestop_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_DISABLESTOP_A :: SYSOSCCFG_DISABLESTOP_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sysosccfg_disablestop_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_DISABLESTOP_A :: SYSOSCCFG_DISABLESTOP_ENABLE) } } # [doc = "Field `SYSOSCCFG_DISABLE` reader - DISABLE sets the SYSOSC enable/disable policy. SYSOSC may be powered off in RUN, SLEEP, and STOP modes to reduce power consumption. When SYSOSC is disabled, MCLK and ULPCLK are sourced from LFCLK."] pub type SYSOSCCFG_DISABLE_R = crate :: BitReader < SYSOSCCFG_DISABLE_A > ; # [doc = "DISABLE sets the SYSOSC enable/disable policy. SYSOSC may be powered off in RUN, SLEEP, and STOP modes to reduce power consumption. When SYSOSC is disabled, MCLK and ULPCLK are sourced from LFCLK.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSOSCCFG_DISABLE_A { # [doc = "0: DISABLE"] SYSOSCCFG_DISABLE_DISABLE = 0 , # [doc = "1: ENABLE"] SYSOSCCFG_DISABLE_ENABLE = 1 , } impl From < SYSOSCCFG_DISABLE_A > for bool { # [inline (always)] fn from (variant : SYSOSCCFG_DISABLE_A) -> Self { variant as u8 != 0 } } impl SYSOSCCFG_DISABLE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSOSCCFG_DISABLE_A { match self . bits { false => SYSOSCCFG_DISABLE_A :: SYSOSCCFG_DISABLE_DISABLE , true => SYSOSCCFG_DISABLE_A :: SYSOSCCFG_DISABLE_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sysosccfg_disable_disable (& self) -> bool { * self == SYSOSCCFG_DISABLE_A :: SYSOSCCFG_DISABLE_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sysosccfg_disable_enable (& self) -> bool { * self == SYSOSCCFG_DISABLE_A :: SYSOSCCFG_DISABLE_ENABLE } } # [doc = "Field `SYSOSCCFG_DISABLE` writer - DISABLE sets the SYSOSC enable/disable policy. SYSOSC may be powered off in RUN, SLEEP, and STOP modes to reduce power consumption. When SYSOSC is disabled, MCLK and ULPCLK are sourced from LFCLK."] pub type SYSOSCCFG_DISABLE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSOSCCFG_DISABLE_A > ; impl < 'a , REG , const O : u8 > SYSOSCCFG_DISABLE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sysosccfg_disable_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_DISABLE_A :: SYSOSCCFG_DISABLE_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sysosccfg_disable_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_DISABLE_A :: SYSOSCCFG_DISABLE_ENABLE) } } # [doc = "Field `SYSOSCCFG_BLOCKASYNCALL` reader - BLOCKASYNCALL may be used to mask block all asynchronous fast clock requests, preventing hardware from dynamically changing the active clock configuration when operating in a given mode."] pub type SYSOSCCFG_BLOCKASYNCALL_R = crate :: BitReader < SYSOSCCFG_BLOCKASYNCALL_A > ; # [doc = "BLOCKASYNCALL may be used to mask block all asynchronous fast clock requests, preventing hardware from dynamically changing the active clock configuration when operating in a given mode.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSOSCCFG_BLOCKASYNCALL_A { # [doc = "0: DISABLE"] SYSOSCCFG_BLOCKASYNCALL_DISABLE = 0 , # [doc = "1: ENABLE"] SYSOSCCFG_BLOCKASYNCALL_ENABLE = 1 , } impl From < SYSOSCCFG_BLOCKASYNCALL_A > for bool { # [inline (always)] fn from (variant : SYSOSCCFG_BLOCKASYNCALL_A) -> Self { variant as u8 != 0 } } impl SYSOSCCFG_BLOCKASYNCALL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSOSCCFG_BLOCKASYNCALL_A { match self . bits { false => SYSOSCCFG_BLOCKASYNCALL_A :: SYSOSCCFG_BLOCKASYNCALL_DISABLE , true => SYSOSCCFG_BLOCKASYNCALL_A :: SYSOSCCFG_BLOCKASYNCALL_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sysosccfg_blockasyncall_disable (& self) -> bool { * self == SYSOSCCFG_BLOCKASYNCALL_A :: SYSOSCCFG_BLOCKASYNCALL_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sysosccfg_blockasyncall_enable (& self) -> bool { * self == SYSOSCCFG_BLOCKASYNCALL_A :: SYSOSCCFG_BLOCKASYNCALL_ENABLE } } # [doc = "Field `SYSOSCCFG_BLOCKASYNCALL` writer - BLOCKASYNCALL may be used to mask block all asynchronous fast clock requests, preventing hardware from dynamically changing the active clock configuration when operating in a given mode."] pub type SYSOSCCFG_BLOCKASYNCALL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSOSCCFG_BLOCKASYNCALL_A > ; impl < 'a , REG , const O : u8 > SYSOSCCFG_BLOCKASYNCALL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sysosccfg_blockasyncall_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_BLOCKASYNCALL_A :: SYSOSCCFG_BLOCKASYNCALL_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sysosccfg_blockasyncall_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_BLOCKASYNCALL_A :: SYSOSCCFG_BLOCKASYNCALL_ENABLE) } } # [doc = "Field `SYSOSCCFG_FASTCPUEVENT` reader - FASTCPUEVENT may be used to assert a fast clock request when an interrupt is asserted to the CPU, reducing interrupt latency."] pub type SYSOSCCFG_FASTCPUEVENT_R = crate :: BitReader < SYSOSCCFG_FASTCPUEVENT_A > ; # [doc = "FASTCPUEVENT may be used to assert a fast clock request when an interrupt is asserted to the CPU, reducing interrupt latency.\n\nValue on reset: 1"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSOSCCFG_FASTCPUEVENT_A { # [doc = "0: DISABLE"] SYSOSCCFG_FASTCPUEVENT_DISABLE = 0 , # [doc = "1: ENABLE"] SYSOSCCFG_FASTCPUEVENT_ENABLE = 1 , } impl From < SYSOSCCFG_FASTCPUEVENT_A > for bool { # [inline (always)] fn from (variant : SYSOSCCFG_FASTCPUEVENT_A) -> Self { variant as u8 != 0 } } impl SYSOSCCFG_FASTCPUEVENT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSOSCCFG_FASTCPUEVENT_A { match self . bits { false => SYSOSCCFG_FASTCPUEVENT_A :: SYSOSCCFG_FASTCPUEVENT_DISABLE , true => SYSOSCCFG_FASTCPUEVENT_A :: SYSOSCCFG_FASTCPUEVENT_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sysosccfg_fastcpuevent_disable (& self) -> bool { * self == SYSOSCCFG_FASTCPUEVENT_A :: SYSOSCCFG_FASTCPUEVENT_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sysosccfg_fastcpuevent_enable (& self) -> bool { * self == SYSOSCCFG_FASTCPUEVENT_A :: SYSOSCCFG_FASTCPUEVENT_ENABLE } } # [doc = "Field `SYSOSCCFG_FASTCPUEVENT` writer - FASTCPUEVENT may be used to assert a fast clock request when an interrupt is asserted to the CPU, reducing interrupt latency."] pub type SYSOSCCFG_FASTCPUEVENT_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSOSCCFG_FASTCPUEVENT_A > ; impl < 'a , REG , const O : u8 > SYSOSCCFG_FASTCPUEVENT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sysosccfg_fastcpuevent_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_FASTCPUEVENT_A :: SYSOSCCFG_FASTCPUEVENT_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sysosccfg_fastcpuevent_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SYSOSCCFG_FASTCPUEVENT_A :: SYSOSCCFG_FASTCPUEVENT_ENABLE) } } impl R { # [doc = "Bits 0:1 - Target operating frequency for the system oscillator (SYSOSC)"] # [inline (always)] pub fn sysosccfg_freq (& self) -> SYSOSCCFG_FREQ_R { SYSOSCCFG_FREQ_R :: new ((self . bits & 3) as u8) } # [doc = "Bit 8 - USE4MHZSTOP sets the SYSOSC stop mode frequency policy. When entering STOP mode, the SYSOSC frequency may be automatically switched to 4MHz to reduce SYSOSC power consumption."] # [inline (always)] pub fn sysosccfg_use4mhzstop (& self) -> SYSOSCCFG_USE4MHZSTOP_R { SYSOSCCFG_USE4MHZSTOP_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - DISABLESTOP sets the SYSOSC stop mode enable/disable policy. When operating in STOP mode, the SYSOSC may be automatically disabled. When set, ULPCLK will run from LFCLK in STOP mode and SYSOSC will be disabled to reduce power consumption."] # [inline (always)] pub fn sysosccfg_disablestop (& self) -> SYSOSCCFG_DISABLESTOP_R { SYSOSCCFG_DISABLESTOP_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - DISABLE sets the SYSOSC enable/disable policy. SYSOSC may be powered off in RUN, SLEEP, and STOP modes to reduce power consumption. When SYSOSC is disabled, MCLK and ULPCLK are sourced from LFCLK."] # [inline (always)] pub fn sysosccfg_disable (& self) -> SYSOSCCFG_DISABLE_R { SYSOSCCFG_DISABLE_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 16 - BLOCKASYNCALL may be used to mask block all asynchronous fast clock requests, preventing hardware from dynamically changing the active clock configuration when operating in a given mode."] # [inline (always)] pub fn sysosccfg_blockasyncall (& self) -> SYSOSCCFG_BLOCKASYNCALL_R { SYSOSCCFG_BLOCKASYNCALL_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - FASTCPUEVENT may be used to assert a fast clock request when an interrupt is asserted to the CPU, reducing interrupt latency."] # [inline (always)] pub fn sysosccfg_fastcpuevent (& self) -> SYSOSCCFG_FASTCPUEVENT_R { SYSOSCCFG_FASTCPUEVENT_R :: new (((self . bits >> 17) & 1) != 0) } } impl W { # [doc = "Bits 0:1 - Target operating frequency for the system oscillator (SYSOSC)"] # [inline (always)] # [must_use] pub fn sysosccfg_freq (& mut self) -> SYSOSCCFG_FREQ_W < SYSOSCCFG_SPEC , 0 > { SYSOSCCFG_FREQ_W :: new (self) } # [doc = "Bit 8 - USE4MHZSTOP sets the SYSOSC stop mode frequency policy. When entering STOP mode, the SYSOSC frequency may be automatically switched to 4MHz to reduce SYSOSC power consumption."] # [inline (always)] # [must_use] pub fn sysosccfg_use4mhzstop (& mut self) -> SYSOSCCFG_USE4MHZSTOP_W < SYSOSCCFG_SPEC , 8 > { SYSOSCCFG_USE4MHZSTOP_W :: new (self) } # [doc = "Bit 9 - DISABLESTOP sets the SYSOSC stop mode enable/disable policy. When operating in STOP mode, the SYSOSC may be automatically disabled. When set, ULPCLK will run from LFCLK in STOP mode and SYSOSC will be disabled to reduce power consumption."] # [inline (always)] # [must_use] pub fn sysosccfg_disablestop (& mut self) -> SYSOSCCFG_DISABLESTOP_W < SYSOSCCFG_SPEC , 9 > { SYSOSCCFG_DISABLESTOP_W :: new (self) } # [doc = "Bit 10 - DISABLE sets the SYSOSC enable/disable policy. SYSOSC may be powered off in RUN, SLEEP, and STOP modes to reduce power consumption. When SYSOSC is disabled, MCLK and ULPCLK are sourced from LFCLK."] # [inline (always)] # [must_use] pub fn sysosccfg_disable (& mut self) -> SYSOSCCFG_DISABLE_W < SYSOSCCFG_SPEC , 10 > { SYSOSCCFG_DISABLE_W :: new (self) } # [doc = "Bit 16 - BLOCKASYNCALL may be used to mask block all asynchronous fast clock requests, preventing hardware from dynamically changing the active clock configuration when operating in a given mode."] # [inline (always)] # [must_use] pub fn sysosccfg_blockasyncall (& mut self) -> SYSOSCCFG_BLOCKASYNCALL_W < SYSOSCCFG_SPEC , 16 > { SYSOSCCFG_BLOCKASYNCALL_W :: new (self) } # [doc = "Bit 17 - FASTCPUEVENT may be used to assert a fast clock request when an interrupt is asserted to the CPU, reducing interrupt latency."] # [inline (always)] # [must_use] pub fn sysosccfg_fastcpuevent (& mut self) -> SYSOSCCFG_FASTCPUEVENT_W < SYSOSCCFG_SPEC , 17 > { SYSOSCCFG_FASTCPUEVENT_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "SYSOSC configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sysosccfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sysosccfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SYSOSCCFG_SPEC ; impl crate :: RegisterSpec for SYSOSCCFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`sysosccfg::R`](R) reader structure"] impl crate :: Readable for SYSOSCCFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`sysosccfg::W`](W) writer structure"] impl crate :: Writable for SYSOSCCFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SYSOSCCFG to value 0x0002_0000"] impl crate :: Resettable for SYSOSCCFG_SPEC { const RESET_VALUE : Self :: Ux = 0x0002_0000 ; }