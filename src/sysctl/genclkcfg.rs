# [doc = "Register `GENCLKCFG` reader"] pub type R = crate :: R < GENCLKCFG_SPEC > ; # [doc = "Register `GENCLKCFG` writer"] pub type W = crate :: W < GENCLKCFG_SPEC > ; # [doc = "Field `GENCLKCFG_EXCLKSRC` reader - EXCLKSRC selects the source for the CLK_OUT external clockoutput block. ULPCLK and MFPCLK require the CLK_OUT divider(EXCLKDIVEN) to be enabled"] pub type GENCLKCFG_EXCLKSRC_R = crate :: FieldReader ; # [doc = "Field `GENCLKCFG_EXCLKSRC` writer - EXCLKSRC selects the source for the CLK_OUT external clockoutput block. ULPCLK and MFPCLK require the CLK_OUT divider(EXCLKDIVEN) to be enabled"] pub type GENCLKCFG_EXCLKSRC_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 3 , O > ; # [doc = "Field `GENCLKCFG_EXCLKDIVVAL` reader - EXCLKDIVVAL selects the divider value for the divider in the CLK_OUT external clock output block."] pub type GENCLKCFG_EXCLKDIVVAL_R = crate :: FieldReader ; # [doc = "Field `GENCLKCFG_EXCLKDIVVAL` writer - EXCLKDIVVAL selects the divider value for the divider in the CLK_OUT external clock output block."] pub type GENCLKCFG_EXCLKDIVVAL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 3 , O > ; # [doc = "Field `GENCLKCFG_EXCLKDIVEN` reader - EXCLKDIVEN enables or disables the divider function of the CLK_OUT external clock output block."] pub type GENCLKCFG_EXCLKDIVEN_R = crate :: BitReader ; # [doc = "Field `GENCLKCFG_EXCLKDIVEN` writer - EXCLKDIVEN enables or disables the divider function of the CLK_OUT external clock output block."] pub type GENCLKCFG_EXCLKDIVEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `GENCLKCFG_FCCSELCLK` reader - FCCSELCLK selectes the frequency clock counter (FCC) clock source"] pub type GENCLKCFG_FCCSELCLK_R = crate :: FieldReader ; # [doc = "Field `GENCLKCFG_FCCSELCLK` writer - FCCSELCLK selectes the frequency clock counter (FCC) clock source"] pub type GENCLKCFG_FCCSELCLK_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 4 , O > ; # [doc = "Field `GENCLKCFG_FCCTRIGSRC` reader - FCCTRIGSRC selects the frequency clock counter (FCC) trigger source"] pub type GENCLKCFG_FCCTRIGSRC_R = crate :: BitReader ; # [doc = "Field `GENCLKCFG_FCCTRIGSRC` writer - FCCTRIGSRC selects the frequency clock counter (FCC) trigger source"] pub type GENCLKCFG_FCCTRIGSRC_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `GENCLKCFG_FCCLVLTRIG` reader - FCCLVLTRIG selects the frequency clock counter (FCC) trigger mode"] pub type GENCLKCFG_FCCLVLTRIG_R = crate :: BitReader ; # [doc = "Field `GENCLKCFG_FCCLVLTRIG` writer - FCCLVLTRIG selects the frequency clock counter (FCC) trigger mode"] pub type GENCLKCFG_FCCLVLTRIG_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `GENCLKCFG_ANACPUMPCFG` reader - ANACPUMPCFG selects the analog mux charge pump (VBOOST) enable method."] pub type GENCLKCFG_ANACPUMPCFG_R = crate :: FieldReader ; # [doc = "Field `GENCLKCFG_ANACPUMPCFG` writer - ANACPUMPCFG selects the analog mux charge pump (VBOOST) enable method."] pub type GENCLKCFG_ANACPUMPCFG_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O > ; # [doc = "Field `GENCLKCFG_FCCTRIGCNT` reader - FCCTRIGCNT specifies the number of trigger clock periods in the trigger window. FCCTRIGCNT=0h (one trigger clock period) up to 1Fh (32 trigger clock periods) may be specified."] pub type GENCLKCFG_FCCTRIGCNT_R = crate :: FieldReader ; # [doc = "Field `GENCLKCFG_FCCTRIGCNT` writer - FCCTRIGCNT specifies the number of trigger clock periods in the trigger window. FCCTRIGCNT=0h (one trigger clock period) up to 1Fh (32 trigger clock periods) may be specified."] pub type GENCLKCFG_FCCTRIGCNT_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 5 , O > ; impl R { # [doc = "Bits 0:2 - EXCLKSRC selects the source for the CLK_OUT external clockoutput block. ULPCLK and MFPCLK require the CLK_OUT divider(EXCLKDIVEN) to be enabled"] # [inline (always)] pub fn genclkcfg_exclksrc (& self) -> GENCLKCFG_EXCLKSRC_R { GENCLKCFG_EXCLKSRC_R :: new ((self . bits & 7) as u8) } # [doc = "Bits 4:6 - EXCLKDIVVAL selects the divider value for the divider in the CLK_OUT external clock output block."] # [inline (always)] pub fn genclkcfg_exclkdivval (& self) -> GENCLKCFG_EXCLKDIVVAL_R { GENCLKCFG_EXCLKDIVVAL_R :: new (((self . bits >> 4) & 7) as u8) } # [doc = "Bit 7 - EXCLKDIVEN enables or disables the divider function of the CLK_OUT external clock output block."] # [inline (always)] pub fn genclkcfg_exclkdiven (& self) -> GENCLKCFG_EXCLKDIVEN_R { GENCLKCFG_EXCLKDIVEN_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bits 16:19 - FCCSELCLK selectes the frequency clock counter (FCC) clock source"] # [inline (always)] pub fn genclkcfg_fccselclk (& self) -> GENCLKCFG_FCCSELCLK_R { GENCLKCFG_FCCSELCLK_R :: new (((self . bits >> 16) & 0x0f) as u8) } # [doc = "Bit 20 - FCCTRIGSRC selects the frequency clock counter (FCC) trigger source"] # [inline (always)] pub fn genclkcfg_fcctrigsrc (& self) -> GENCLKCFG_FCCTRIGSRC_R { GENCLKCFG_FCCTRIGSRC_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - FCCLVLTRIG selects the frequency clock counter (FCC) trigger mode"] # [inline (always)] pub fn genclkcfg_fcclvltrig (& self) -> GENCLKCFG_FCCLVLTRIG_R { GENCLKCFG_FCCLVLTRIG_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bits 22:23 - ANACPUMPCFG selects the analog mux charge pump (VBOOST) enable method."] # [inline (always)] pub fn genclkcfg_anacpumpcfg (& self) -> GENCLKCFG_ANACPUMPCFG_R { GENCLKCFG_ANACPUMPCFG_R :: new (((self . bits >> 22) & 3) as u8) } # [doc = "Bits 24:28 - FCCTRIGCNT specifies the number of trigger clock periods in the trigger window. FCCTRIGCNT=0h (one trigger clock period) up to 1Fh (32 trigger clock periods) may be specified."] # [inline (always)] pub fn genclkcfg_fcctrigcnt (& self) -> GENCLKCFG_FCCTRIGCNT_R { GENCLKCFG_FCCTRIGCNT_R :: new (((self . bits >> 24) & 0x1f) as u8) } } impl W { # [doc = "Bits 0:2 - EXCLKSRC selects the source for the CLK_OUT external clockoutput block. ULPCLK and MFPCLK require the CLK_OUT divider(EXCLKDIVEN) to be enabled"] # [inline (always)] # [must_use] pub fn genclkcfg_exclksrc (& mut self) -> GENCLKCFG_EXCLKSRC_W < GENCLKCFG_SPEC , 0 > { GENCLKCFG_EXCLKSRC_W :: new (self) } # [doc = "Bits 4:6 - EXCLKDIVVAL selects the divider value for the divider in the CLK_OUT external clock output block."] # [inline (always)] # [must_use] pub fn genclkcfg_exclkdivval (& mut self) -> GENCLKCFG_EXCLKDIVVAL_W < GENCLKCFG_SPEC , 4 > { GENCLKCFG_EXCLKDIVVAL_W :: new (self) } # [doc = "Bit 7 - EXCLKDIVEN enables or disables the divider function of the CLK_OUT external clock output block."] # [inline (always)] # [must_use] pub fn genclkcfg_exclkdiven (& mut self) -> GENCLKCFG_EXCLKDIVEN_W < GENCLKCFG_SPEC , 7 > { GENCLKCFG_EXCLKDIVEN_W :: new (self) } # [doc = "Bits 16:19 - FCCSELCLK selectes the frequency clock counter (FCC) clock source"] # [inline (always)] # [must_use] pub fn genclkcfg_fccselclk (& mut self) -> GENCLKCFG_FCCSELCLK_W < GENCLKCFG_SPEC , 16 > { GENCLKCFG_FCCSELCLK_W :: new (self) } # [doc = "Bit 20 - FCCTRIGSRC selects the frequency clock counter (FCC) trigger source"] # [inline (always)] # [must_use] pub fn genclkcfg_fcctrigsrc (& mut self) -> GENCLKCFG_FCCTRIGSRC_W < GENCLKCFG_SPEC , 20 > { GENCLKCFG_FCCTRIGSRC_W :: new (self) } # [doc = "Bit 21 - FCCLVLTRIG selects the frequency clock counter (FCC) trigger mode"] # [inline (always)] # [must_use] pub fn genclkcfg_fcclvltrig (& mut self) -> GENCLKCFG_FCCLVLTRIG_W < GENCLKCFG_SPEC , 21 > { GENCLKCFG_FCCLVLTRIG_W :: new (self) } # [doc = "Bits 22:23 - ANACPUMPCFG selects the analog mux charge pump (VBOOST) enable method."] # [inline (always)] # [must_use] pub fn genclkcfg_anacpumpcfg (& mut self) -> GENCLKCFG_ANACPUMPCFG_W < GENCLKCFG_SPEC , 22 > { GENCLKCFG_ANACPUMPCFG_W :: new (self) } # [doc = "Bits 24:28 - FCCTRIGCNT specifies the number of trigger clock periods in the trigger window. FCCTRIGCNT=0h (one trigger clock period) up to 1Fh (32 trigger clock periods) may be specified."] # [inline (always)] # [must_use] pub fn genclkcfg_fcctrigcnt (& mut self) -> GENCLKCFG_FCCTRIGCNT_W < GENCLKCFG_SPEC , 24 > { GENCLKCFG_FCCTRIGCNT_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "General clock configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`genclkcfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`genclkcfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GENCLKCFG_SPEC ; impl crate :: RegisterSpec for GENCLKCFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`genclkcfg::R`](R) reader structure"] impl crate :: Readable for GENCLKCFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`genclkcfg::W`](W) writer structure"] impl crate :: Writable for GENCLKCFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets GENCLKCFG to value 0"] impl crate :: Resettable for GENCLKCFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }