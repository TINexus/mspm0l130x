# [doc = "Register `NMIICLR` writer"] pub type W = crate :: W < NMIICLR_SPEC > ; # [doc = "Clr the BORLVL NMI\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum NMIICLR_BORLVL_AW { # [doc = "0: NO_EFFECT"] NMIICLR_BORLVL_NO_EFFECT = 0 , # [doc = "1: CLR"] NMIICLR_BORLVL_CLR = 1 , } impl From < NMIICLR_BORLVL_AW > for bool { # [inline (always)] fn from (variant : NMIICLR_BORLVL_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `NMIICLR_BORLVL` writer - Clr the BORLVL NMI"] pub type NMIICLR_BORLVL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , NMIICLR_BORLVL_AW > ; impl < 'a , REG , const O : u8 > NMIICLR_BORLVL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn nmiiclr_borlvl_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (NMIICLR_BORLVL_AW :: NMIICLR_BORLVL_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn nmiiclr_borlvl_clr (self) -> & 'a mut crate :: W < REG > { self . variant (NMIICLR_BORLVL_AW :: NMIICLR_BORLVL_CLR) } } # [doc = "Watch Dog 0 Fault\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum NMIICLR_WWDT0_AW { # [doc = "0: NO_EFFECT"] NMIICLR_WWDT0_NO_EFFECT = 0 , # [doc = "1: CLR"] NMIICLR_WWDT0_CLR = 1 , } impl From < NMIICLR_WWDT0_AW > for bool { # [inline (always)] fn from (variant : NMIICLR_WWDT0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `NMIICLR_WWDT0` writer - Watch Dog 0 Fault"] pub type NMIICLR_WWDT0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , NMIICLR_WWDT0_AW > ; impl < 'a , REG , const O : u8 > NMIICLR_WWDT0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn nmiiclr_wwdt0_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (NMIICLR_WWDT0_AW :: NMIICLR_WWDT0_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn nmiiclr_wwdt0_clr (self) -> & 'a mut crate :: W < REG > { self . variant (NMIICLR_WWDT0_AW :: NMIICLR_WWDT0_CLR) } } impl W { # [doc = "Bit 0 - Clr the BORLVL NMI"] # [inline (always)] # [must_use] pub fn nmiiclr_borlvl (& mut self) -> NMIICLR_BORLVL_W < NMIICLR_SPEC , 0 > { NMIICLR_BORLVL_W :: new (self) } # [doc = "Bit 1 - Watch Dog 0 Fault"] # [inline (always)] # [must_use] pub fn nmiiclr_wwdt0 (& mut self) -> NMIICLR_WWDT0_W < NMIICLR_SPEC , 1 > { NMIICLR_WWDT0_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "NMI interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`nmiiclr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct NMIICLR_SPEC ; impl crate :: RegisterSpec for NMIICLR_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`nmiiclr::W`](W) writer structure"] impl crate :: Writable for NMIICLR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets NMIICLR to value 0"] impl crate :: Resettable for NMIICLR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }