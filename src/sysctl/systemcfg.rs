# [doc = "Register `SYSTEMCFG` reader"] pub type R = crate :: R < SYSTEMCFG_SPEC > ; # [doc = "Register `SYSTEMCFG` writer"] pub type W = crate :: W < SYSTEMCFG_SPEC > ; # [doc = "Field `SYSTEMCFG_WWDTLP0RSTDIS` reader - WWDTLP0RSTDIS specifies whether a WWDT Error Event will trigger a BOOTRST or an NMI."] pub type SYSTEMCFG_WWDTLP0RSTDIS_R = crate :: BitReader < SYSTEMCFG_WWDTLP0RSTDIS_A > ; # [doc = "WWDTLP0RSTDIS specifies whether a WWDT Error Event will trigger a BOOTRST or an NMI.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SYSTEMCFG_WWDTLP0RSTDIS_A { # [doc = "0: FALSE"] SYSTEMCFG_WWDTLP0RSTDIS_FALSE = 0 , # [doc = "1: TRUE"] SYSTEMCFG_WWDTLP0RSTDIS_TRUE = 1 , } impl From < SYSTEMCFG_WWDTLP0RSTDIS_A > for bool { # [inline (always)] fn from (variant : SYSTEMCFG_WWDTLP0RSTDIS_A) -> Self { variant as u8 != 0 } } impl SYSTEMCFG_WWDTLP0RSTDIS_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SYSTEMCFG_WWDTLP0RSTDIS_A { match self . bits { false => SYSTEMCFG_WWDTLP0RSTDIS_A :: SYSTEMCFG_WWDTLP0RSTDIS_FALSE , true => SYSTEMCFG_WWDTLP0RSTDIS_A :: SYSTEMCFG_WWDTLP0RSTDIS_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_systemcfg_wwdtlp0rstdis_false (& self) -> bool { * self == SYSTEMCFG_WWDTLP0RSTDIS_A :: SYSTEMCFG_WWDTLP0RSTDIS_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_systemcfg_wwdtlp0rstdis_true (& self) -> bool { * self == SYSTEMCFG_WWDTLP0RSTDIS_A :: SYSTEMCFG_WWDTLP0RSTDIS_TRUE } } # [doc = "Field `SYSTEMCFG_WWDTLP0RSTDIS` writer - WWDTLP0RSTDIS specifies whether a WWDT Error Event will trigger a BOOTRST or an NMI."] pub type SYSTEMCFG_WWDTLP0RSTDIS_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SYSTEMCFG_WWDTLP0RSTDIS_A > ; impl < 'a , REG , const O : u8 > SYSTEMCFG_WWDTLP0RSTDIS_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "FALSE"] # [inline (always)] pub fn systemcfg_wwdtlp0rstdis_false (self) -> & 'a mut crate :: W < REG > { self . variant (SYSTEMCFG_WWDTLP0RSTDIS_A :: SYSTEMCFG_WWDTLP0RSTDIS_FALSE) } # [doc = "TRUE"] # [inline (always)] pub fn systemcfg_wwdtlp0rstdis_true (self) -> & 'a mut crate :: W < REG > { self . variant (SYSTEMCFG_WWDTLP0RSTDIS_A :: SYSTEMCFG_WWDTLP0RSTDIS_TRUE) } } # [doc = "The key value of 1Bh (27) must be written to KEY together with contents to be updated. Reads as 0\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SYSTEMCFG_KEY_AW { # [doc = "27: VALUE"] SYSTEMCFG_KEY_VALUE = 27 , } impl From < SYSTEMCFG_KEY_AW > for u8 { # [inline (always)] fn from (variant : SYSTEMCFG_KEY_AW) -> Self { variant as _ } } impl crate :: FieldSpec for SYSTEMCFG_KEY_AW { type Ux = u8 ; } # [doc = "Field `SYSTEMCFG_KEY` writer - The key value of 1Bh (27) must be written to KEY together with contents to be updated. Reads as 0"] pub type SYSTEMCFG_KEY_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O , SYSTEMCFG_KEY_AW > ; impl < 'a , REG , const O : u8 > SYSTEMCFG_KEY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "VALUE"] # [inline (always)] pub fn systemcfg_key_value (self) -> & 'a mut crate :: W < REG > { self . variant (SYSTEMCFG_KEY_AW :: SYSTEMCFG_KEY_VALUE) } } impl R { # [doc = "Bit 0 - WWDTLP0RSTDIS specifies whether a WWDT Error Event will trigger a BOOTRST or an NMI."] # [inline (always)] pub fn systemcfg_wwdtlp0rstdis (& self) -> SYSTEMCFG_WWDTLP0RSTDIS_R { SYSTEMCFG_WWDTLP0RSTDIS_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - WWDTLP0RSTDIS specifies whether a WWDT Error Event will trigger a BOOTRST or an NMI."] # [inline (always)] # [must_use] pub fn systemcfg_wwdtlp0rstdis (& mut self) -> SYSTEMCFG_WWDTLP0RSTDIS_W < SYSTEMCFG_SPEC , 0 > { SYSTEMCFG_WWDTLP0RSTDIS_W :: new (self) } # [doc = "Bits 24:31 - The key value of 1Bh (27) must be written to KEY together with contents to be updated. Reads as 0"] # [inline (always)] # [must_use] pub fn systemcfg_key (& mut self) -> SYSTEMCFG_KEY_W < SYSTEMCFG_SPEC , 24 > { SYSTEMCFG_KEY_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "System configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`systemcfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`systemcfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SYSTEMCFG_SPEC ; impl crate :: RegisterSpec for SYSTEMCFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`systemcfg::R`](R) reader structure"] impl crate :: Readable for SYSTEMCFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`systemcfg::W`](W) writer structure"] impl crate :: Writable for SYSTEMCFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SYSTEMCFG to value 0"] impl crate :: Resettable for SYSTEMCFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }