# [doc = "Register `MCLKCFG` reader"] pub type R = crate :: R < MCLKCFG_SPEC > ; # [doc = "Register `MCLKCFG` writer"] pub type W = crate :: W < MCLKCFG_SPEC > ; # [doc = "Field `MCLKCFG_MDIV` reader - MDIV may be used to divide the MCLK frequency when MCLK is sourced from SYSOSC"] pub type MCLKCFG_MDIV_R = crate :: FieldReader ; # [doc = "Field `MCLKCFG_MDIV` writer - MDIV may be used to divide the MCLK frequency when MCLK is sourced from SYSOSC"] pub type MCLKCFG_MDIV_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 4 , O > ; # [doc = "Field `MCLKCFG_FLASHWAIT` reader - FLASHWAIT specifies the number of flash wait states when MCLK is sourced from HSCLK"] pub type MCLKCFG_FLASHWAIT_R = crate :: FieldReader ; # [doc = "Field `MCLKCFG_FLASHWAIT` writer - FLASHWAIT specifies the number of flash wait states when MCLK is sourced from HSCLK"] pub type MCLKCFG_FLASHWAIT_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 4 , O > ; # [doc = "Field `MCLKCFG_USEMFTICK` reader - USEMFTICK specifies whether the 4MHz constant-rate cloc20(MFCLK) to peripherals is enabled or disabled."] pub type MCLKCFG_USEMFTICK_R = crate :: BitReader ; # [doc = "Field `MCLKCFG_USEMFTICK` writer - USEMFTICK specifies whether the 4MHz constant-rate cloc20(MFCLK) to peripherals is enabled or disabled."] pub type MCLKCFG_USEMFTICK_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `MCLKCFG_USELFCLK` reader - USELFCLK sets the MCLK source policy. Set USELFCLK to use LFCLK as the MCLK source"] pub type MCLKCFG_USELFCLK_R = crate :: BitReader ; # [doc = "Field `MCLKCFG_USELFCLK` writer - USELFCLK sets the MCLK source policy. Set USELFCLK to use LFCLK as the MCLK source"] pub type MCLKCFG_USELFCLK_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `MCLKCFG_STOPCLKSTBY` reader - STOPCLKSTBY sets the STANDBY mode policy (STANDBY0 or STANDBY1)."] pub type MCLKCFG_STOPCLKSTBY_R = crate :: BitReader ; # [doc = "Field `MCLKCFG_STOPCLKSTBY` writer - STOPCLKSTBY sets the STANDBY mode policy (STANDBY0 or STANDBY1)."] pub type MCLKCFG_STOPCLKSTBY_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; # [doc = "Field `MCLKCFG_MCLKDEADCHK` reader - MCLKDEADCHK enables or disables the continuous MCLK dead check monitor"] pub type MCLKCFG_MCLKDEADCHK_R = crate :: BitReader ; # [doc = "Field `MCLKCFG_MCLKDEADCHK` writer - MCLKDEADCHK enables or disables the continuous MCLK dead check monitor"] pub type MCLKCFG_MCLKDEADCHK_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O > ; impl R { # [doc = "Bits 0:3 - MDIV may be used to divide the MCLK frequency when MCLK is sourced from SYSOSC"] # [inline (always)] pub fn mclkcfg_mdiv (& self) -> MCLKCFG_MDIV_R { MCLKCFG_MDIV_R :: new ((self . bits & 0x0f) as u8) } # [doc = "Bits 8:11 - FLASHWAIT specifies the number of flash wait states when MCLK is sourced from HSCLK"] # [inline (always)] pub fn mclkcfg_flashwait (& self) -> MCLKCFG_FLASHWAIT_R { MCLKCFG_FLASHWAIT_R :: new (((self . bits >> 8) & 0x0f) as u8) } # [doc = "Bit 12 - USEMFTICK specifies whether the 4MHz constant-rate cloc20(MFCLK) to peripherals is enabled or disabled."] # [inline (always)] pub fn mclkcfg_usemftick (& self) -> MCLKCFG_USEMFTICK_R { MCLKCFG_USEMFTICK_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 20 - USELFCLK sets the MCLK source policy. Set USELFCLK to use LFCLK as the MCLK source"] # [inline (always)] pub fn mclkcfg_uselfclk (& self) -> MCLKCFG_USELFCLK_R { MCLKCFG_USELFCLK_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - STOPCLKSTBY sets the STANDBY mode policy (STANDBY0 or STANDBY1)."] # [inline (always)] pub fn mclkcfg_stopclkstby (& self) -> MCLKCFG_STOPCLKSTBY_R { MCLKCFG_STOPCLKSTBY_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - MCLKDEADCHK enables or disables the continuous MCLK dead check monitor"] # [inline (always)] pub fn mclkcfg_mclkdeadchk (& self) -> MCLKCFG_MCLKDEADCHK_R { MCLKCFG_MCLKDEADCHK_R :: new (((self . bits >> 22) & 1) != 0) } } impl W { # [doc = "Bits 0:3 - MDIV may be used to divide the MCLK frequency when MCLK is sourced from SYSOSC"] # [inline (always)] # [must_use] pub fn mclkcfg_mdiv (& mut self) -> MCLKCFG_MDIV_W < MCLKCFG_SPEC , 0 > { MCLKCFG_MDIV_W :: new (self) } # [doc = "Bits 8:11 - FLASHWAIT specifies the number of flash wait states when MCLK is sourced from HSCLK"] # [inline (always)] # [must_use] pub fn mclkcfg_flashwait (& mut self) -> MCLKCFG_FLASHWAIT_W < MCLKCFG_SPEC , 8 > { MCLKCFG_FLASHWAIT_W :: new (self) } # [doc = "Bit 12 - USEMFTICK specifies whether the 4MHz constant-rate cloc20(MFCLK) to peripherals is enabled or disabled."] # [inline (always)] # [must_use] pub fn mclkcfg_usemftick (& mut self) -> MCLKCFG_USEMFTICK_W < MCLKCFG_SPEC , 12 > { MCLKCFG_USEMFTICK_W :: new (self) } # [doc = "Bit 20 - USELFCLK sets the MCLK source policy. Set USELFCLK to use LFCLK as the MCLK source"] # [inline (always)] # [must_use] pub fn mclkcfg_uselfclk (& mut self) -> MCLKCFG_USELFCLK_W < MCLKCFG_SPEC , 20 > { MCLKCFG_USELFCLK_W :: new (self) } # [doc = "Bit 21 - STOPCLKSTBY sets the STANDBY mode policy (STANDBY0 or STANDBY1)."] # [inline (always)] # [must_use] pub fn mclkcfg_stopclkstby (& mut self) -> MCLKCFG_STOPCLKSTBY_W < MCLKCFG_SPEC , 21 > { MCLKCFG_STOPCLKSTBY_W :: new (self) } # [doc = "Bit 22 - MCLKDEADCHK enables or disables the continuous MCLK dead check monitor"] # [inline (always)] # [must_use] pub fn mclkcfg_mclkdeadchk (& mut self) -> MCLKCFG_MCLKDEADCHK_W < MCLKCFG_SPEC , 22 > { MCLKCFG_MCLKDEADCHK_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Main clock (MCLK) configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mclkcfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mclkcfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MCLKCFG_SPEC ; impl crate :: RegisterSpec for MCLKCFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`mclkcfg::R`](R) reader structure"] impl crate :: Readable for MCLKCFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`mclkcfg::W`](W) writer structure"] impl crate :: Writable for MCLKCFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets MCLKCFG to value 0"] impl crate :: Resettable for MCLKCFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }