# [doc = "Register `RESETLEVEL` reader"] pub type R = crate :: R < RESETLEVEL_SPEC > ; # [doc = "Register `RESETLEVEL` writer"] pub type W = crate :: W < RESETLEVEL_SPEC > ; # [doc = "Field `RESETLEVEL_LEVEL` reader - LEVEL is used to specify the type of reset to be issued when RESETCMD is set to generate a software triggered reset."] pub type RESETLEVEL_LEVEL_R = crate :: FieldReader < RESETLEVEL_LEVEL_A > ; # [doc = "LEVEL is used to specify the type of reset to be issued when RESETCMD is set to generate a software triggered reset.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum RESETLEVEL_LEVEL_A { # [doc = "0: CPU"] RESETLEVEL_LEVEL_CPU = 0 , # [doc = "1: BOOT"] RESETLEVEL_LEVEL_BOOT = 1 , # [doc = "2: BOOTLOADERENTRY"] RESETLEVEL_LEVEL_BOOTLOADERENTRY = 2 , # [doc = "3: POR"] RESETLEVEL_LEVEL_POR = 3 , # [doc = "4: BOOTLOADEREXIT"] RESETLEVEL_LEVEL_BOOTLOADEREXIT = 4 , } impl From < RESETLEVEL_LEVEL_A > for u8 { # [inline (always)] fn from (variant : RESETLEVEL_LEVEL_A) -> Self { variant as _ } } impl crate :: FieldSpec for RESETLEVEL_LEVEL_A { type Ux = u8 ; } impl RESETLEVEL_LEVEL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < RESETLEVEL_LEVEL_A > { match self . bits { 0 => Some (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_CPU) , 1 => Some (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOT) , 2 => Some (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOTLOADERENTRY) , 3 => Some (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_POR) , 4 => Some (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOTLOADEREXIT) , _ => None , } } # [doc = "CPU"] # [inline (always)] pub fn is_resetlevel_level_cpu (& self) -> bool { * self == RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_CPU } # [doc = "BOOT"] # [inline (always)] pub fn is_resetlevel_level_boot (& self) -> bool { * self == RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOT } # [doc = "BOOTLOADERENTRY"] # [inline (always)] pub fn is_resetlevel_level_bootloaderentry (& self) -> bool { * self == RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOTLOADERENTRY } # [doc = "POR"] # [inline (always)] pub fn is_resetlevel_level_por (& self) -> bool { * self == RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_POR } # [doc = "BOOTLOADEREXIT"] # [inline (always)] pub fn is_resetlevel_level_bootloaderexit (& self) -> bool { * self == RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOTLOADEREXIT } } # [doc = "Field `RESETLEVEL_LEVEL` writer - LEVEL is used to specify the type of reset to be issued when RESETCMD is set to generate a software triggered reset."] pub type RESETLEVEL_LEVEL_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 3 , O , RESETLEVEL_LEVEL_A > ; impl < 'a , REG , const O : u8 > RESETLEVEL_LEVEL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "CPU"] # [inline (always)] pub fn resetlevel_level_cpu (self) -> & 'a mut crate :: W < REG > { self . variant (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_CPU) } # [doc = "BOOT"] # [inline (always)] pub fn resetlevel_level_boot (self) -> & 'a mut crate :: W < REG > { self . variant (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOT) } # [doc = "BOOTLOADERENTRY"] # [inline (always)] pub fn resetlevel_level_bootloaderentry (self) -> & 'a mut crate :: W < REG > { self . variant (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOTLOADERENTRY) } # [doc = "POR"] # [inline (always)] pub fn resetlevel_level_por (self) -> & 'a mut crate :: W < REG > { self . variant (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_POR) } # [doc = "BOOTLOADEREXIT"] # [inline (always)] pub fn resetlevel_level_bootloaderexit (self) -> & 'a mut crate :: W < REG > { self . variant (RESETLEVEL_LEVEL_A :: RESETLEVEL_LEVEL_BOOTLOADEREXIT) } } impl R { # [doc = "Bits 0:2 - LEVEL is used to specify the type of reset to be issued when RESETCMD is set to generate a software triggered reset."] # [inline (always)] pub fn resetlevel_level (& self) -> RESETLEVEL_LEVEL_R { RESETLEVEL_LEVEL_R :: new ((self . bits & 7) as u8) } } impl W { # [doc = "Bits 0:2 - LEVEL is used to specify the type of reset to be issued when RESETCMD is set to generate a software triggered reset."] # [inline (always)] # [must_use] pub fn resetlevel_level (& mut self) -> RESETLEVEL_LEVEL_W < RESETLEVEL_SPEC , 0 > { RESETLEVEL_LEVEL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Reset level for application-triggered reset command\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`resetlevel::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`resetlevel::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RESETLEVEL_SPEC ; impl crate :: RegisterSpec for RESETLEVEL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`resetlevel::R`](R) reader structure"] impl crate :: Readable for RESETLEVEL_SPEC { } # [doc = "`write(|w| ..)` method takes [`resetlevel::W`](W) writer structure"] impl crate :: Writable for RESETLEVEL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RESETLEVEL to value 0"] impl crate :: Resettable for RESETLEVEL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }