# [doc = "Register `MIS` reader"] pub type R = crate :: R < MIS_SPEC > ; # [doc = "Field `MIS_LFOSCGOOD` reader - Masked status of the LFOSCGOOD interrupt."] pub type MIS_LFOSCGOOD_R = crate :: BitReader < MIS_LFOSCGOOD_A > ; # [doc = "Masked status of the LFOSCGOOD interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_LFOSCGOOD_A { # [doc = "0: FALSE"] MIS_LFOSCGOOD_FALSE = 0 , # [doc = "1: TRUE"] MIS_LFOSCGOOD_TRUE = 1 , } impl From < MIS_LFOSCGOOD_A > for bool { # [inline (always)] fn from (variant : MIS_LFOSCGOOD_A) -> Self { variant as u8 != 0 } } impl MIS_LFOSCGOOD_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_LFOSCGOOD_A { match self . bits { false => MIS_LFOSCGOOD_A :: MIS_LFOSCGOOD_FALSE , true => MIS_LFOSCGOOD_A :: MIS_LFOSCGOOD_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_mis_lfoscgood_false (& self) -> bool { * self == MIS_LFOSCGOOD_A :: MIS_LFOSCGOOD_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_mis_lfoscgood_true (& self) -> bool { * self == MIS_LFOSCGOOD_A :: MIS_LFOSCGOOD_TRUE } } # [doc = "Field `MIS_ANACLKERR` reader - Analog Clocking Consistency Error"] pub type MIS_ANACLKERR_R = crate :: BitReader < MIS_ANACLKERR_A > ; # [doc = "Analog Clocking Consistency Error\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_ANACLKERR_A { # [doc = "0: FALSE"] MIS_ANACLKERR_FALSE = 0 , # [doc = "1: TRUE"] MIS_ANACLKERR_TRUE = 1 , } impl From < MIS_ANACLKERR_A > for bool { # [inline (always)] fn from (variant : MIS_ANACLKERR_A) -> Self { variant as u8 != 0 } } impl MIS_ANACLKERR_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_ANACLKERR_A { match self . bits { false => MIS_ANACLKERR_A :: MIS_ANACLKERR_FALSE , true => MIS_ANACLKERR_A :: MIS_ANACLKERR_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_mis_anaclkerr_false (& self) -> bool { * self == MIS_ANACLKERR_A :: MIS_ANACLKERR_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_mis_anaclkerr_true (& self) -> bool { * self == MIS_ANACLKERR_A :: MIS_ANACLKERR_TRUE } } impl R { # [doc = "Bit 0 - Masked status of the LFOSCGOOD interrupt."] # [inline (always)] pub fn mis_lfoscgood (& self) -> MIS_LFOSCGOOD_R { MIS_LFOSCGOOD_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Analog Clocking Consistency Error"] # [inline (always)] pub fn mis_anaclkerr (& self) -> MIS_ANACLKERR_R { MIS_ANACLKERR_R :: new (((self . bits >> 1) & 1) != 0) } } # [doc = "SYSCTL masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mis::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MIS_SPEC ; impl crate :: RegisterSpec for MIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`mis::R`](R) reader structure"] impl crate :: Readable for MIS_SPEC { } # [doc = "`reset()` method sets MIS to value 0"] impl crate :: Resettable for MIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }