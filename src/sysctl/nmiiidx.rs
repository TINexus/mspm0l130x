# [doc = "Register `NMIIIDX` reader"] pub type R = crate :: R < NMIIIDX_SPEC > ; # [doc = "Field `NMIIIDX_STAT` reader - The NMI interrupt index (NMIIIDX) register generates a value corresponding to the highest priority pending NMI source. This value may be used as an address offset for fast, deterministic handling in the NMI service routine. A read of the NMIIIDX register will clear the corresponding interrupt status in the NMIRIS register."] pub type NMIIIDX_STAT_R = crate :: FieldReader < NMIIIDX_STAT_A > ; # [doc = "The NMI interrupt index (NMIIIDX) register generates a value corresponding to the highest priority pending NMI source. This value may be used as an address offset for fast, deterministic handling in the NMI service routine. A read of the NMIIIDX register will clear the corresponding interrupt status in the NMIRIS register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum NMIIIDX_STAT_A { # [doc = "0: NO_INTR"] NMIIIDX_STAT_NO_INTR = 0 , # [doc = "1: BORLVL"] NMIIIDX_STAT_BORLVL = 1 , # [doc = "2: WWDT0"] NMIIIDX_STAT_WWDT0 = 2 , } impl From < NMIIIDX_STAT_A > for u8 { # [inline (always)] fn from (variant : NMIIIDX_STAT_A) -> Self { variant as _ } } impl crate :: FieldSpec for NMIIIDX_STAT_A { type Ux = u8 ; } impl NMIIIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < NMIIIDX_STAT_A > { match self . bits { 0 => Some (NMIIIDX_STAT_A :: NMIIIDX_STAT_NO_INTR) , 1 => Some (NMIIIDX_STAT_A :: NMIIIDX_STAT_BORLVL) , 2 => Some (NMIIIDX_STAT_A :: NMIIIDX_STAT_WWDT0) , _ => None , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_nmiiidx_stat_no_intr (& self) -> bool { * self == NMIIIDX_STAT_A :: NMIIIDX_STAT_NO_INTR } # [doc = "BORLVL"] # [inline (always)] pub fn is_nmiiidx_stat_borlvl (& self) -> bool { * self == NMIIIDX_STAT_A :: NMIIIDX_STAT_BORLVL } # [doc = "WWDT0"] # [inline (always)] pub fn is_nmiiidx_stat_wwdt0 (& self) -> bool { * self == NMIIIDX_STAT_A :: NMIIIDX_STAT_WWDT0 } } impl R { # [doc = "Bits 0:1 - The NMI interrupt index (NMIIIDX) register generates a value corresponding to the highest priority pending NMI source. This value may be used as an address offset for fast, deterministic handling in the NMI service routine. A read of the NMIIIDX register will clear the corresponding interrupt status in the NMIRIS register."] # [inline (always)] pub fn nmiiidx_stat (& self) -> NMIIIDX_STAT_R { NMIIIDX_STAT_R :: new ((self . bits & 3) as u8) } } # [doc = "NMI interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`nmiiidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct NMIIIDX_SPEC ; impl crate :: RegisterSpec for NMIIIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`nmiiidx::R`](R) reader structure"] impl crate :: Readable for NMIIIDX_SPEC { } # [doc = "`reset()` method sets NMIIIDX to value 0"] impl crate :: Resettable for NMIIIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }