# [doc = "Register `RSTCAUSE` reader"] pub type R = crate :: R < RSTCAUSE_SPEC > ; # [doc = "Field `RSTCAUSE_ID` reader - ID is a read-to-clear field which indicates the lowest level reset cause since the last read."] pub type RSTCAUSE_ID_R = crate :: FieldReader < RSTCAUSE_ID_A > ; # [doc = "ID is a read-to-clear field which indicates the lowest level reset cause since the last read.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum RSTCAUSE_ID_A { # [doc = "0: NORST"] RSTCAUSE_ID_NORST = 0 , # [doc = "1: PORHWFAIL"] RSTCAUSE_ID_PORHWFAIL = 1 , # [doc = "2: POREXNRST"] RSTCAUSE_ID_POREXNRST = 2 , # [doc = "3: PORSW"] RSTCAUSE_ID_PORSW = 3 , # [doc = "4: BORSUPPLY"] RSTCAUSE_ID_BORSUPPLY = 4 , # [doc = "5: BORWAKESHUTDN"] RSTCAUSE_ID_BORWAKESHUTDN = 5 , # [doc = "8: BOOTNONPMUPARITY"] RSTCAUSE_ID_BOOTNONPMUPARITY = 8 , # [doc = "9: BOOTCLKFAIL"] RSTCAUSE_ID_BOOTCLKFAIL = 9 , # [doc = "12: BOOTEXNRST"] RSTCAUSE_ID_BOOTEXNRST = 12 , # [doc = "13: BOOTSW"] RSTCAUSE_ID_BOOTSW = 13 , # [doc = "14: SYSWWDT0"] RSTCAUSE_ID_SYSWWDT0 = 14 , # [doc = "16: SYSBSLEXIT"] RSTCAUSE_ID_SYSBSLEXIT = 16 , # [doc = "17: SYSBSLENTRY"] RSTCAUSE_ID_SYSBSLENTRY = 17 , # [doc = "19: SYSWWDT1"] RSTCAUSE_ID_SYSWWDT1 = 19 , # [doc = "20: SYSFLASHECC"] RSTCAUSE_ID_SYSFLASHECC = 20 , # [doc = "21: SYSCPULOCK"] RSTCAUSE_ID_SYSCPULOCK = 21 , # [doc = "26: SYSDBG"] RSTCAUSE_ID_SYSDBG = 26 , # [doc = "27: SYSSW"] RSTCAUSE_ID_SYSSW = 27 , # [doc = "28: CPUDBG"] RSTCAUSE_ID_CPUDBG = 28 , # [doc = "29: CPUSW"] RSTCAUSE_ID_CPUSW = 29 , } impl From < RSTCAUSE_ID_A > for u8 { # [inline (always)] fn from (variant : RSTCAUSE_ID_A) -> Self { variant as _ } } impl crate :: FieldSpec for RSTCAUSE_ID_A { type Ux = u8 ; } impl RSTCAUSE_ID_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < RSTCAUSE_ID_A > { match self . bits { 0 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_NORST) , 1 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_PORHWFAIL) , 2 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_POREXNRST) , 3 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_PORSW) , 4 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_BORSUPPLY) , 5 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_BORWAKESHUTDN) , 8 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTNONPMUPARITY) , 9 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTCLKFAIL) , 12 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTEXNRST) , 13 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTSW) , 14 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSWWDT0) , 16 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSBSLEXIT) , 17 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSBSLENTRY) , 19 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSWWDT1) , 20 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSFLASHECC) , 21 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSCPULOCK) , 26 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSDBG) , 27 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSSW) , 28 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_CPUDBG) , 29 => Some (RSTCAUSE_ID_A :: RSTCAUSE_ID_CPUSW) , _ => None , } } # [doc = "NORST"] # [inline (always)] pub fn is_rstcause_id_norst (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_NORST } # [doc = "PORHWFAIL"] # [inline (always)] pub fn is_rstcause_id_porhwfail (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_PORHWFAIL } # [doc = "POREXNRST"] # [inline (always)] pub fn is_rstcause_id_porexnrst (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_POREXNRST } # [doc = "PORSW"] # [inline (always)] pub fn is_rstcause_id_porsw (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_PORSW } # [doc = "BORSUPPLY"] # [inline (always)] pub fn is_rstcause_id_borsupply (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_BORSUPPLY } # [doc = "BORWAKESHUTDN"] # [inline (always)] pub fn is_rstcause_id_borwakeshutdn (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_BORWAKESHUTDN } # [doc = "BOOTNONPMUPARITY"] # [inline (always)] pub fn is_rstcause_id_bootnonpmuparity (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTNONPMUPARITY } # [doc = "BOOTCLKFAIL"] # [inline (always)] pub fn is_rstcause_id_bootclkfail (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTCLKFAIL } # [doc = "BOOTEXNRST"] # [inline (always)] pub fn is_rstcause_id_bootexnrst (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTEXNRST } # [doc = "BOOTSW"] # [inline (always)] pub fn is_rstcause_id_bootsw (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_BOOTSW } # [doc = "SYSWWDT0"] # [inline (always)] pub fn is_rstcause_id_syswwdt0 (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSWWDT0 } # [doc = "SYSBSLEXIT"] # [inline (always)] pub fn is_rstcause_id_sysbslexit (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSBSLEXIT } # [doc = "SYSBSLENTRY"] # [inline (always)] pub fn is_rstcause_id_sysbslentry (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSBSLENTRY } # [doc = "SYSWWDT1"] # [inline (always)] pub fn is_rstcause_id_syswwdt1 (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSWWDT1 } # [doc = "SYSFLASHECC"] # [inline (always)] pub fn is_rstcause_id_sysflashecc (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSFLASHECC } # [doc = "SYSCPULOCK"] # [inline (always)] pub fn is_rstcause_id_syscpulock (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSCPULOCK } # [doc = "SYSDBG"] # [inline (always)] pub fn is_rstcause_id_sysdbg (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSDBG } # [doc = "SYSSW"] # [inline (always)] pub fn is_rstcause_id_syssw (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_SYSSW } # [doc = "CPUDBG"] # [inline (always)] pub fn is_rstcause_id_cpudbg (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_CPUDBG } # [doc = "CPUSW"] # [inline (always)] pub fn is_rstcause_id_cpusw (& self) -> bool { * self == RSTCAUSE_ID_A :: RSTCAUSE_ID_CPUSW } } impl R { # [doc = "Bits 0:4 - ID is a read-to-clear field which indicates the lowest level reset cause since the last read."] # [inline (always)] pub fn rstcause_id (& self) -> RSTCAUSE_ID_R { RSTCAUSE_ID_R :: new ((self . bits & 0x1f) as u8) } } # [doc = "Reset cause\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rstcause::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RSTCAUSE_SPEC ; impl crate :: RegisterSpec for RSTCAUSE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`rstcause::R`](R) reader structure"] impl crate :: Readable for RSTCAUSE_SPEC { } # [doc = "`reset()` method sets RSTCAUSE to value 0"] impl crate :: Resettable for RSTCAUSE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }