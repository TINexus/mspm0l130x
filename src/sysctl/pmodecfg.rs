# [doc = "Register `PMODECFG` reader"] pub type R = crate :: R < PMODECFG_SPEC > ; # [doc = "Register `PMODECFG` writer"] pub type W = crate :: W < PMODECFG_SPEC > ; # [doc = "Field `PMODECFG_DSLEEP` reader - DSLEEP selects the operating mode to enter upon a DEEPSLEEP request from the CPU."] pub type PMODECFG_DSLEEP_R = crate :: FieldReader < PMODECFG_DSLEEP_A > ; # [doc = "DSLEEP selects the operating mode to enter upon a DEEPSLEEP request from the CPU.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum PMODECFG_DSLEEP_A { # [doc = "0: STOP"] PMODECFG_DSLEEP_STOP = 0 , # [doc = "1: STANDBY"] PMODECFG_DSLEEP_STANDBY = 1 , # [doc = "2: SHUTDOWN"] PMODECFG_DSLEEP_SHUTDOWN = 2 , } impl From < PMODECFG_DSLEEP_A > for u8 { # [inline (always)] fn from (variant : PMODECFG_DSLEEP_A) -> Self { variant as _ } } impl crate :: FieldSpec for PMODECFG_DSLEEP_A { type Ux = u8 ; } impl PMODECFG_DSLEEP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < PMODECFG_DSLEEP_A > { match self . bits { 0 => Some (PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_STOP) , 1 => Some (PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_STANDBY) , 2 => Some (PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_SHUTDOWN) , _ => None , } } # [doc = "STOP"] # [inline (always)] pub fn is_pmodecfg_dsleep_stop (& self) -> bool { * self == PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_STOP } # [doc = "STANDBY"] # [inline (always)] pub fn is_pmodecfg_dsleep_standby (& self) -> bool { * self == PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_STANDBY } # [doc = "SHUTDOWN"] # [inline (always)] pub fn is_pmodecfg_dsleep_shutdown (& self) -> bool { * self == PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_SHUTDOWN } } # [doc = "Field `PMODECFG_DSLEEP` writer - DSLEEP selects the operating mode to enter upon a DEEPSLEEP request from the CPU."] pub type PMODECFG_DSLEEP_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O , PMODECFG_DSLEEP_A > ; impl < 'a , REG , const O : u8 > PMODECFG_DSLEEP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "STOP"] # [inline (always)] pub fn pmodecfg_dsleep_stop (self) -> & 'a mut crate :: W < REG > { self . variant (PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_STOP) } # [doc = "STANDBY"] # [inline (always)] pub fn pmodecfg_dsleep_standby (self) -> & 'a mut crate :: W < REG > { self . variant (PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_STANDBY) } # [doc = "SHUTDOWN"] # [inline (always)] pub fn pmodecfg_dsleep_shutdown (self) -> & 'a mut crate :: W < REG > { self . variant (PMODECFG_DSLEEP_A :: PMODECFG_DSLEEP_SHUTDOWN) } } # [doc = "Field `PMODECFG_SYSSRAMONSTOP` reader - SYSSRAMONSTOP selects whether the SRAM controller is enabled or disabled in STOP mode."] pub type PMODECFG_SYSSRAMONSTOP_R = crate :: BitReader < PMODECFG_SYSSRAMONSTOP_A > ; # [doc = "SYSSRAMONSTOP selects whether the SRAM controller is enabled or disabled in STOP mode.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum PMODECFG_SYSSRAMONSTOP_A { # [doc = "0: DISABLE"] PMODECFG_SYSSRAMONSTOP_DISABLE = 0 , # [doc = "1: ENABLE"] PMODECFG_SYSSRAMONSTOP_ENABLE = 1 , } impl From < PMODECFG_SYSSRAMONSTOP_A > for bool { # [inline (always)] fn from (variant : PMODECFG_SYSSRAMONSTOP_A) -> Self { variant as u8 != 0 } } impl PMODECFG_SYSSRAMONSTOP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> PMODECFG_SYSSRAMONSTOP_A { match self . bits { false => PMODECFG_SYSSRAMONSTOP_A :: PMODECFG_SYSSRAMONSTOP_DISABLE , true => PMODECFG_SYSSRAMONSTOP_A :: PMODECFG_SYSSRAMONSTOP_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_pmodecfg_syssramonstop_disable (& self) -> bool { * self == PMODECFG_SYSSRAMONSTOP_A :: PMODECFG_SYSSRAMONSTOP_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_pmodecfg_syssramonstop_enable (& self) -> bool { * self == PMODECFG_SYSSRAMONSTOP_A :: PMODECFG_SYSSRAMONSTOP_ENABLE } } # [doc = "Field `PMODECFG_SYSSRAMONSTOP` writer - SYSSRAMONSTOP selects whether the SRAM controller is enabled or disabled in STOP mode."] pub type PMODECFG_SYSSRAMONSTOP_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , PMODECFG_SYSSRAMONSTOP_A > ; impl < 'a , REG , const O : u8 > PMODECFG_SYSSRAMONSTOP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn pmodecfg_syssramonstop_disable (self) -> & 'a mut crate :: W < REG > { self . variant (PMODECFG_SYSSRAMONSTOP_A :: PMODECFG_SYSSRAMONSTOP_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn pmodecfg_syssramonstop_enable (self) -> & 'a mut crate :: W < REG > { self . variant (PMODECFG_SYSSRAMONSTOP_A :: PMODECFG_SYSSRAMONSTOP_ENABLE) } } impl R { # [doc = "Bits 0:1 - DSLEEP selects the operating mode to enter upon a DEEPSLEEP request from the CPU."] # [inline (always)] pub fn pmodecfg_dsleep (& self) -> PMODECFG_DSLEEP_R { PMODECFG_DSLEEP_R :: new ((self . bits & 3) as u8) } # [doc = "Bit 5 - SYSSRAMONSTOP selects whether the SRAM controller is enabled or disabled in STOP mode."] # [inline (always)] pub fn pmodecfg_syssramonstop (& self) -> PMODECFG_SYSSRAMONSTOP_R { PMODECFG_SYSSRAMONSTOP_R :: new (((self . bits >> 5) & 1) != 0) } } impl W { # [doc = "Bits 0:1 - DSLEEP selects the operating mode to enter upon a DEEPSLEEP request from the CPU."] # [inline (always)] # [must_use] pub fn pmodecfg_dsleep (& mut self) -> PMODECFG_DSLEEP_W < PMODECFG_SPEC , 0 > { PMODECFG_DSLEEP_W :: new (self) } # [doc = "Bit 5 - SYSSRAMONSTOP selects whether the SRAM controller is enabled or disabled in STOP mode."] # [inline (always)] # [must_use] pub fn pmodecfg_syssramonstop (& mut self) -> PMODECFG_SYSSRAMONSTOP_W < PMODECFG_SPEC , 5 > { PMODECFG_SYSSRAMONSTOP_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Power mode configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pmodecfg::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pmodecfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PMODECFG_SPEC ; impl crate :: RegisterSpec for PMODECFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`pmodecfg::R`](R) reader structure"] impl crate :: Readable for PMODECFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`pmodecfg::W`](W) writer structure"] impl crate :: Writable for PMODECFG_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets PMODECFG to value 0"] impl crate :: Resettable for PMODECFG_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }