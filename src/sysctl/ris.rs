# [doc = "Register `RIS` reader"] pub type R = crate :: R < RIS_SPEC > ; # [doc = "Field `RIS_LFOSCGOOD` reader - Raw status of the LFOSCGOOD interrupt."] pub type RIS_LFOSCGOOD_R = crate :: BitReader < RIS_LFOSCGOOD_A > ; # [doc = "Raw status of the LFOSCGOOD interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_LFOSCGOOD_A { # [doc = "0: FALSE"] RIS_LFOSCGOOD_FALSE = 0 , # [doc = "1: TRUE"] RIS_LFOSCGOOD_TRUE = 1 , } impl From < RIS_LFOSCGOOD_A > for bool { # [inline (always)] fn from (variant : RIS_LFOSCGOOD_A) -> Self { variant as u8 != 0 } } impl RIS_LFOSCGOOD_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_LFOSCGOOD_A { match self . bits { false => RIS_LFOSCGOOD_A :: RIS_LFOSCGOOD_FALSE , true => RIS_LFOSCGOOD_A :: RIS_LFOSCGOOD_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_ris_lfoscgood_false (& self) -> bool { * self == RIS_LFOSCGOOD_A :: RIS_LFOSCGOOD_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_ris_lfoscgood_true (& self) -> bool { * self == RIS_LFOSCGOOD_A :: RIS_LFOSCGOOD_TRUE } } # [doc = "Field `RIS_ANACLKERR` reader - Analog Clocking Consistency Error"] pub type RIS_ANACLKERR_R = crate :: BitReader < RIS_ANACLKERR_A > ; # [doc = "Analog Clocking Consistency Error\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_ANACLKERR_A { # [doc = "0: FALSE"] RIS_ANACLKERR_FALSE = 0 , # [doc = "1: TRUE"] RIS_ANACLKERR_TRUE = 1 , } impl From < RIS_ANACLKERR_A > for bool { # [inline (always)] fn from (variant : RIS_ANACLKERR_A) -> Self { variant as u8 != 0 } } impl RIS_ANACLKERR_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_ANACLKERR_A { match self . bits { false => RIS_ANACLKERR_A :: RIS_ANACLKERR_FALSE , true => RIS_ANACLKERR_A :: RIS_ANACLKERR_TRUE , } } # [doc = "FALSE"] # [inline (always)] pub fn is_ris_anaclkerr_false (& self) -> bool { * self == RIS_ANACLKERR_A :: RIS_ANACLKERR_FALSE } # [doc = "TRUE"] # [inline (always)] pub fn is_ris_anaclkerr_true (& self) -> bool { * self == RIS_ANACLKERR_A :: RIS_ANACLKERR_TRUE } } impl R { # [doc = "Bit 0 - Raw status of the LFOSCGOOD interrupt."] # [inline (always)] pub fn ris_lfoscgood (& self) -> RIS_LFOSCGOOD_R { RIS_LFOSCGOOD_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Analog Clocking Consistency Error"] # [inline (always)] pub fn ris_anaclkerr (& self) -> RIS_ANACLKERR_R { RIS_ANACLKERR_R :: new (((self . bits >> 1) & 1) != 0) } } # [doc = "SYSCTL raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RIS_SPEC ; impl crate :: RegisterSpec for RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ris::R`](R) reader structure"] impl crate :: Readable for RIS_SPEC { } # [doc = "`reset()` method sets RIS to value 0"] impl crate :: Resettable for RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }