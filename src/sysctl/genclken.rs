# [doc = "Register `GENCLKEN` reader"] pub type R = crate :: R < GENCLKEN_SPEC > ; # [doc = "Register `GENCLKEN` writer"] pub type W = crate :: W < GENCLKEN_SPEC > ; # [doc = "Field `GENCLKEN_EXCLKEN` reader - EXCLKEN enables the CLK_OUT external clock output block."] pub type GENCLKEN_EXCLKEN_R = crate :: BitReader < GENCLKEN_EXCLKEN_A > ; # [doc = "EXCLKEN enables the CLK_OUT external clock output block.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum GENCLKEN_EXCLKEN_A { # [doc = "0: DISABLE"] GENCLKEN_EXCLKEN_DISABLE = 0 , # [doc = "1: ENABLE"] GENCLKEN_EXCLKEN_ENABLE = 1 , } impl From < GENCLKEN_EXCLKEN_A > for bool { # [inline (always)] fn from (variant : GENCLKEN_EXCLKEN_A) -> Self { variant as u8 != 0 } } impl GENCLKEN_EXCLKEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> GENCLKEN_EXCLKEN_A { match self . bits { false => GENCLKEN_EXCLKEN_A :: GENCLKEN_EXCLKEN_DISABLE , true => GENCLKEN_EXCLKEN_A :: GENCLKEN_EXCLKEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_genclken_exclken_disable (& self) -> bool { * self == GENCLKEN_EXCLKEN_A :: GENCLKEN_EXCLKEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_genclken_exclken_enable (& self) -> bool { * self == GENCLKEN_EXCLKEN_A :: GENCLKEN_EXCLKEN_ENABLE } } # [doc = "Field `GENCLKEN_EXCLKEN` writer - EXCLKEN enables the CLK_OUT external clock output block."] pub type GENCLKEN_EXCLKEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , GENCLKEN_EXCLKEN_A > ; impl < 'a , REG , const O : u8 > GENCLKEN_EXCLKEN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn genclken_exclken_disable (self) -> & 'a mut crate :: W < REG > { self . variant (GENCLKEN_EXCLKEN_A :: GENCLKEN_EXCLKEN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn genclken_exclken_enable (self) -> & 'a mut crate :: W < REG > { self . variant (GENCLKEN_EXCLKEN_A :: GENCLKEN_EXCLKEN_ENABLE) } } # [doc = "Field `GENCLKEN_MFPCLKEN` reader - MFPCLKEN enables the middle frequency precision clock (MFPCLK)."] pub type GENCLKEN_MFPCLKEN_R = crate :: BitReader < GENCLKEN_MFPCLKEN_A > ; # [doc = "MFPCLKEN enables the middle frequency precision clock (MFPCLK).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum GENCLKEN_MFPCLKEN_A { # [doc = "0: DISABLE"] GENCLKEN_MFPCLKEN_DISABLE = 0 , # [doc = "1: ENABLE"] GENCLKEN_MFPCLKEN_ENABLE = 1 , } impl From < GENCLKEN_MFPCLKEN_A > for bool { # [inline (always)] fn from (variant : GENCLKEN_MFPCLKEN_A) -> Self { variant as u8 != 0 } } impl GENCLKEN_MFPCLKEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> GENCLKEN_MFPCLKEN_A { match self . bits { false => GENCLKEN_MFPCLKEN_A :: GENCLKEN_MFPCLKEN_DISABLE , true => GENCLKEN_MFPCLKEN_A :: GENCLKEN_MFPCLKEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_genclken_mfpclken_disable (& self) -> bool { * self == GENCLKEN_MFPCLKEN_A :: GENCLKEN_MFPCLKEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_genclken_mfpclken_enable (& self) -> bool { * self == GENCLKEN_MFPCLKEN_A :: GENCLKEN_MFPCLKEN_ENABLE } } # [doc = "Field `GENCLKEN_MFPCLKEN` writer - MFPCLKEN enables the middle frequency precision clock (MFPCLK)."] pub type GENCLKEN_MFPCLKEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , GENCLKEN_MFPCLKEN_A > ; impl < 'a , REG , const O : u8 > GENCLKEN_MFPCLKEN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn genclken_mfpclken_disable (self) -> & 'a mut crate :: W < REG > { self . variant (GENCLKEN_MFPCLKEN_A :: GENCLKEN_MFPCLKEN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn genclken_mfpclken_enable (self) -> & 'a mut crate :: W < REG > { self . variant (GENCLKEN_MFPCLKEN_A :: GENCLKEN_MFPCLKEN_ENABLE) } } impl R { # [doc = "Bit 0 - EXCLKEN enables the CLK_OUT external clock output block."] # [inline (always)] pub fn genclken_exclken (& self) -> GENCLKEN_EXCLKEN_R { GENCLKEN_EXCLKEN_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 4 - MFPCLKEN enables the middle frequency precision clock (MFPCLK)."] # [inline (always)] pub fn genclken_mfpclken (& self) -> GENCLKEN_MFPCLKEN_R { GENCLKEN_MFPCLKEN_R :: new (((self . bits >> 4) & 1) != 0) } } impl W { # [doc = "Bit 0 - EXCLKEN enables the CLK_OUT external clock output block."] # [inline (always)] # [must_use] pub fn genclken_exclken (& mut self) -> GENCLKEN_EXCLKEN_W < GENCLKEN_SPEC , 0 > { GENCLKEN_EXCLKEN_W :: new (self) } # [doc = "Bit 4 - MFPCLKEN enables the middle frequency precision clock (MFPCLK)."] # [inline (always)] # [must_use] pub fn genclken_mfpclken (& mut self) -> GENCLKEN_MFPCLKEN_W < GENCLKEN_SPEC , 4 > { GENCLKEN_MFPCLKEN_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "General clock enable control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`genclken::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`genclken::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GENCLKEN_SPEC ; impl crate :: RegisterSpec for GENCLKEN_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`genclken::R`](R) reader structure"] impl crate :: Readable for GENCLKEN_SPEC { } # [doc = "`write(|w| ..)` method takes [`genclken::W`](W) writer structure"] impl crate :: Writable for GENCLKEN_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets GENCLKEN to value 0"] impl crate :: Resettable for GENCLKEN_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }