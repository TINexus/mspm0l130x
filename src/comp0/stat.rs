# [doc = "Register `STAT` reader"] pub type R = crate :: R < STAT_SPEC > ; # [doc = "Field `STAT_OUT` reader - This bit reflects the value of the comparator output. Writing to this bit has no effect on the comparator output."] pub type STAT_OUT_R = crate :: BitReader < STAT_OUT_A > ; # [doc = "This bit reflects the value of the comparator output. Writing to this bit has no effect on the comparator output.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_OUT_A { # [doc = "0: LOW"] STAT_OUT_LOW = 0 , # [doc = "1: HIGH"] STAT_OUT_HIGH = 1 , } impl From < STAT_OUT_A > for bool { # [inline (always)] fn from (variant : STAT_OUT_A) -> Self { variant as u8 != 0 } } impl STAT_OUT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_OUT_A { match self . bits { false => STAT_OUT_A :: STAT_OUT_LOW , true => STAT_OUT_A :: STAT_OUT_HIGH , } } # [doc = "LOW"] # [inline (always)] pub fn is_stat_out_low (& self) -> bool { * self == STAT_OUT_A :: STAT_OUT_LOW } # [doc = "HIGH"] # [inline (always)] pub fn is_stat_out_high (& self) -> bool { * self == STAT_OUT_A :: STAT_OUT_HIGH } } impl R { # [doc = "Bit 0 - This bit reflects the value of the comparator output. Writing to this bit has no effect on the comparator output."] # [inline (always)] pub fn stat_out (& self) -> STAT_OUT_R { STAT_OUT_R :: new ((self . bits & 1) != 0) } } # [doc = "Status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stat::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct STAT_SPEC ; impl crate :: RegisterSpec for STAT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`stat::R`](R) reader structure"] impl crate :: Readable for STAT_SPEC { } # [doc = "`reset()` method sets STAT to value 0"] impl crate :: Resettable for STAT_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }