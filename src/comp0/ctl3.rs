# [doc = "Register `CTL3` reader"] pub type R = crate :: R < CTL3_SPEC > ; # [doc = "Register `CTL3` writer"] pub type W = crate :: W < CTL3_SPEC > ; # [doc = "Field `CTL3_DACCODE0` reader - This is the first 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] pub type CTL3_DACCODE0_R = crate :: FieldReader ; # [doc = "Field `CTL3_DACCODE0` writer - This is the first 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] pub type CTL3_DACCODE0_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O > ; # [doc = "Field `CTL3_DACCODE1` reader - This is the second 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] pub type CTL3_DACCODE1_R = crate :: FieldReader ; # [doc = "Field `CTL3_DACCODE1` writer - This is the second 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] pub type CTL3_DACCODE1_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O > ; impl R { # [doc = "Bits 0:7 - This is the first 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] # [inline (always)] pub fn ctl3_daccode0 (& self) -> CTL3_DACCODE0_R { CTL3_DACCODE0_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 16:23 - This is the second 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] # [inline (always)] pub fn ctl3_daccode1 (& self) -> CTL3_DACCODE1_R { CTL3_DACCODE1_R :: new (((self . bits >> 16) & 0xff) as u8) } } impl W { # [doc = "Bits 0:7 - This is the first 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] # [inline (always)] # [must_use] pub fn ctl3_daccode0 (& mut self) -> CTL3_DACCODE0_W < CTL3_SPEC , 0 > { CTL3_DACCODE0_W :: new (self) } # [doc = "Bits 16:23 - This is the second 8-bit DAC code. When the DAC code is 0x0 the DAC output will be 0 V. When the DAC code is 0xFF the DAC output will be selected reference voltage x 255/256."] # [inline (always)] # [must_use] pub fn ctl3_daccode1 (& mut self) -> CTL3_DACCODE1_W < CTL3_SPEC , 16 > { CTL3_DACCODE1_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Control 3\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl3::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl3::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CTL3_SPEC ; impl crate :: RegisterSpec for CTL3_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ctl3::R`](R) reader structure"] impl crate :: Readable for CTL3_SPEC { } # [doc = "`write(|w| ..)` method takes [`ctl3::W`](W) writer structure"] impl crate :: Writable for CTL3_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CTL3 to value 0"] impl crate :: Resettable for CTL3_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }