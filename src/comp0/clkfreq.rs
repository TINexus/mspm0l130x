# [doc = "Register `CLKFREQ` reader"] pub type R = crate :: R < CLKFREQ_SPEC > ; # [doc = "Register `CLKFREQ` writer"] pub type W = crate :: W < CLKFREQ_SPEC > ; # [doc = "Field `CLKFREQ_FRANGE` reader - Frequency Range."] pub type CLKFREQ_FRANGE_R = crate :: FieldReader < CLKFREQ_FRANGE_A > ; # [doc = "Frequency Range.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CLKFREQ_FRANGE_A { # [doc = "0: RANGE1TO4"] CLKFREQ_FRANGE_RANGE1TO4 = 0 , # [doc = "1: RANGE4TO8"] CLKFREQ_FRANGE_RANGE4TO8 = 1 , # [doc = "2: RANGE8TO16"] CLKFREQ_FRANGE_RANGE8TO16 = 2 , # [doc = "3: RANGE16TO20"] CLKFREQ_FRANGE_RANGE16TO20 = 3 , # [doc = "4: RANGE20TO24"] CLKFREQ_FRANGE_RANGE20TO24 = 4 , # [doc = "5: RANGE24TO32"] CLKFREQ_FRANGE_RANGE24TO32 = 5 , # [doc = "6: RANGE32TO40"] CLKFREQ_FRANGE_RANGE32TO40 = 6 , # [doc = "7: RANGE40TO48"] CLKFREQ_FRANGE_RANGE40TO48 = 7 , } impl From < CLKFREQ_FRANGE_A > for u8 { # [inline (always)] fn from (variant : CLKFREQ_FRANGE_A) -> Self { variant as _ } } impl crate :: FieldSpec for CLKFREQ_FRANGE_A { type Ux = u8 ; } impl CLKFREQ_FRANGE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CLKFREQ_FRANGE_A { match self . bits { 0 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE1TO4 , 1 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE4TO8 , 2 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE8TO16 , 3 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE16TO20 , 4 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE20TO24 , 5 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE24TO32 , 6 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE32TO40 , 7 => CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE40TO48 , _ => unreachable ! () , } } # [doc = "RANGE1TO4"] # [inline (always)] pub fn is_clkfreq_frange_range1to4 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE1TO4 } # [doc = "RANGE4TO8"] # [inline (always)] pub fn is_clkfreq_frange_range4to8 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE4TO8 } # [doc = "RANGE8TO16"] # [inline (always)] pub fn is_clkfreq_frange_range8to16 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE8TO16 } # [doc = "RANGE16TO20"] # [inline (always)] pub fn is_clkfreq_frange_range16to20 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE16TO20 } # [doc = "RANGE20TO24"] # [inline (always)] pub fn is_clkfreq_frange_range20to24 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE20TO24 } # [doc = "RANGE24TO32"] # [inline (always)] pub fn is_clkfreq_frange_range24to32 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE24TO32 } # [doc = "RANGE32TO40"] # [inline (always)] pub fn is_clkfreq_frange_range32to40 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE32TO40 } # [doc = "RANGE40TO48"] # [inline (always)] pub fn is_clkfreq_frange_range40to48 (& self) -> bool { * self == CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE40TO48 } } # [doc = "Field `CLKFREQ_FRANGE` writer - Frequency Range."] pub type CLKFREQ_FRANGE_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , CLKFREQ_FRANGE_A > ; impl < 'a , REG , const O : u8 > CLKFREQ_FRANGE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "RANGE1TO4"] # [inline (always)] pub fn clkfreq_frange_range1to4 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE1TO4) } # [doc = "RANGE4TO8"] # [inline (always)] pub fn clkfreq_frange_range4to8 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE4TO8) } # [doc = "RANGE8TO16"] # [inline (always)] pub fn clkfreq_frange_range8to16 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE8TO16) } # [doc = "RANGE16TO20"] # [inline (always)] pub fn clkfreq_frange_range16to20 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE16TO20) } # [doc = "RANGE20TO24"] # [inline (always)] pub fn clkfreq_frange_range20to24 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE20TO24) } # [doc = "RANGE24TO32"] # [inline (always)] pub fn clkfreq_frange_range24to32 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE24TO32) } # [doc = "RANGE32TO40"] # [inline (always)] pub fn clkfreq_frange_range32to40 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE32TO40) } # [doc = "RANGE40TO48"] # [inline (always)] pub fn clkfreq_frange_range40to48 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKFREQ_FRANGE_A :: CLKFREQ_FRANGE_RANGE40TO48) } } impl R { # [doc = "Bits 0:2 - Frequency Range."] # [inline (always)] pub fn clkfreq_frange (& self) -> CLKFREQ_FRANGE_R { CLKFREQ_FRANGE_R :: new ((self . bits & 7) as u8) } } impl W { # [doc = "Bits 0:2 - Frequency Range."] # [inline (always)] # [must_use] pub fn clkfreq_frange (& mut self) -> CLKFREQ_FRANGE_W < CLKFREQ_SPEC , 0 > { CLKFREQ_FRANGE_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Sample Clock Frequency Range Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkfreq::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkfreq::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CLKFREQ_SPEC ; impl crate :: RegisterSpec for CLKFREQ_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`clkfreq::R`](R) reader structure"] impl crate :: Readable for CLKFREQ_SPEC { } # [doc = "`write(|w| ..)` method takes [`clkfreq::W`](W) writer structure"] impl crate :: Writable for CLKFREQ_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CLKFREQ to value 0"] impl crate :: Resettable for CLKFREQ_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }