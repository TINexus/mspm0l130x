# [doc = "Register `ISET` writer"] pub type W = crate :: W < ISET_SPEC > ; # [doc = "Zero event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_Z_AW { # [doc = "0: NO_EFFECT"] ISET_Z_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_Z_SET = 1 , } impl From < ISET_Z_AW > for bool { # [inline (always)] fn from (variant : ISET_Z_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_Z` writer - Zero event SET"] pub type ISET_Z_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_Z_AW > ; impl < 'a , REG , const O : u8 > ISET_Z_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_z_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_Z_AW :: ISET_Z_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_z_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_Z_AW :: ISET_Z_SET) } } # [doc = "Load event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_L_AW { # [doc = "0: NO_EFFECT"] ISET_L_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_L_SET = 1 , } impl From < ISET_L_AW > for bool { # [inline (always)] fn from (variant : ISET_L_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_L` writer - Load event SET"] pub type ISET_L_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_L_AW > ; impl < 'a , REG , const O : u8 > ISET_L_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_l_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_L_AW :: ISET_L_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_l_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_L_AW :: ISET_L_SET) } } # [doc = "Capture or compare down event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_CCD0_AW { # [doc = "0: NO_EFFECT"] ISET_CCD0_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_CCD0_SET = 1 , } impl From < ISET_CCD0_AW > for bool { # [inline (always)] fn from (variant : ISET_CCD0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_CCD0` writer - Capture or compare down event SET"] pub type ISET_CCD0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_CCD0_AW > ; impl < 'a , REG , const O : u8 > ISET_CCD0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_ccd0_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCD0_AW :: ISET_CCD0_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_ccd0_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCD0_AW :: ISET_CCD0_SET) } } # [doc = "Capture or compare down event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_CCD1_AW { # [doc = "0: NO_EFFECT"] ISET_CCD1_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_CCD1_SET = 1 , } impl From < ISET_CCD1_AW > for bool { # [inline (always)] fn from (variant : ISET_CCD1_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_CCD1` writer - Capture or compare down event SET"] pub type ISET_CCD1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_CCD1_AW > ; impl < 'a , REG , const O : u8 > ISET_CCD1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_ccd1_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCD1_AW :: ISET_CCD1_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_ccd1_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCD1_AW :: ISET_CCD1_SET) } } # [doc = "Capture or compare up event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_CCU0_AW { # [doc = "0: NO_EFFECT"] ISET_CCU0_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_CCU0_SET = 1 , } impl From < ISET_CCU0_AW > for bool { # [inline (always)] fn from (variant : ISET_CCU0_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_CCU0` writer - Capture or compare up event SET"] pub type ISET_CCU0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_CCU0_AW > ; impl < 'a , REG , const O : u8 > ISET_CCU0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_ccu0_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCU0_AW :: ISET_CCU0_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_ccu0_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCU0_AW :: ISET_CCU0_SET) } } # [doc = "Capture or compare up event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_CCU1_AW { # [doc = "0: NO_EFFECT"] ISET_CCU1_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_CCU1_SET = 1 , } impl From < ISET_CCU1_AW > for bool { # [inline (always)] fn from (variant : ISET_CCU1_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_CCU1` writer - Capture or compare up event SET"] pub type ISET_CCU1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_CCU1_AW > ; impl < 'a , REG , const O : u8 > ISET_CCU1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_ccu1_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCU1_AW :: ISET_CCU1_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_ccu1_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_CCU1_AW :: ISET_CCU1_SET) } } # [doc = "Trigger Overflow event SET\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ISET_TOV_AW { # [doc = "0: NO_EFFECT"] ISET_TOV_NO_EFFECT = 0 , # [doc = "1: SET"] ISET_TOV_SET = 1 , } impl From < ISET_TOV_AW > for bool { # [inline (always)] fn from (variant : ISET_TOV_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `ISET_TOV` writer - Trigger Overflow event SET"] pub type ISET_TOV_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ISET_TOV_AW > ; impl < 'a , REG , const O : u8 > ISET_TOV_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn iset_tov_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_TOV_AW :: ISET_TOV_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn iset_tov_set (self) -> & 'a mut crate :: W < REG > { self . variant (ISET_TOV_AW :: ISET_TOV_SET) } } impl W { # [doc = "Bit 0 - Zero event SET"] # [inline (always)] # [must_use] pub fn iset_z (& mut self) -> ISET_Z_W < ISET_SPEC , 0 > { ISET_Z_W :: new (self) } # [doc = "Bit 1 - Load event SET"] # [inline (always)] # [must_use] pub fn iset_l (& mut self) -> ISET_L_W < ISET_SPEC , 1 > { ISET_L_W :: new (self) } # [doc = "Bit 4 - Capture or compare down event SET"] # [inline (always)] # [must_use] pub fn iset_ccd0 (& mut self) -> ISET_CCD0_W < ISET_SPEC , 4 > { ISET_CCD0_W :: new (self) } # [doc = "Bit 5 - Capture or compare down event SET"] # [inline (always)] # [must_use] pub fn iset_ccd1 (& mut self) -> ISET_CCD1_W < ISET_SPEC , 5 > { ISET_CCD1_W :: new (self) } # [doc = "Bit 8 - Capture or compare up event SET"] # [inline (always)] # [must_use] pub fn iset_ccu0 (& mut self) -> ISET_CCU0_W < ISET_SPEC , 8 > { ISET_CCU0_W :: new (self) } # [doc = "Bit 9 - Capture or compare up event SET"] # [inline (always)] # [must_use] pub fn iset_ccu1 (& mut self) -> ISET_CCU1_W < ISET_SPEC , 9 > { ISET_CCU1_W :: new (self) } # [doc = "Bit 25 - Trigger Overflow event SET"] # [inline (always)] # [must_use] pub fn iset_tov (& mut self) -> ISET_TOV_W < ISET_SPEC , 25 > { ISET_TOV_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`iset::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ISET_SPEC ; impl crate :: RegisterSpec for ISET_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`iset::W`](W) writer structure"] impl crate :: Writable for ISET_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets ISET to value 0"] impl crate :: Resettable for ISET_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }