# [doc = "Register `CLKOVR` reader"] pub type R = crate :: R < CLKOVR_SPEC > ; # [doc = "Register `CLKOVR` writer"] pub type W = crate :: W < CLKOVR_SPEC > ; # [doc = "Field `CLKOVR_OVERRIDE` reader - Unlocks the functionality of \\[RUN_STOP\\]
to override the automatic peripheral clock request"] pub type CLKOVR_OVERRIDE_R = crate :: BitReader < CLKOVR_OVERRIDE_A > ; # [doc = "Unlocks the functionality of \\[RUN_STOP\\]
to override the automatic peripheral clock request\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CLKOVR_OVERRIDE_A { # [doc = "0: DISABLED"] CLKOVR_OVERRIDE_DISABLED = 0 , # [doc = "1: ENABLED"] CLKOVR_OVERRIDE_ENABLED = 1 , } impl From < CLKOVR_OVERRIDE_A > for bool { # [inline (always)] fn from (variant : CLKOVR_OVERRIDE_A) -> Self { variant as u8 != 0 } } impl CLKOVR_OVERRIDE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CLKOVR_OVERRIDE_A { match self . bits { false => CLKOVR_OVERRIDE_A :: CLKOVR_OVERRIDE_DISABLED , true => CLKOVR_OVERRIDE_A :: CLKOVR_OVERRIDE_ENABLED , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_clkovr_override_disabled (& self) -> bool { * self == CLKOVR_OVERRIDE_A :: CLKOVR_OVERRIDE_DISABLED } # [doc = "ENABLED"] # [inline (always)] pub fn is_clkovr_override_enabled (& self) -> bool { * self == CLKOVR_OVERRIDE_A :: CLKOVR_OVERRIDE_ENABLED } } # [doc = "Field `CLKOVR_OVERRIDE` writer - Unlocks the functionality of \\[RUN_STOP\\]
to override the automatic peripheral clock request"] pub type CLKOVR_OVERRIDE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CLKOVR_OVERRIDE_A > ; impl < 'a , REG , const O : u8 > CLKOVR_OVERRIDE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLED"] # [inline (always)] pub fn clkovr_override_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CLKOVR_OVERRIDE_A :: CLKOVR_OVERRIDE_DISABLED) } # [doc = "ENABLED"] # [inline (always)] pub fn clkovr_override_enabled (self) -> & 'a mut crate :: W < REG > { self . variant (CLKOVR_OVERRIDE_A :: CLKOVR_OVERRIDE_ENABLED) } } # [doc = "Field `CLKOVR_RUN_STOP` reader - If \\[OVERRIDE\\]
is enabled, this register is used to manually control the peripheral's clock request to the system"] pub type CLKOVR_RUN_STOP_R = crate :: BitReader < CLKOVR_RUN_STOP_A > ; # [doc = "If \\[OVERRIDE\\]
is enabled, this register is used to manually control the peripheral's clock request to the system\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CLKOVR_RUN_STOP_A { # [doc = "0: RUN"] CLKOVR_RUN_STOP_RUN = 0 , # [doc = "1: STOP"] CLKOVR_RUN_STOP_STOP = 1 , } impl From < CLKOVR_RUN_STOP_A > for bool { # [inline (always)] fn from (variant : CLKOVR_RUN_STOP_A) -> Self { variant as u8 != 0 } } impl CLKOVR_RUN_STOP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CLKOVR_RUN_STOP_A { match self . bits { false => CLKOVR_RUN_STOP_A :: CLKOVR_RUN_STOP_RUN , true => CLKOVR_RUN_STOP_A :: CLKOVR_RUN_STOP_STOP , } } # [doc = "RUN"] # [inline (always)] pub fn is_clkovr_run_stop_run (& self) -> bool { * self == CLKOVR_RUN_STOP_A :: CLKOVR_RUN_STOP_RUN } # [doc = "STOP"] # [inline (always)] pub fn is_clkovr_run_stop_stop (& self) -> bool { * self == CLKOVR_RUN_STOP_A :: CLKOVR_RUN_STOP_STOP } } # [doc = "Field `CLKOVR_RUN_STOP` writer - If \\[OVERRIDE\\]
is enabled, this register is used to manually control the peripheral's clock request to the system"] pub type CLKOVR_RUN_STOP_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , CLKOVR_RUN_STOP_A > ; impl < 'a , REG , const O : u8 > CLKOVR_RUN_STOP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "RUN"] # [inline (always)] pub fn clkovr_run_stop_run (self) -> & 'a mut crate :: W < REG > { self . variant (CLKOVR_RUN_STOP_A :: CLKOVR_RUN_STOP_RUN) } # [doc = "STOP"] # [inline (always)] pub fn clkovr_run_stop_stop (self) -> & 'a mut crate :: W < REG > { self . variant (CLKOVR_RUN_STOP_A :: CLKOVR_RUN_STOP_STOP) } } impl R { # [doc = "Bit 0 - Unlocks the functionality of \\[RUN_STOP\\]
to override the automatic peripheral clock request"] # [inline (always)] pub fn clkovr_override (& self) -> CLKOVR_OVERRIDE_R { CLKOVR_OVERRIDE_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - If \\[OVERRIDE\\]
is enabled, this register is used to manually control the peripheral's clock request to the system"] # [inline (always)] pub fn clkovr_run_stop (& self) -> CLKOVR_RUN_STOP_R { CLKOVR_RUN_STOP_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - Unlocks the functionality of \\[RUN_STOP\\]
to override the automatic peripheral clock request"] # [inline (always)] # [must_use] pub fn clkovr_override (& mut self) -> CLKOVR_OVERRIDE_W < CLKOVR_SPEC , 0 > { CLKOVR_OVERRIDE_W :: new (self) } # [doc = "Bit 1 - If \\[OVERRIDE\\]
is enabled, this register is used to manually control the peripheral's clock request to the system"] # [inline (always)] # [must_use] pub fn clkovr_run_stop (& mut self) -> CLKOVR_RUN_STOP_W < CLKOVR_SPEC , 1 > { CLKOVR_RUN_STOP_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Clock Override\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkovr::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkovr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CLKOVR_SPEC ; impl crate :: RegisterSpec for CLKOVR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`clkovr::R`](R) reader structure"] impl crate :: Readable for CLKOVR_SPEC { } # [doc = "`write(|w| ..)` method takes [`clkovr::W`](W) writer structure"] impl crate :: Writable for CLKOVR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CLKOVR to value 0"] impl crate :: Resettable for CLKOVR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }