# [doc = "Register `LINCTL` reader"] pub type R = crate :: R < LINCTL_SPEC > ; # [doc = "Register `LINCTL` writer"] pub type W = crate :: W < LINCTL_SPEC > ; # [doc = "Field `LINCTL_CTRENA` reader - LIN Counter Enable. LIN counter will only count when enabled."] pub type LINCTL_CTRENA_R = crate :: BitReader < LINCTL_CTRENA_A > ; # [doc = "LIN Counter Enable. LIN counter will only count when enabled.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LINCTL_CTRENA_A { # [doc = "0: DISABLE"] LINCTL_CTRENA_DISABLE = 0 , # [doc = "1: ENABLE"] LINCTL_CTRENA_ENABLE = 1 , } impl From < LINCTL_CTRENA_A > for bool { # [inline (always)] fn from (variant : LINCTL_CTRENA_A) -> Self { variant as u8 != 0 } } impl LINCTL_CTRENA_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LINCTL_CTRENA_A { match self . bits { false => LINCTL_CTRENA_A :: LINCTL_CTRENA_DISABLE , true => LINCTL_CTRENA_A :: LINCTL_CTRENA_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_linctl_ctrena_disable (& self) -> bool { * self == LINCTL_CTRENA_A :: LINCTL_CTRENA_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_linctl_ctrena_enable (& self) -> bool { * self == LINCTL_CTRENA_A :: LINCTL_CTRENA_ENABLE } } # [doc = "Field `LINCTL_CTRENA` writer - LIN Counter Enable. LIN counter will only count when enabled."] pub type LINCTL_CTRENA_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , LINCTL_CTRENA_A > ; impl < 'a , REG , const O : u8 > LINCTL_CTRENA_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn linctl_ctrena_disable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_CTRENA_A :: LINCTL_CTRENA_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn linctl_ctrena_enable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_CTRENA_A :: LINCTL_CTRENA_ENABLE) } } # [doc = "Field `LINCTL_ZERONE` reader - Zero on negative Edge of RXD. When enabled the counter is set to 0 and starts counting on a negative edge of RXD"] pub type LINCTL_ZERONE_R = crate :: BitReader < LINCTL_ZERONE_A > ; # [doc = "Zero on negative Edge of RXD. When enabled the counter is set to 0 and starts counting on a negative edge of RXD\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LINCTL_ZERONE_A { # [doc = "0: DISABLE"] LINCTL_ZERONE_DISABLE = 0 , # [doc = "1: ENABLE"] LINCTL_ZERONE_ENABLE = 1 , } impl From < LINCTL_ZERONE_A > for bool { # [inline (always)] fn from (variant : LINCTL_ZERONE_A) -> Self { variant as u8 != 0 } } impl LINCTL_ZERONE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LINCTL_ZERONE_A { match self . bits { false => LINCTL_ZERONE_A :: LINCTL_ZERONE_DISABLE , true => LINCTL_ZERONE_A :: LINCTL_ZERONE_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_linctl_zerone_disable (& self) -> bool { * self == LINCTL_ZERONE_A :: LINCTL_ZERONE_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_linctl_zerone_enable (& self) -> bool { * self == LINCTL_ZERONE_A :: LINCTL_ZERONE_ENABLE } } # [doc = "Field `LINCTL_ZERONE` writer - Zero on negative Edge of RXD. When enabled the counter is set to 0 and starts counting on a negative edge of RXD"] pub type LINCTL_ZERONE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , LINCTL_ZERONE_A > ; impl < 'a , REG , const O : u8 > LINCTL_ZERONE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn linctl_zerone_disable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_ZERONE_A :: LINCTL_ZERONE_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn linctl_zerone_enable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_ZERONE_A :: LINCTL_ZERONE_ENABLE) } } # [doc = "Field `LINCTL_CNTRXLOW` reader - Count while low Signal on RXD When counter is enabled and the signal on RXD is low, the counter increments."] pub type LINCTL_CNTRXLOW_R = crate :: BitReader < LINCTL_CNTRXLOW_A > ; # [doc = "Count while low Signal on RXD When counter is enabled and the signal on RXD is low, the counter increments.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LINCTL_CNTRXLOW_A { # [doc = "0: DISABLE"] LINCTL_CNTRXLOW_DISABLE = 0 , # [doc = "1: ENABLE"] LINCTL_CNTRXLOW_ENABLE = 1 , } impl From < LINCTL_CNTRXLOW_A > for bool { # [inline (always)] fn from (variant : LINCTL_CNTRXLOW_A) -> Self { variant as u8 != 0 } } impl LINCTL_CNTRXLOW_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LINCTL_CNTRXLOW_A { match self . bits { false => LINCTL_CNTRXLOW_A :: LINCTL_CNTRXLOW_DISABLE , true => LINCTL_CNTRXLOW_A :: LINCTL_CNTRXLOW_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_linctl_cntrxlow_disable (& self) -> bool { * self == LINCTL_CNTRXLOW_A :: LINCTL_CNTRXLOW_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_linctl_cntrxlow_enable (& self) -> bool { * self == LINCTL_CNTRXLOW_A :: LINCTL_CNTRXLOW_ENABLE } } # [doc = "Field `LINCTL_CNTRXLOW` writer - Count while low Signal on RXD When counter is enabled and the signal on RXD is low, the counter increments."] pub type LINCTL_CNTRXLOW_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , LINCTL_CNTRXLOW_A > ; impl < 'a , REG , const O : u8 > LINCTL_CNTRXLOW_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn linctl_cntrxlow_disable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_CNTRXLOW_A :: LINCTL_CNTRXLOW_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn linctl_cntrxlow_enable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_CNTRXLOW_A :: LINCTL_CNTRXLOW_ENABLE) } } # [doc = "Field `LINCTL_LINC0CAP` reader - Capture Counter on negative RXD Edge. When enabled the counter value is captured to LINC0 register on each negative RXD edge. A LINC0 interrupt is triggered when enabled."] pub type LINCTL_LINC0CAP_R = crate :: BitReader < LINCTL_LINC0CAP_A > ; # [doc = "Capture Counter on negative RXD Edge. When enabled the counter value is captured to LINC0 register on each negative RXD edge. A LINC0 interrupt is triggered when enabled.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LINCTL_LINC0CAP_A { # [doc = "0: DISABLE"] LINCTL_LINC0CAP_DISABLE = 0 , # [doc = "1: ENABLE"] LINCTL_LINC0CAP_ENABLE = 1 , } impl From < LINCTL_LINC0CAP_A > for bool { # [inline (always)] fn from (variant : LINCTL_LINC0CAP_A) -> Self { variant as u8 != 0 } } impl LINCTL_LINC0CAP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LINCTL_LINC0CAP_A { match self . bits { false => LINCTL_LINC0CAP_A :: LINCTL_LINC0CAP_DISABLE , true => LINCTL_LINC0CAP_A :: LINCTL_LINC0CAP_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_linctl_linc0cap_disable (& self) -> bool { * self == LINCTL_LINC0CAP_A :: LINCTL_LINC0CAP_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_linctl_linc0cap_enable (& self) -> bool { * self == LINCTL_LINC0CAP_A :: LINCTL_LINC0CAP_ENABLE } } # [doc = "Field `LINCTL_LINC0CAP` writer - Capture Counter on negative RXD Edge. When enabled the counter value is captured to LINC0 register on each negative RXD edge. A LINC0 interrupt is triggered when enabled."] pub type LINCTL_LINC0CAP_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , LINCTL_LINC0CAP_A > ; impl < 'a , REG , const O : u8 > LINCTL_LINC0CAP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn linctl_linc0cap_disable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_LINC0CAP_A :: LINCTL_LINC0CAP_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn linctl_linc0cap_enable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_LINC0CAP_A :: LINCTL_LINC0CAP_ENABLE) } } # [doc = "Field `LINCTL_LINC1CAP` reader - Capture Counter on positive RXD Edge. When enabled the counter value is captured to LINC1 register on each positive RXD edge. A LINC1 interrupt is triggered when enabled."] pub type LINCTL_LINC1CAP_R = crate :: BitReader < LINCTL_LINC1CAP_A > ; # [doc = "Capture Counter on positive RXD Edge. When enabled the counter value is captured to LINC1 register on each positive RXD edge. A LINC1 interrupt is triggered when enabled.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LINCTL_LINC1CAP_A { # [doc = "0: DISABLE"] LINCTL_LINC1CAP_DISABLE = 0 , # [doc = "1: ENABLE"] LINCTL_LINC1CAP_ENABLE = 1 , } impl From < LINCTL_LINC1CAP_A > for bool { # [inline (always)] fn from (variant : LINCTL_LINC1CAP_A) -> Self { variant as u8 != 0 } } impl LINCTL_LINC1CAP_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LINCTL_LINC1CAP_A { match self . bits { false => LINCTL_LINC1CAP_A :: LINCTL_LINC1CAP_DISABLE , true => LINCTL_LINC1CAP_A :: LINCTL_LINC1CAP_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_linctl_linc1cap_disable (& self) -> bool { * self == LINCTL_LINC1CAP_A :: LINCTL_LINC1CAP_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_linctl_linc1cap_enable (& self) -> bool { * self == LINCTL_LINC1CAP_A :: LINCTL_LINC1CAP_ENABLE } } # [doc = "Field `LINCTL_LINC1CAP` writer - Capture Counter on positive RXD Edge. When enabled the counter value is captured to LINC1 register on each positive RXD edge. A LINC1 interrupt is triggered when enabled."] pub type LINCTL_LINC1CAP_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , LINCTL_LINC1CAP_A > ; impl < 'a , REG , const O : u8 > LINCTL_LINC1CAP_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn linctl_linc1cap_disable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_LINC1CAP_A :: LINCTL_LINC1CAP_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn linctl_linc1cap_enable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_LINC1CAP_A :: LINCTL_LINC1CAP_ENABLE) } } # [doc = "Field `LINCTL_LINC0_MATCH` reader - Counter Compare Match Mode When this bit is set to 1 a counter compare match with LINC0 register triggers an LINC0 interrupt when enabled."] pub type LINCTL_LINC0_MATCH_R = crate :: BitReader < LINCTL_LINC0_MATCH_A > ; # [doc = "Counter Compare Match Mode When this bit is set to 1 a counter compare match with LINC0 register triggers an LINC0 interrupt when enabled.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LINCTL_LINC0_MATCH_A { # [doc = "0: DISABLE"] LINCTL_LINC0_MATCH_DISABLE = 0 , # [doc = "1: ENABLE"] LINCTL_LINC0_MATCH_ENABLE = 1 , } impl From < LINCTL_LINC0_MATCH_A > for bool { # [inline (always)] fn from (variant : LINCTL_LINC0_MATCH_A) -> Self { variant as u8 != 0 } } impl LINCTL_LINC0_MATCH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LINCTL_LINC0_MATCH_A { match self . bits { false => LINCTL_LINC0_MATCH_A :: LINCTL_LINC0_MATCH_DISABLE , true => LINCTL_LINC0_MATCH_A :: LINCTL_LINC0_MATCH_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_linctl_linc0_match_disable (& self) -> bool { * self == LINCTL_LINC0_MATCH_A :: LINCTL_LINC0_MATCH_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_linctl_linc0_match_enable (& self) -> bool { * self == LINCTL_LINC0_MATCH_A :: LINCTL_LINC0_MATCH_ENABLE } } # [doc = "Field `LINCTL_LINC0_MATCH` writer - Counter Compare Match Mode When this bit is set to 1 a counter compare match with LINC0 register triggers an LINC0 interrupt when enabled."] pub type LINCTL_LINC0_MATCH_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , LINCTL_LINC0_MATCH_A > ; impl < 'a , REG , const O : u8 > LINCTL_LINC0_MATCH_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn linctl_linc0_match_disable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_LINC0_MATCH_A :: LINCTL_LINC0_MATCH_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn linctl_linc0_match_enable (self) -> & 'a mut crate :: W < REG > { self . variant (LINCTL_LINC0_MATCH_A :: LINCTL_LINC0_MATCH_ENABLE) } } impl R { # [doc = "Bit 0 - LIN Counter Enable. LIN counter will only count when enabled."] # [inline (always)] pub fn linctl_ctrena (& self) -> LINCTL_CTRENA_R { LINCTL_CTRENA_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Zero on negative Edge of RXD. When enabled the counter is set to 0 and starts counting on a negative edge of RXD"] # [inline (always)] pub fn linctl_zerone (& self) -> LINCTL_ZERONE_R { LINCTL_ZERONE_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Count while low Signal on RXD When counter is enabled and the signal on RXD is low, the counter increments."] # [inline (always)] pub fn linctl_cntrxlow (& self) -> LINCTL_CNTRXLOW_R { LINCTL_CNTRXLOW_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 4 - Capture Counter on negative RXD Edge. When enabled the counter value is captured to LINC0 register on each negative RXD edge. A LINC0 interrupt is triggered when enabled."] # [inline (always)] pub fn linctl_linc0cap (& self) -> LINCTL_LINC0CAP_R { LINCTL_LINC0CAP_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Capture Counter on positive RXD Edge. When enabled the counter value is captured to LINC1 register on each positive RXD edge. A LINC1 interrupt is triggered when enabled."] # [inline (always)] pub fn linctl_linc1cap (& self) -> LINCTL_LINC1CAP_R { LINCTL_LINC1CAP_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Counter Compare Match Mode When this bit is set to 1 a counter compare match with LINC0 register triggers an LINC0 interrupt when enabled."] # [inline (always)] pub fn linctl_linc0_match (& self) -> LINCTL_LINC0_MATCH_R { LINCTL_LINC0_MATCH_R :: new (((self . bits >> 6) & 1) != 0) } } impl W { # [doc = "Bit 0 - LIN Counter Enable. LIN counter will only count when enabled."] # [inline (always)] # [must_use] pub fn linctl_ctrena (& mut self) -> LINCTL_CTRENA_W < LINCTL_SPEC , 0 > { LINCTL_CTRENA_W :: new (self) } # [doc = "Bit 1 - Zero on negative Edge of RXD. When enabled the counter is set to 0 and starts counting on a negative edge of RXD"] # [inline (always)] # [must_use] pub fn linctl_zerone (& mut self) -> LINCTL_ZERONE_W < LINCTL_SPEC , 1 > { LINCTL_ZERONE_W :: new (self) } # [doc = "Bit 2 - Count while low Signal on RXD When counter is enabled and the signal on RXD is low, the counter increments."] # [inline (always)] # [must_use] pub fn linctl_cntrxlow (& mut self) -> LINCTL_CNTRXLOW_W < LINCTL_SPEC , 2 > { LINCTL_CNTRXLOW_W :: new (self) } # [doc = "Bit 4 - Capture Counter on negative RXD Edge. When enabled the counter value is captured to LINC0 register on each negative RXD edge. A LINC0 interrupt is triggered when enabled."] # [inline (always)] # [must_use] pub fn linctl_linc0cap (& mut self) -> LINCTL_LINC0CAP_W < LINCTL_SPEC , 4 > { LINCTL_LINC0CAP_W :: new (self) } # [doc = "Bit 5 - Capture Counter on positive RXD Edge. When enabled the counter value is captured to LINC1 register on each positive RXD edge. A LINC1 interrupt is triggered when enabled."] # [inline (always)] # [must_use] pub fn linctl_linc1cap (& mut self) -> LINCTL_LINC1CAP_W < LINCTL_SPEC , 5 > { LINCTL_LINC1CAP_W :: new (self) } # [doc = "Bit 6 - Counter Compare Match Mode When this bit is set to 1 a counter compare match with LINC0 register triggers an LINC0 interrupt when enabled."] # [inline (always)] # [must_use] pub fn linctl_linc0_match (& mut self) -> LINCTL_LINC0_MATCH_W < LINCTL_SPEC , 6 > { LINCTL_LINC0_MATCH_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "UART LIN Mode Control Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`linctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`linctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct LINCTL_SPEC ; impl crate :: RegisterSpec for LINCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`linctl::R`](R) reader structure"] impl crate :: Readable for LINCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`linctl::W`](W) writer structure"] impl crate :: Writable for LINCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets LINCTL to value 0"] impl crate :: Resettable for LINCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }