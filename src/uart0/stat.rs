# [doc = "Register `STAT` reader"] pub type R = crate :: R < STAT_SPEC > ; # [doc = "Field `STAT_BUSY` reader - UART Busy This bit is set as soon as the transmit FIFO or TXBuffer becomes non-empty (regardless of whether UART is enabled) or if a receive data is currently ongoing (after the start edge have been detected until a complete byte, including all stop bits, has been received by the shift register). In IDLE_Line mode the Busy signal also stays set during the idle time generation."] pub type STAT_BUSY_R = crate :: BitReader < STAT_BUSY_A > ; # [doc = "UART Busy This bit is set as soon as the transmit FIFO or TXBuffer becomes non-empty (regardless of whether UART is enabled) or if a receive data is currently ongoing (after the start edge have been detected until a complete byte, including all stop bits, has been received by the shift register). In IDLE_Line mode the Busy signal also stays set during the idle time generation.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_BUSY_A { # [doc = "0: CLEARED"] STAT_BUSY_CLEARED = 0 , # [doc = "1: SET"] STAT_BUSY_SET = 1 , } impl From < STAT_BUSY_A > for bool { # [inline (always)] fn from (variant : STAT_BUSY_A) -> Self { variant as u8 != 0 } } impl STAT_BUSY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_BUSY_A { match self . bits { false => STAT_BUSY_A :: STAT_BUSY_CLEARED , true => STAT_BUSY_A :: STAT_BUSY_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_busy_cleared (& self) -> bool { * self == STAT_BUSY_A :: STAT_BUSY_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_busy_set (& self) -> bool { * self == STAT_BUSY_A :: STAT_BUSY_SET } } # [doc = "Field `STAT_RXFE` reader - UART Receive FIFO Empty The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] pub type STAT_RXFE_R = crate :: BitReader < STAT_RXFE_A > ; # [doc = "UART Receive FIFO Empty The meaning of this bit depends on the state of the FEN bit in the CTL0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_RXFE_A { # [doc = "0: CLEARED"] STAT_RXFE_CLEARED = 0 , # [doc = "1: SET"] STAT_RXFE_SET = 1 , } impl From < STAT_RXFE_A > for bool { # [inline (always)] fn from (variant : STAT_RXFE_A) -> Self { variant as u8 != 0 } } impl STAT_RXFE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_RXFE_A { match self . bits { false => STAT_RXFE_A :: STAT_RXFE_CLEARED , true => STAT_RXFE_A :: STAT_RXFE_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_rxfe_cleared (& self) -> bool { * self == STAT_RXFE_A :: STAT_RXFE_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_rxfe_set (& self) -> bool { * self == STAT_RXFE_A :: STAT_RXFE_SET } } # [doc = "Field `STAT_RXFF` reader - UART Receive FIFO Full The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] pub type STAT_RXFF_R = crate :: BitReader < STAT_RXFF_A > ; # [doc = "UART Receive FIFO Full The meaning of this bit depends on the state of the FEN bit in the CTL0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_RXFF_A { # [doc = "0: CLEARED"] STAT_RXFF_CLEARED = 0 , # [doc = "1: SET"] STAT_RXFF_SET = 1 , } impl From < STAT_RXFF_A > for bool { # [inline (always)] fn from (variant : STAT_RXFF_A) -> Self { variant as u8 != 0 } } impl STAT_RXFF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_RXFF_A { match self . bits { false => STAT_RXFF_A :: STAT_RXFF_CLEARED , true => STAT_RXFF_A :: STAT_RXFF_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_rxff_cleared (& self) -> bool { * self == STAT_RXFF_A :: STAT_RXFF_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_rxff_set (& self) -> bool { * self == STAT_RXFF_A :: STAT_RXFF_SET } } # [doc = "Field `STAT_TXFE` reader - UART Transmit FIFO Empty The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] pub type STAT_TXFE_R = crate :: BitReader < STAT_TXFE_A > ; # [doc = "UART Transmit FIFO Empty The meaning of this bit depends on the state of the FEN bit in the CTL0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_TXFE_A { # [doc = "0: CLEARED"] STAT_TXFE_CLEARED = 0 , # [doc = "1: SET"] STAT_TXFE_SET = 1 , } impl From < STAT_TXFE_A > for bool { # [inline (always)] fn from (variant : STAT_TXFE_A) -> Self { variant as u8 != 0 } } impl STAT_TXFE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_TXFE_A { match self . bits { false => STAT_TXFE_A :: STAT_TXFE_CLEARED , true => STAT_TXFE_A :: STAT_TXFE_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_txfe_cleared (& self) -> bool { * self == STAT_TXFE_A :: STAT_TXFE_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_txfe_set (& self) -> bool { * self == STAT_TXFE_A :: STAT_TXFE_SET } } # [doc = "Field `STAT_TXFF` reader - UART Transmit FIFO Full The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] pub type STAT_TXFF_R = crate :: BitReader < STAT_TXFF_A > ; # [doc = "UART Transmit FIFO Full The meaning of this bit depends on the state of the FEN bit in the CTL0 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_TXFF_A { # [doc = "0: CLEARED"] STAT_TXFF_CLEARED = 0 , # [doc = "1: SET"] STAT_TXFF_SET = 1 , } impl From < STAT_TXFF_A > for bool { # [inline (always)] fn from (variant : STAT_TXFF_A) -> Self { variant as u8 != 0 } } impl STAT_TXFF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_TXFF_A { match self . bits { false => STAT_TXFF_A :: STAT_TXFF_CLEARED , true => STAT_TXFF_A :: STAT_TXFF_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_txff_cleared (& self) -> bool { * self == STAT_TXFF_A :: STAT_TXFF_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_txff_set (& self) -> bool { * self == STAT_TXFF_A :: STAT_TXFF_SET } } # [doc = "Field `STAT_CTS` reader - Clear To Send"] pub type STAT_CTS_R = crate :: BitReader < STAT_CTS_A > ; # [doc = "Clear To Send\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_CTS_A { # [doc = "0: CLEARED"] STAT_CTS_CLEARED = 0 , # [doc = "1: SET"] STAT_CTS_SET = 1 , } impl From < STAT_CTS_A > for bool { # [inline (always)] fn from (variant : STAT_CTS_A) -> Self { variant as u8 != 0 } } impl STAT_CTS_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_CTS_A { match self . bits { false => STAT_CTS_A :: STAT_CTS_CLEARED , true => STAT_CTS_A :: STAT_CTS_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_cts_cleared (& self) -> bool { * self == STAT_CTS_A :: STAT_CTS_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_cts_set (& self) -> bool { * self == STAT_CTS_A :: STAT_CTS_SET } } # [doc = "Field `STAT_IDLE` reader - IDLE mode has been detected in Idleline-Mulitprocessor-Mode. The IDLE bit is used as an address tag for each block of characters. In idle-line multiprocessor format, this bit is set when a received character is an address."] pub type STAT_IDLE_R = crate :: BitReader < STAT_IDLE_A > ; # [doc = "IDLE mode has been detected in Idleline-Mulitprocessor-Mode. The IDLE bit is used as an address tag for each block of characters. In idle-line multiprocessor format, this bit is set when a received character is an address.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_IDLE_A { # [doc = "0: CLEARED"] STAT_IDLE_CLEARED = 0 , # [doc = "1: SET"] STAT_IDLE_SET = 1 , } impl From < STAT_IDLE_A > for bool { # [inline (always)] fn from (variant : STAT_IDLE_A) -> Self { variant as u8 != 0 } } impl STAT_IDLE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_IDLE_A { match self . bits { false => STAT_IDLE_A :: STAT_IDLE_CLEARED , true => STAT_IDLE_A :: STAT_IDLE_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_stat_idle_cleared (& self) -> bool { * self == STAT_IDLE_A :: STAT_IDLE_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_stat_idle_set (& self) -> bool { * self == STAT_IDLE_A :: STAT_IDLE_SET } } impl R { # [doc = "Bit 0 - UART Busy This bit is set as soon as the transmit FIFO or TXBuffer becomes non-empty (regardless of whether UART is enabled) or if a receive data is currently ongoing (after the start edge have been detected until a complete byte, including all stop bits, has been received by the shift register). In IDLE_Line mode the Busy signal also stays set during the idle time generation."] # [inline (always)] pub fn stat_busy (& self) -> STAT_BUSY_R { STAT_BUSY_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 2 - UART Receive FIFO Empty The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] # [inline (always)] pub fn stat_rxfe (& self) -> STAT_RXFE_R { STAT_RXFE_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - UART Receive FIFO Full The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] # [inline (always)] pub fn stat_rxff (& self) -> STAT_RXFF_R { STAT_RXFF_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 6 - UART Transmit FIFO Empty The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] # [inline (always)] pub fn stat_txfe (& self) -> STAT_TXFE_R { STAT_TXFE_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - UART Transmit FIFO Full The meaning of this bit depends on the state of the FEN bit in the CTL0 register."] # [inline (always)] pub fn stat_txff (& self) -> STAT_TXFF_R { STAT_TXFF_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Clear To Send"] # [inline (always)] pub fn stat_cts (& self) -> STAT_CTS_R { STAT_CTS_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - IDLE mode has been detected in Idleline-Mulitprocessor-Mode. The IDLE bit is used as an address tag for each block of characters. In idle-line multiprocessor format, this bit is set when a received character is an address."] # [inline (always)] pub fn stat_idle (& self) -> STAT_IDLE_R { STAT_IDLE_R :: new (((self . bits >> 9) & 1) != 0) } } # [doc = "UART Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stat::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct STAT_SPEC ; impl crate :: RegisterSpec for STAT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`stat::R`](R) reader structure"] impl crate :: Readable for STAT_SPEC { } # [doc = "`reset()` method sets STAT to value 0"] impl crate :: Resettable for STAT_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }