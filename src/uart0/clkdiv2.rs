# [doc = "Register `CLKDIV2` reader"] pub type R = crate :: R < CLKDIV2_SPEC > ; # [doc = "Register `CLKDIV2` writer"] pub type W = crate :: W < CLKDIV2_SPEC > ; # [doc = "Field `CLKDIV2_RATIO` reader - Selects divide ratio of module clock"] pub type CLKDIV2_RATIO_R = crate :: FieldReader < CLKDIV2_RATIO_A > ; # [doc = "Selects divide ratio of module clock\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CLKDIV2_RATIO_A { # [doc = "0: DIV_BY_1"] CLKDIV2_RATIO_DIV_BY_1 = 0 , # [doc = "1: DIV_BY_2"] CLKDIV2_RATIO_DIV_BY_2 = 1 , # [doc = "2: DIV_BY_3"] CLKDIV2_RATIO_DIV_BY_3 = 2 , # [doc = "3: DIV_BY_4"] CLKDIV2_RATIO_DIV_BY_4 = 3 , # [doc = "4: DIV_BY_5"] CLKDIV2_RATIO_DIV_BY_5 = 4 , # [doc = "5: DIV_BY_6"] CLKDIV2_RATIO_DIV_BY_6 = 5 , # [doc = "6: DIV_BY_7"] CLKDIV2_RATIO_DIV_BY_7 = 6 , # [doc = "7: DIV_BY_8"] CLKDIV2_RATIO_DIV_BY_8 = 7 , } impl From < CLKDIV2_RATIO_A > for u8 { # [inline (always)] fn from (variant : CLKDIV2_RATIO_A) -> Self { variant as _ } } impl crate :: FieldSpec for CLKDIV2_RATIO_A { type Ux = u8 ; } impl CLKDIV2_RATIO_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CLKDIV2_RATIO_A { match self . bits { 0 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_1 , 1 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_2 , 2 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_3 , 3 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_4 , 4 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_5 , 5 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_6 , 6 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_7 , 7 => CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_8 , _ => unreachable ! () , } } # [doc = "DIV_BY_1"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_1 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_1 } # [doc = "DIV_BY_2"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_2 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_2 } # [doc = "DIV_BY_3"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_3 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_3 } # [doc = "DIV_BY_4"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_4 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_4 } # [doc = "DIV_BY_5"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_5 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_5 } # [doc = "DIV_BY_6"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_6 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_6 } # [doc = "DIV_BY_7"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_7 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_7 } # [doc = "DIV_BY_8"] # [inline (always)] pub fn is_clkdiv2_ratio_div_by_8 (& self) -> bool { * self == CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_8 } } # [doc = "Field `CLKDIV2_RATIO` writer - Selects divide ratio of module clock"] pub type CLKDIV2_RATIO_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , CLKDIV2_RATIO_A > ; impl < 'a , REG , const O : u8 > CLKDIV2_RATIO_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DIV_BY_1"] # [inline (always)] pub fn clkdiv2_ratio_div_by_1 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_1) } # [doc = "DIV_BY_2"] # [inline (always)] pub fn clkdiv2_ratio_div_by_2 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_2) } # [doc = "DIV_BY_3"] # [inline (always)] pub fn clkdiv2_ratio_div_by_3 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_3) } # [doc = "DIV_BY_4"] # [inline (always)] pub fn clkdiv2_ratio_div_by_4 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_4) } # [doc = "DIV_BY_5"] # [inline (always)] pub fn clkdiv2_ratio_div_by_5 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_5) } # [doc = "DIV_BY_6"] # [inline (always)] pub fn clkdiv2_ratio_div_by_6 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_6) } # [doc = "DIV_BY_7"] # [inline (always)] pub fn clkdiv2_ratio_div_by_7 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_7) } # [doc = "DIV_BY_8"] # [inline (always)] pub fn clkdiv2_ratio_div_by_8 (self) -> & 'a mut crate :: W < REG > { self . variant (CLKDIV2_RATIO_A :: CLKDIV2_RATIO_DIV_BY_8) } } impl R { # [doc = "Bits 0:2 - Selects divide ratio of module clock"] # [inline (always)] pub fn clkdiv2_ratio (& self) -> CLKDIV2_RATIO_R { CLKDIV2_RATIO_R :: new ((self . bits & 7) as u8) } } impl W { # [doc = "Bits 0:2 - Selects divide ratio of module clock"] # [inline (always)] # [must_use] pub fn clkdiv2_ratio (& mut self) -> CLKDIV2_RATIO_W < CLKDIV2_SPEC , 0 > { CLKDIV2_RATIO_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Clock Divider\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkdiv2::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkdiv2::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CLKDIV2_SPEC ; impl crate :: RegisterSpec for CLKDIV2_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`clkdiv2::R`](R) reader structure"] impl crate :: Readable for CLKDIV2_SPEC { } # [doc = "`write(|w| ..)` method takes [`clkdiv2::W`](W) writer structure"] impl crate :: Writable for CLKDIV2_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CLKDIV2 to value 0"] impl crate :: Resettable for CLKDIV2_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }