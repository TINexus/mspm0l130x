# [doc = "Register `INT_EVENT1_MIS` reader"] pub type R = crate :: R < INT_EVENT1_MIS_SPEC > ; # [doc = "Field `INT_EVENT1_MIS_RTOUT` reader - Masked UARTOUT Receive Time-Out Interrupt."] pub type INT_EVENT1_MIS_RTOUT_R = crate :: BitReader < INT_EVENT1_MIS_RTOUT_A > ; # [doc = "Masked UARTOUT Receive Time-Out Interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_MIS_RTOUT_A { # [doc = "0: CLR"] INT_EVENT1_MIS_RTOUT_CLR = 0 , # [doc = "1: SET"] INT_EVENT1_MIS_RTOUT_SET = 1 , } impl From < INT_EVENT1_MIS_RTOUT_A > for bool { # [inline (always)] fn from (variant : INT_EVENT1_MIS_RTOUT_A) -> Self { variant as u8 != 0 } } impl INT_EVENT1_MIS_RTOUT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT1_MIS_RTOUT_A { match self . bits { false => INT_EVENT1_MIS_RTOUT_A :: INT_EVENT1_MIS_RTOUT_CLR , true => INT_EVENT1_MIS_RTOUT_A :: INT_EVENT1_MIS_RTOUT_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event1_mis_rtout_clr (& self) -> bool { * self == INT_EVENT1_MIS_RTOUT_A :: INT_EVENT1_MIS_RTOUT_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event1_mis_rtout_set (& self) -> bool { * self == INT_EVENT1_MIS_RTOUT_A :: INT_EVENT1_MIS_RTOUT_SET } } # [doc = "Field `INT_EVENT1_MIS_RXINT` reader - Masked UART Receive Interrupt."] pub type INT_EVENT1_MIS_RXINT_R = crate :: BitReader < INT_EVENT1_MIS_RXINT_A > ; # [doc = "Masked UART Receive Interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT1_MIS_RXINT_A { # [doc = "0: CLR"] INT_EVENT1_MIS_RXINT_CLR = 0 , # [doc = "1: SET"] INT_EVENT1_MIS_RXINT_SET = 1 , } impl From < INT_EVENT1_MIS_RXINT_A > for bool { # [inline (always)] fn from (variant : INT_EVENT1_MIS_RXINT_A) -> Self { variant as u8 != 0 } } impl INT_EVENT1_MIS_RXINT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT1_MIS_RXINT_A { match self . bits { false => INT_EVENT1_MIS_RXINT_A :: INT_EVENT1_MIS_RXINT_CLR , true => INT_EVENT1_MIS_RXINT_A :: INT_EVENT1_MIS_RXINT_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event1_mis_rxint_clr (& self) -> bool { * self == INT_EVENT1_MIS_RXINT_A :: INT_EVENT1_MIS_RXINT_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event1_mis_rxint_set (& self) -> bool { * self == INT_EVENT1_MIS_RXINT_A :: INT_EVENT1_MIS_RXINT_SET } } impl R { # [doc = "Bit 0 - Masked UARTOUT Receive Time-Out Interrupt."] # [inline (always)] pub fn int_event1_mis_rtout (& self) -> INT_EVENT1_MIS_RTOUT_R { INT_EVENT1_MIS_RTOUT_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 10 - Masked UART Receive Interrupt."] # [inline (always)] pub fn int_event1_mis_rxint (& self) -> INT_EVENT1_MIS_RXINT_R { INT_EVENT1_MIS_RXINT_R :: new (((self . bits >> 10) & 1) != 0) } } # [doc = "Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_mis::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT1_MIS_SPEC ; impl crate :: RegisterSpec for INT_EVENT1_MIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event1_mis::R`](R) reader structure"] impl crate :: Readable for INT_EVENT1_MIS_SPEC { } # [doc = "`reset()` method sets INT_EVENT1_MIS to value 0"] impl crate :: Resettable for INT_EVENT1_MIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }