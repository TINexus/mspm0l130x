# [doc = "Register `INT_EVENT0_IIDX` reader"] pub type R = crate :: R < INT_EVENT0_IIDX_SPEC > ; # [doc = "Field `INT_EVENT0_IIDX_STAT` reader - UART Module Interrupt Vector Value. This register provides the highes priority interrupt index. A read clears the corresponding interrupt flag in UARTRIS and UARTMISC. 15h-1Fh = Reserved"] pub type INT_EVENT0_IIDX_STAT_R = crate :: FieldReader < INT_EVENT0_IIDX_STAT_A > ; # [doc = "UART Module Interrupt Vector Value. This register provides the highes priority interrupt index. A read clears the corresponding interrupt flag in UARTRIS and UARTMISC. 15h-1Fh = Reserved\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum INT_EVENT0_IIDX_STAT_A { # [doc = "0: NO_INTR"] INT_EVENT0_IIDX_STAT_NO_INTR = 0 , # [doc = "1: RTFG"] INT_EVENT0_IIDX_STAT_RTFG = 1 , # [doc = "2: FEFG"] INT_EVENT0_IIDX_STAT_FEFG = 2 , # [doc = "3: PEFG"] INT_EVENT0_IIDX_STAT_PEFG = 3 , # [doc = "4: BEFG"] INT_EVENT0_IIDX_STAT_BEFG = 4 , # [doc = "5: OEFG"] INT_EVENT0_IIDX_STAT_OEFG = 5 , # [doc = "6: RXNE"] INT_EVENT0_IIDX_STAT_RXNE = 6 , # [doc = "7: RXPE"] INT_EVENT0_IIDX_STAT_RXPE = 7 , # [doc = "8: LINC0"] INT_EVENT0_IIDX_STAT_LINC0 = 8 , # [doc = "9: LINC1"] INT_EVENT0_IIDX_STAT_LINC1 = 9 , # [doc = "10: LINOVF"] INT_EVENT0_IIDX_STAT_LINOVF = 10 , # [doc = "11: RXIFG"] INT_EVENT0_IIDX_STAT_RXIFG = 11 , # [doc = "12: TXIFG"] INT_EVENT0_IIDX_STAT_TXIFG = 12 , # [doc = "13: EOT"] INT_EVENT0_IIDX_STAT_EOT = 13 , # [doc = "14: MODE_9B"] INT_EVENT0_IIDX_STAT_MODE_9B = 14 , # [doc = "15: CTS"] INT_EVENT0_IIDX_STAT_CTS = 15 , # [doc = "16: DMA_DONE_RX"] INT_EVENT0_IIDX_STAT_DMA_DONE_RX = 16 , # [doc = "17: DMA_DONE_TX"] INT_EVENT0_IIDX_STAT_DMA_DONE_TX = 17 , # [doc = "18: NERR_EVT"] INT_EVENT0_IIDX_STAT_NERR_EVT = 18 , } impl From < INT_EVENT0_IIDX_STAT_A > for u8 { # [inline (always)] fn from (variant : INT_EVENT0_IIDX_STAT_A) -> Self { variant as _ } } impl crate :: FieldSpec for INT_EVENT0_IIDX_STAT_A { type Ux = u8 ; } impl INT_EVENT0_IIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < INT_EVENT0_IIDX_STAT_A > { match self . bits { 0 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NO_INTR) , 1 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RTFG) , 2 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_FEFG) , 3 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_PEFG) , 4 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_BEFG) , 5 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_OEFG) , 6 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RXNE) , 7 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RXPE) , 8 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_LINC0) , 9 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_LINC1) , 10 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_LINOVF) , 11 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RXIFG) , 12 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_TXIFG) , 13 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_EOT) , 14 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MODE_9B) , 15 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_CTS) , 16 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DMA_DONE_RX) , 17 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DMA_DONE_TX) , 18 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NERR_EVT) , _ => None , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_int_event0_iidx_stat_no_intr (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NO_INTR } # [doc = "RTFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_rtfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RTFG } # [doc = "FEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_fefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_FEFG } # [doc = "PEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_pefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_PEFG } # [doc = "BEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_befg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_BEFG } # [doc = "OEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_oefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_OEFG } # [doc = "RXNE"] # [inline (always)] pub fn is_int_event0_iidx_stat_rxne (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RXNE } # [doc = "RXPE"] # [inline (always)] pub fn is_int_event0_iidx_stat_rxpe (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RXPE } # [doc = "LINC0"] # [inline (always)] pub fn is_int_event0_iidx_stat_linc0 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_LINC0 } # [doc = "LINC1"] # [inline (always)] pub fn is_int_event0_iidx_stat_linc1 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_LINC1 } # [doc = "LINOVF"] # [inline (always)] pub fn is_int_event0_iidx_stat_linovf (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_LINOVF } # [doc = "RXIFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_rxifg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_RXIFG } # [doc = "TXIFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_txifg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_TXIFG } # [doc = "EOT"] # [inline (always)] pub fn is_int_event0_iidx_stat_eot (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_EOT } # [doc = "MODE_9B"] # [inline (always)] pub fn is_int_event0_iidx_stat_mode_9b (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MODE_9B } # [doc = "CTS"] # [inline (always)] pub fn is_int_event0_iidx_stat_cts (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_CTS } # [doc = "DMA_DONE_RX"] # [inline (always)] pub fn is_int_event0_iidx_stat_dma_done_rx (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DMA_DONE_RX } # [doc = "DMA_DONE_TX"] # [inline (always)] pub fn is_int_event0_iidx_stat_dma_done_tx (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_DMA_DONE_TX } # [doc = "NERR_EVT"] # [inline (always)] pub fn is_int_event0_iidx_stat_nerr_evt (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NERR_EVT } } impl R { # [doc = "Bits 0:7 - UART Module Interrupt Vector Value. This register provides the highes priority interrupt index. A read clears the corresponding interrupt flag in UARTRIS and UARTMISC. 15h-1Fh = Reserved"] # [inline (always)] pub fn int_event0_iidx_stat (& self) -> INT_EVENT0_IIDX_STAT_R { INT_EVENT0_IIDX_STAT_R :: new ((self . bits & 0xff) as u8) } } # [doc = "Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_iidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_IIDX_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_IIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_iidx::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_IIDX_SPEC { } # [doc = "`reset()` method sets INT_EVENT0_IIDX to value 0"] impl crate :: Resettable for INT_EVENT0_IIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }