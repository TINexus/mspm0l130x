# [doc = "Register `CCACT_01[%s]` reader"] pub type R = crate :: R < CCACT_01_SPEC > ; # [doc = "Register `CCACT_01[%s]` writer"] pub type W = crate :: W < CCACT_01_SPEC > ; # [doc = "Field `CCACT_01_ZACT` reader - CCP Output Action on Zero Specifies what changes occur to CCP output as the result of a zero event."] pub type CCACT_01_ZACT_R = crate :: FieldReader < CCACT_01_ZACT_A > ; # [doc = "CCP Output Action on Zero Specifies what changes occur to CCP output as the result of a zero event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_ZACT_A { # [doc = "0: DISABLED"] CCACT_01_ZACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_ZACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_ZACT_CCP_LOW = 2 , # [doc = "3: CCP_TOGGLE"] CCACT_01_ZACT_CCP_TOGGLE = 3 , } impl From < CCACT_01_ZACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_ZACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_ZACT_A { type Ux = u8 ; } impl CCACT_01_ZACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CCACT_01_ZACT_A { match self . bits { 0 => CCACT_01_ZACT_A :: CCACT_01_ZACT_DISABLED , 1 => CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_HIGH , 2 => CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_LOW , 3 => CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_TOGGLE , _ => unreachable ! () , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_zact_disabled (& self) -> bool { * self == CCACT_01_ZACT_A :: CCACT_01_ZACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_zact_ccp_high (& self) -> bool { * self == CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_zact_ccp_low (& self) -> bool { * self == CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_LOW } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn is_ccact_01_zact_ccp_toggle (& self) -> bool { * self == CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_TOGGLE } } # [doc = "Field `CCACT_01_ZACT` writer - CCP Output Action on Zero Specifies what changes occur to CCP output as the result of a zero event."] pub type CCACT_01_ZACT_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CCACT_01_ZACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_ZACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_zact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_ZACT_A :: CCACT_01_ZACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_zact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_zact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_LOW) } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn ccact_01_zact_ccp_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_ZACT_A :: CCACT_01_ZACT_CCP_TOGGLE) } } # [doc = "Field `CCACT_01_LACT` reader - CCP Output Action on Load Specifies what changes occur to CCP output as the result of a load event."] pub type CCACT_01_LACT_R = crate :: FieldReader < CCACT_01_LACT_A > ; # [doc = "CCP Output Action on Load Specifies what changes occur to CCP output as the result of a load event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_LACT_A { # [doc = "0: DISABLED"] CCACT_01_LACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_LACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_LACT_CCP_LOW = 2 , # [doc = "3: CCP_TOGGLE"] CCACT_01_LACT_CCP_TOGGLE = 3 , } impl From < CCACT_01_LACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_LACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_LACT_A { type Ux = u8 ; } impl CCACT_01_LACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CCACT_01_LACT_A { match self . bits { 0 => CCACT_01_LACT_A :: CCACT_01_LACT_DISABLED , 1 => CCACT_01_LACT_A :: CCACT_01_LACT_CCP_HIGH , 2 => CCACT_01_LACT_A :: CCACT_01_LACT_CCP_LOW , 3 => CCACT_01_LACT_A :: CCACT_01_LACT_CCP_TOGGLE , _ => unreachable ! () , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_lact_disabled (& self) -> bool { * self == CCACT_01_LACT_A :: CCACT_01_LACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_lact_ccp_high (& self) -> bool { * self == CCACT_01_LACT_A :: CCACT_01_LACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_lact_ccp_low (& self) -> bool { * self == CCACT_01_LACT_A :: CCACT_01_LACT_CCP_LOW } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn is_ccact_01_lact_ccp_toggle (& self) -> bool { * self == CCACT_01_LACT_A :: CCACT_01_LACT_CCP_TOGGLE } } # [doc = "Field `CCACT_01_LACT` writer - CCP Output Action on Load Specifies what changes occur to CCP output as the result of a load event."] pub type CCACT_01_LACT_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CCACT_01_LACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_LACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_lact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_LACT_A :: CCACT_01_LACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_lact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_LACT_A :: CCACT_01_LACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_lact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_LACT_A :: CCACT_01_LACT_CCP_LOW) } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn ccact_01_lact_ccp_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_LACT_A :: CCACT_01_LACT_CCP_TOGGLE) } } # [doc = "Field `CCACT_01_CDACT` reader - CCP Output Action on Compare (Down) This field describes the resulting action of the signal generator upon detecting a compare event while counting down."] pub type CCACT_01_CDACT_R = crate :: FieldReader < CCACT_01_CDACT_A > ; # [doc = "CCP Output Action on Compare (Down) This field describes the resulting action of the signal generator upon detecting a compare event while counting down.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_CDACT_A { # [doc = "0: DISABLED"] CCACT_01_CDACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_CDACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_CDACT_CCP_LOW = 2 , # [doc = "3: CCP_TOGGLE"] CCACT_01_CDACT_CCP_TOGGLE = 3 , } impl From < CCACT_01_CDACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_CDACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_CDACT_A { type Ux = u8 ; } impl CCACT_01_CDACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CCACT_01_CDACT_A { match self . bits { 0 => CCACT_01_CDACT_A :: CCACT_01_CDACT_DISABLED , 1 => CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_HIGH , 2 => CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_LOW , 3 => CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_TOGGLE , _ => unreachable ! () , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_cdact_disabled (& self) -> bool { * self == CCACT_01_CDACT_A :: CCACT_01_CDACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_cdact_ccp_high (& self) -> bool { * self == CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_cdact_ccp_low (& self) -> bool { * self == CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_LOW } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn is_ccact_01_cdact_ccp_toggle (& self) -> bool { * self == CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_TOGGLE } } # [doc = "Field `CCACT_01_CDACT` writer - CCP Output Action on Compare (Down) This field describes the resulting action of the signal generator upon detecting a compare event while counting down."] pub type CCACT_01_CDACT_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CCACT_01_CDACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_CDACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_cdact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CDACT_A :: CCACT_01_CDACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_cdact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_cdact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_LOW) } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn ccact_01_cdact_ccp_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CDACT_A :: CCACT_01_CDACT_CCP_TOGGLE) } } # [doc = "Field `CCACT_01_CUACT` reader - CCP Output Action on Compare (Up) This field describes the resulting action of the signal generator upon detecting a compare event while counting up."] pub type CCACT_01_CUACT_R = crate :: FieldReader < CCACT_01_CUACT_A > ; # [doc = "CCP Output Action on Compare (Up) This field describes the resulting action of the signal generator upon detecting a compare event while counting up.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_CUACT_A { # [doc = "0: DISABLED"] CCACT_01_CUACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_CUACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_CUACT_CCP_LOW = 2 , # [doc = "3: CCP_TOGGLE"] CCACT_01_CUACT_CCP_TOGGLE = 3 , } impl From < CCACT_01_CUACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_CUACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_CUACT_A { type Ux = u8 ; } impl CCACT_01_CUACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CCACT_01_CUACT_A { match self . bits { 0 => CCACT_01_CUACT_A :: CCACT_01_CUACT_DISABLED , 1 => CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_HIGH , 2 => CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_LOW , 3 => CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_TOGGLE , _ => unreachable ! () , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_cuact_disabled (& self) -> bool { * self == CCACT_01_CUACT_A :: CCACT_01_CUACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_cuact_ccp_high (& self) -> bool { * self == CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_cuact_ccp_low (& self) -> bool { * self == CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_LOW } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn is_ccact_01_cuact_ccp_toggle (& self) -> bool { * self == CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_TOGGLE } } # [doc = "Field `CCACT_01_CUACT` writer - CCP Output Action on Compare (Up) This field describes the resulting action of the signal generator upon detecting a compare event while counting up."] pub type CCACT_01_CUACT_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CCACT_01_CUACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_CUACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_cuact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CUACT_A :: CCACT_01_CUACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_cuact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_cuact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_LOW) } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn ccact_01_cuact_ccp_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CUACT_A :: CCACT_01_CUACT_CCP_TOGGLE) } } # [doc = "Field `CCACT_01_CC2DACT` reader - CCP Output Action on CC2D event."] pub type CCACT_01_CC2DACT_R = crate :: FieldReader < CCACT_01_CC2DACT_A > ; # [doc = "CCP Output Action on CC2D event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_CC2DACT_A { # [doc = "0: DISABLED"] CCACT_01_CC2DACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_CC2DACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_CC2DACT_CCP_LOW = 2 , # [doc = "3: CCP_TOGGLE"] CCACT_01_CC2DACT_CCP_TOGGLE = 3 , } impl From < CCACT_01_CC2DACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_CC2DACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_CC2DACT_A { type Ux = u8 ; } impl CCACT_01_CC2DACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CCACT_01_CC2DACT_A { match self . bits { 0 => CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_DISABLED , 1 => CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_HIGH , 2 => CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_LOW , 3 => CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_TOGGLE , _ => unreachable ! () , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_cc2dact_disabled (& self) -> bool { * self == CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_cc2dact_ccp_high (& self) -> bool { * self == CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_cc2dact_ccp_low (& self) -> bool { * self == CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_LOW } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn is_ccact_01_cc2dact_ccp_toggle (& self) -> bool { * self == CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_TOGGLE } } # [doc = "Field `CCACT_01_CC2DACT` writer - CCP Output Action on CC2D event."] pub type CCACT_01_CC2DACT_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CCACT_01_CC2DACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_CC2DACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_cc2dact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_cc2dact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_cc2dact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_LOW) } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn ccact_01_cc2dact_ccp_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2DACT_A :: CCACT_01_CC2DACT_CCP_TOGGLE) } } # [doc = "Field `CCACT_01_CC2UACT` reader - CCP Output Action on CC2U event."] pub type CCACT_01_CC2UACT_R = crate :: FieldReader < CCACT_01_CC2UACT_A > ; # [doc = "CCP Output Action on CC2U event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_CC2UACT_A { # [doc = "0: DISABLED"] CCACT_01_CC2UACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_CC2UACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_CC2UACT_CCP_LOW = 2 , # [doc = "3: CCP_TOGGLE"] CCACT_01_CC2UACT_CCP_TOGGLE = 3 , } impl From < CCACT_01_CC2UACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_CC2UACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_CC2UACT_A { type Ux = u8 ; } impl CCACT_01_CC2UACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CCACT_01_CC2UACT_A { match self . bits { 0 => CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_DISABLED , 1 => CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_HIGH , 2 => CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_LOW , 3 => CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_TOGGLE , _ => unreachable ! () , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_cc2uact_disabled (& self) -> bool { * self == CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_cc2uact_ccp_high (& self) -> bool { * self == CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_cc2uact_ccp_low (& self) -> bool { * self == CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_LOW } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn is_ccact_01_cc2uact_ccp_toggle (& self) -> bool { * self == CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_TOGGLE } } # [doc = "Field `CCACT_01_CC2UACT` writer - CCP Output Action on CC2U event."] pub type CCACT_01_CC2UACT_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 2 , O , CCACT_01_CC2UACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_CC2UACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_cc2uact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_cc2uact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_cc2uact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_LOW) } # [doc = "CCP_TOGGLE"] # [inline (always)] pub fn ccact_01_cc2uact_ccp_toggle (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_CC2UACT_A :: CCACT_01_CC2UACT_CCP_TOGGLE) } } # [doc = "Field `CCACT_01_SWFRCACT` reader - CCP Output Action on Software Froce Output This field describes the resulting action of software force. This action has a shadow register, which will be updated under specific condition. So that this register cannot take into effect immediately."] pub type CCACT_01_SWFRCACT_R = crate :: FieldReader < CCACT_01_SWFRCACT_A > ; # [doc = "CCP Output Action on Software Froce Output This field describes the resulting action of software force. This action has a shadow register, which will be updated under specific condition. So that this register cannot take into effect immediately.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum CCACT_01_SWFRCACT_A { # [doc = "0: DISABLED"] CCACT_01_SWFRCACT_DISABLED = 0 , # [doc = "1: CCP_HIGH"] CCACT_01_SWFRCACT_CCP_HIGH = 1 , # [doc = "2: CCP_LOW"] CCACT_01_SWFRCACT_CCP_LOW = 2 , } impl From < CCACT_01_SWFRCACT_A > for u8 { # [inline (always)] fn from (variant : CCACT_01_SWFRCACT_A) -> Self { variant as _ } } impl crate :: FieldSpec for CCACT_01_SWFRCACT_A { type Ux = u8 ; } impl CCACT_01_SWFRCACT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < CCACT_01_SWFRCACT_A > { match self . bits { 0 => Some (CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_DISABLED) , 1 => Some (CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_CCP_HIGH) , 2 => Some (CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_CCP_LOW) , _ => None , } } # [doc = "DISABLED"] # [inline (always)] pub fn is_ccact_01_swfrcact_disabled (& self) -> bool { * self == CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_DISABLED } # [doc = "CCP_HIGH"] # [inline (always)] pub fn is_ccact_01_swfrcact_ccp_high (& self) -> bool { * self == CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_CCP_HIGH } # [doc = "CCP_LOW"] # [inline (always)] pub fn is_ccact_01_swfrcact_ccp_low (& self) -> bool { * self == CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_CCP_LOW } } # [doc = "Field `CCACT_01_SWFRCACT` writer - CCP Output Action on Software Froce Output This field describes the resulting action of software force. This action has a shadow register, which will be updated under specific condition. So that this register cannot take into effect immediately."] pub type CCACT_01_SWFRCACT_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 2 , O , CCACT_01_SWFRCACT_A > ; impl < 'a , REG , const O : u8 > CCACT_01_SWFRCACT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "DISABLED"] # [inline (always)] pub fn ccact_01_swfrcact_disabled (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_DISABLED) } # [doc = "CCP_HIGH"] # [inline (always)] pub fn ccact_01_swfrcact_ccp_high (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_CCP_HIGH) } # [doc = "CCP_LOW"] # [inline (always)] pub fn ccact_01_swfrcact_ccp_low (self) -> & 'a mut crate :: W < REG > { self . variant (CCACT_01_SWFRCACT_A :: CCACT_01_SWFRCACT_CCP_LOW) } } impl R { # [doc = "Bits 0:1 - CCP Output Action on Zero Specifies what changes occur to CCP output as the result of a zero event."] # [inline (always)] pub fn ccact_01_zact (& self) -> CCACT_01_ZACT_R { CCACT_01_ZACT_R :: new ((self . bits & 3) as u8) } # [doc = "Bits 3:4 - CCP Output Action on Load Specifies what changes occur to CCP output as the result of a load event."] # [inline (always)] pub fn ccact_01_lact (& self) -> CCACT_01_LACT_R { CCACT_01_LACT_R :: new (((self . bits >> 3) & 3) as u8) } # [doc = "Bits 6:7 - CCP Output Action on Compare (Down) This field describes the resulting action of the signal generator upon detecting a compare event while counting down."] # [inline (always)] pub fn ccact_01_cdact (& self) -> CCACT_01_CDACT_R { CCACT_01_CDACT_R :: new (((self . bits >> 6) & 3) as u8) } # [doc = "Bits 9:10 - CCP Output Action on Compare (Up) This field describes the resulting action of the signal generator upon detecting a compare event while counting up."] # [inline (always)] pub fn ccact_01_cuact (& self) -> CCACT_01_CUACT_R { CCACT_01_CUACT_R :: new (((self . bits >> 9) & 3) as u8) } # [doc = "Bits 12:13 - CCP Output Action on CC2D event."] # [inline (always)] pub fn ccact_01_cc2dact (& self) -> CCACT_01_CC2DACT_R { CCACT_01_CC2DACT_R :: new (((self . bits >> 12) & 3) as u8) } # [doc = "Bits 15:16 - CCP Output Action on CC2U event."] # [inline (always)] pub fn ccact_01_cc2uact (& self) -> CCACT_01_CC2UACT_R { CCACT_01_CC2UACT_R :: new (((self . bits >> 15) & 3) as u8) } # [doc = "Bits 28:29 - CCP Output Action on Software Froce Output This field describes the resulting action of software force. This action has a shadow register, which will be updated under specific condition. So that this register cannot take into effect immediately."] # [inline (always)] pub fn ccact_01_swfrcact (& self) -> CCACT_01_SWFRCACT_R { CCACT_01_SWFRCACT_R :: new (((self . bits >> 28) & 3) as u8) } } impl W { # [doc = "Bits 0:1 - CCP Output Action on Zero Specifies what changes occur to CCP output as the result of a zero event."] # [inline (always)] # [must_use] pub fn ccact_01_zact (& mut self) -> CCACT_01_ZACT_W < CCACT_01_SPEC , 0 > { CCACT_01_ZACT_W :: new (self) } # [doc = "Bits 3:4 - CCP Output Action on Load Specifies what changes occur to CCP output as the result of a load event."] # [inline (always)] # [must_use] pub fn ccact_01_lact (& mut self) -> CCACT_01_LACT_W < CCACT_01_SPEC , 3 > { CCACT_01_LACT_W :: new (self) } # [doc = "Bits 6:7 - CCP Output Action on Compare (Down) This field describes the resulting action of the signal generator upon detecting a compare event while counting down."] # [inline (always)] # [must_use] pub fn ccact_01_cdact (& mut self) -> CCACT_01_CDACT_W < CCACT_01_SPEC , 6 > { CCACT_01_CDACT_W :: new (self) } # [doc = "Bits 9:10 - CCP Output Action on Compare (Up) This field describes the resulting action of the signal generator upon detecting a compare event while counting up."] # [inline (always)] # [must_use] pub fn ccact_01_cuact (& mut self) -> CCACT_01_CUACT_W < CCACT_01_SPEC , 9 > { CCACT_01_CUACT_W :: new (self) } # [doc = "Bits 12:13 - CCP Output Action on CC2D event."] # [inline (always)] # [must_use] pub fn ccact_01_cc2dact (& mut self) -> CCACT_01_CC2DACT_W < CCACT_01_SPEC , 12 > { CCACT_01_CC2DACT_W :: new (self) } # [doc = "Bits 15:16 - CCP Output Action on CC2U event."] # [inline (always)] # [must_use] pub fn ccact_01_cc2uact (& mut self) -> CCACT_01_CC2UACT_W < CCACT_01_SPEC , 15 > { CCACT_01_CC2UACT_W :: new (self) } # [doc = "Bits 28:29 - CCP Output Action on Software Froce Output This field describes the resulting action of software force. This action has a shadow register, which will be updated under specific condition. So that this register cannot take into effect immediately."] # [inline (always)] # [must_use] pub fn ccact_01_swfrcact (& mut self) -> CCACT_01_SWFRCACT_W < CCACT_01_SPEC , 28 > { CCACT_01_SWFRCACT_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Capture or Compare Action Registers\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ccact_01::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ccact_01::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CCACT_01_SPEC ; impl crate :: RegisterSpec for CCACT_01_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ccact_01::R`](R) reader structure"] impl crate :: Readable for CCACT_01_SPEC { } # [doc = "`write(|w| ..)` method takes [`ccact_01::W`](W) writer structure"] impl crate :: Writable for CCACT_01_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CCACT_01[%s]
to value 0"] impl crate :: Resettable for CCACT_01_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }