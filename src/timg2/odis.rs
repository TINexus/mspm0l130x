# [doc = "Register `ODIS` reader"] pub type R = crate :: R < ODIS_SPEC > ; # [doc = "Register `ODIS` writer"] pub type W = crate :: W < ODIS_SPEC > ; # [doc = "Field `ODIS_C0CCP0` reader - Counter CCP0 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] pub type ODIS_C0CCP0_R = crate :: BitReader < ODIS_C0CCP0_A > ; # [doc = "Counter CCP0 Disable Mask Defines whether CCP0 of Counter n is forced low or not\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ODIS_C0CCP0_A { # [doc = "0: CCP_OUTPUT_OCTL"] ODIS_C0CCP0_CCP_OUTPUT_OCTL = 0 , # [doc = "1: CCP_OUTPUT_LOW"] ODIS_C0CCP0_CCP_OUTPUT_LOW = 1 , } impl From < ODIS_C0CCP0_A > for bool { # [inline (always)] fn from (variant : ODIS_C0CCP0_A) -> Self { variant as u8 != 0 } } impl ODIS_C0CCP0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> ODIS_C0CCP0_A { match self . bits { false => ODIS_C0CCP0_A :: ODIS_C0CCP0_CCP_OUTPUT_OCTL , true => ODIS_C0CCP0_A :: ODIS_C0CCP0_CCP_OUTPUT_LOW , } } # [doc = "CCP_OUTPUT_OCTL"] # [inline (always)] pub fn is_odis_c0ccp0_ccp_output_octl (& self) -> bool { * self == ODIS_C0CCP0_A :: ODIS_C0CCP0_CCP_OUTPUT_OCTL } # [doc = "CCP_OUTPUT_LOW"] # [inline (always)] pub fn is_odis_c0ccp0_ccp_output_low (& self) -> bool { * self == ODIS_C0CCP0_A :: ODIS_C0CCP0_CCP_OUTPUT_LOW } } # [doc = "Field `ODIS_C0CCP0` writer - Counter CCP0 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] pub type ODIS_C0CCP0_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ODIS_C0CCP0_A > ; impl < 'a , REG , const O : u8 > ODIS_C0CCP0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CCP_OUTPUT_OCTL"] # [inline (always)] pub fn odis_c0ccp0_ccp_output_octl (self) -> & 'a mut crate :: W < REG > { self . variant (ODIS_C0CCP0_A :: ODIS_C0CCP0_CCP_OUTPUT_OCTL) } # [doc = "CCP_OUTPUT_LOW"] # [inline (always)] pub fn odis_c0ccp0_ccp_output_low (self) -> & 'a mut crate :: W < REG > { self . variant (ODIS_C0CCP0_A :: ODIS_C0CCP0_CCP_OUTPUT_LOW) } } # [doc = "Field `ODIS_C0CCP1` reader - Counter CCP1 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] pub type ODIS_C0CCP1_R = crate :: BitReader < ODIS_C0CCP1_A > ; # [doc = "Counter CCP1 Disable Mask Defines whether CCP0 of Counter n is forced low or not\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum ODIS_C0CCP1_A { # [doc = "0: CCP_OUTPUT_OCTL"] ODIS_C0CCP1_CCP_OUTPUT_OCTL = 0 , # [doc = "1: CCP_OUTPUT_LOW"] ODIS_C0CCP1_CCP_OUTPUT_LOW = 1 , } impl From < ODIS_C0CCP1_A > for bool { # [inline (always)] fn from (variant : ODIS_C0CCP1_A) -> Self { variant as u8 != 0 } } impl ODIS_C0CCP1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> ODIS_C0CCP1_A { match self . bits { false => ODIS_C0CCP1_A :: ODIS_C0CCP1_CCP_OUTPUT_OCTL , true => ODIS_C0CCP1_A :: ODIS_C0CCP1_CCP_OUTPUT_LOW , } } # [doc = "CCP_OUTPUT_OCTL"] # [inline (always)] pub fn is_odis_c0ccp1_ccp_output_octl (& self) -> bool { * self == ODIS_C0CCP1_A :: ODIS_C0CCP1_CCP_OUTPUT_OCTL } # [doc = "CCP_OUTPUT_LOW"] # [inline (always)] pub fn is_odis_c0ccp1_ccp_output_low (& self) -> bool { * self == ODIS_C0CCP1_A :: ODIS_C0CCP1_CCP_OUTPUT_LOW } } # [doc = "Field `ODIS_C0CCP1` writer - Counter CCP1 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] pub type ODIS_C0CCP1_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , ODIS_C0CCP1_A > ; impl < 'a , REG , const O : u8 > ODIS_C0CCP1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CCP_OUTPUT_OCTL"] # [inline (always)] pub fn odis_c0ccp1_ccp_output_octl (self) -> & 'a mut crate :: W < REG > { self . variant (ODIS_C0CCP1_A :: ODIS_C0CCP1_CCP_OUTPUT_OCTL) } # [doc = "CCP_OUTPUT_LOW"] # [inline (always)] pub fn odis_c0ccp1_ccp_output_low (self) -> & 'a mut crate :: W < REG > { self . variant (ODIS_C0CCP1_A :: ODIS_C0CCP1_CCP_OUTPUT_LOW) } } impl R { # [doc = "Bit 0 - Counter CCP0 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] # [inline (always)] pub fn odis_c0ccp0 (& self) -> ODIS_C0CCP0_R { ODIS_C0CCP0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Counter CCP1 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] # [inline (always)] pub fn odis_c0ccp1 (& self) -> ODIS_C0CCP1_R { ODIS_C0CCP1_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - Counter CCP0 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] # [inline (always)] # [must_use] pub fn odis_c0ccp0 (& mut self) -> ODIS_C0CCP0_W < ODIS_SPEC , 0 > { ODIS_C0CCP0_W :: new (self) } # [doc = "Bit 1 - Counter CCP1 Disable Mask Defines whether CCP0 of Counter n is forced low or not"] # [inline (always)] # [must_use] pub fn odis_c0ccp1 (& mut self) -> ODIS_C0CCP1_W < ODIS_SPEC , 1 > { ODIS_C0CCP1_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Output Disable\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`odis::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`odis::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ODIS_SPEC ; impl crate :: RegisterSpec for ODIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`odis::R`](R) reader structure"] impl crate :: Readable for ODIS_SPEC { } # [doc = "`write(|w| ..)` method takes [`odis::W`](W) writer structure"] impl crate :: Writable for ODIS_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets ODIS to value 0"] impl crate :: Resettable for ODIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }