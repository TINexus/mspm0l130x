# [doc = "Register `CPS` reader"] pub type R = crate :: R < CPS_SPEC > ; # [doc = "Register `CPS` writer"] pub type W = crate :: W < CPS_SPEC > ; # [doc = "Field `CPS_PCNT` reader - Pre-Scale Count This field specifies the pre-scale count value. The selected TIMCLK source is divided by a value of (PCNT+1). A PCNT value of 0 divides TIMCLK by 1, effectively bypassing the divider. A PCNT value of greater than 0 divides the TIMCLK source generating a slower clock"] pub type CPS_PCNT_R = crate :: FieldReader ; # [doc = "Field `CPS_PCNT` writer - Pre-Scale Count This field specifies the pre-scale count value. The selected TIMCLK source is divided by a value of (PCNT+1). A PCNT value of 0 divides TIMCLK by 1, effectively bypassing the divider. A PCNT value of greater than 0 divides the TIMCLK source generating a slower clock"] pub type CPS_PCNT_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O > ; impl R { # [doc = "Bits 0:7 - Pre-Scale Count This field specifies the pre-scale count value. The selected TIMCLK source is divided by a value of (PCNT+1). A PCNT value of 0 divides TIMCLK by 1, effectively bypassing the divider. A PCNT value of greater than 0 divides the TIMCLK source generating a slower clock"] # [inline (always)] pub fn cps_pcnt (& self) -> CPS_PCNT_R { CPS_PCNT_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7 - Pre-Scale Count This field specifies the pre-scale count value. The selected TIMCLK source is divided by a value of (PCNT+1). A PCNT value of 0 divides TIMCLK by 1, effectively bypassing the divider. A PCNT value of greater than 0 divides the TIMCLK source generating a slower clock"] # [inline (always)] # [must_use] pub fn cps_pcnt (& mut self) -> CPS_PCNT_W < CPS_SPEC , 0 > { CPS_PCNT_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Clock Prescale Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cps::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cps::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CPS_SPEC ; impl crate :: RegisterSpec for CPS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cps::R`](R) reader structure"] impl crate :: Readable for CPS_SPEC { } # [doc = "`write(|w| ..)` method takes [`cps::W`](W) writer structure"] impl crate :: Writable for CPS_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CPS to value 0"] impl crate :: Resettable for CPS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }