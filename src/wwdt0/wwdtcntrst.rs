# [doc = "Register `WWDTCNTRST` reader"] pub type R = crate :: R < WWDTCNTRST_SPEC > ; # [doc = "Register `WWDTCNTRST` writer"] pub type W = crate :: W < WWDTCNTRST_SPEC > ; # [doc = "Field `WWDTCNTRST_RESTART` reader - Window Watchdog Timer Counter Restart Writing 00A7h to this register restarts the WWDT Counter. Writing any other value causes an error generation to the ESM. Read as 0."] pub type WWDTCNTRST_RESTART_R = crate :: FieldReader < u32 > ; # [doc = "Field `WWDTCNTRST_RESTART` writer - Window Watchdog Timer Counter Restart Writing 00A7h to this register restarts the WWDT Counter. Writing any other value causes an error generation to the ESM. Read as 0."] pub type WWDTCNTRST_RESTART_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 32 , O , u32 > ; impl R { # [doc = "Bits 0:31 - Window Watchdog Timer Counter Restart Writing 00A7h to this register restarts the WWDT Counter. Writing any other value causes an error generation to the ESM. Read as 0."] # [inline (always)] pub fn wwdtcntrst_restart (& self) -> WWDTCNTRST_RESTART_R { WWDTCNTRST_RESTART_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Window Watchdog Timer Counter Restart Writing 00A7h to this register restarts the WWDT Counter. Writing any other value causes an error generation to the ESM. Read as 0."] # [inline (always)] # [must_use] pub fn wwdtcntrst_restart (& mut self) -> WWDTCNTRST_RESTART_W < WWDTCNTRST_SPEC , 0 > { WWDTCNTRST_RESTART_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Window Watchdog Timer Counter Reset Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`wwdtcntrst::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`wwdtcntrst::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct WWDTCNTRST_SPEC ; impl crate :: RegisterSpec for WWDTCNTRST_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`wwdtcntrst::R`](R) reader structure"] impl crate :: Readable for WWDTCNTRST_SPEC { } # [doc = "`write(|w| ..)` method takes [`wwdtcntrst::W`](W) writer structure"] impl crate :: Writable for WWDTCNTRST_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets WWDTCNTRST to value 0"] impl crate :: Resettable for WWDTCNTRST_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }