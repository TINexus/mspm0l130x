# [doc = "Register `RIS` reader"] pub type R = crate :: R < RIS_SPEC > ; # [doc = "Field `RIS_INTTIM` reader - Interval Timer Interrupt."] pub type RIS_INTTIM_R = crate :: BitReader < RIS_INTTIM_A > ; # [doc = "Interval Timer Interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_INTTIM_A { # [doc = "0: CLR"] RIS_INTTIM_CLR = 0 , # [doc = "1: SET"] RIS_INTTIM_SET = 1 , } impl From < RIS_INTTIM_A > for bool { # [inline (always)] fn from (variant : RIS_INTTIM_A) -> Self { variant as u8 != 0 } } impl RIS_INTTIM_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_INTTIM_A { match self . bits { false => RIS_INTTIM_A :: RIS_INTTIM_CLR , true => RIS_INTTIM_A :: RIS_INTTIM_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_ris_inttim_clr (& self) -> bool { * self == RIS_INTTIM_A :: RIS_INTTIM_CLR } # [doc = "SET"] # [inline (always)] pub fn is_ris_inttim_set (& self) -> bool { * self == RIS_INTTIM_A :: RIS_INTTIM_SET } } impl R { # [doc = "Bit 0 - Interval Timer Interrupt."] # [inline (always)] pub fn ris_inttim (& self) -> RIS_INTTIM_R { RIS_INTTIM_R :: new ((self . bits & 1) != 0) } } # [doc = "Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RIS_SPEC ; impl crate :: RegisterSpec for RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ris::R`](R) reader structure"] impl crate :: Readable for RIS_SPEC { } # [doc = "`reset()` method sets RIS to value 0"] impl crate :: Resettable for RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }