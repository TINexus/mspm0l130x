# [doc = "Register `MIS` reader"] pub type R = crate :: R < MIS_SPEC > ; # [doc = "Field `MIS_INTTIM` reader - Interval Timer Interrupt."] pub type MIS_INTTIM_R = crate :: BitReader < MIS_INTTIM_A > ; # [doc = "Interval Timer Interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_INTTIM_A { # [doc = "0: CLR"] MIS_INTTIM_CLR = 0 , # [doc = "1: SET"] MIS_INTTIM_SET = 1 , } impl From < MIS_INTTIM_A > for bool { # [inline (always)] fn from (variant : MIS_INTTIM_A) -> Self { variant as u8 != 0 } } impl MIS_INTTIM_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_INTTIM_A { match self . bits { false => MIS_INTTIM_A :: MIS_INTTIM_CLR , true => MIS_INTTIM_A :: MIS_INTTIM_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_mis_inttim_clr (& self) -> bool { * self == MIS_INTTIM_A :: MIS_INTTIM_CLR } # [doc = "SET"] # [inline (always)] pub fn is_mis_inttim_set (& self) -> bool { * self == MIS_INTTIM_A :: MIS_INTTIM_SET } } impl R { # [doc = "Bit 0 - Interval Timer Interrupt."] # [inline (always)] pub fn mis_inttim (& self) -> MIS_INTTIM_R { MIS_INTTIM_R :: new ((self . bits & 1) != 0) } } # [doc = "Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mis::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MIS_SPEC ; impl crate :: RegisterSpec for MIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`mis::R`](R) reader structure"] impl crate :: Readable for MIS_SPEC { } # [doc = "`reset()` method sets MIS to value 0"] impl crate :: Resettable for MIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }