# [doc = "Register `PDBGCTL` reader"] pub type R = crate :: R < PDBGCTL_SPEC > ; # [doc = "Register `PDBGCTL` writer"] pub type W = crate :: W < PDBGCTL_SPEC > ; # [doc = "Field `PDBGCTL_FREE` reader - Free run control"] pub type PDBGCTL_FREE_R = crate :: BitReader < PDBGCTL_FREE_A > ; # [doc = "Free run control\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum PDBGCTL_FREE_A { # [doc = "0: STOP"] PDBGCTL_FREE_STOP = 0 , # [doc = "1: RUN"] PDBGCTL_FREE_RUN = 1 , } impl From < PDBGCTL_FREE_A > for bool { # [inline (always)] fn from (variant : PDBGCTL_FREE_A) -> Self { variant as u8 != 0 } } impl PDBGCTL_FREE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> PDBGCTL_FREE_A { match self . bits { false => PDBGCTL_FREE_A :: PDBGCTL_FREE_STOP , true => PDBGCTL_FREE_A :: PDBGCTL_FREE_RUN , } } # [doc = "STOP"] # [inline (always)] pub fn is_pdbgctl_free_stop (& self) -> bool { * self == PDBGCTL_FREE_A :: PDBGCTL_FREE_STOP } # [doc = "RUN"] # [inline (always)] pub fn is_pdbgctl_free_run (& self) -> bool { * self == PDBGCTL_FREE_A :: PDBGCTL_FREE_RUN } } # [doc = "Field `PDBGCTL_FREE` writer - Free run control"] pub type PDBGCTL_FREE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , PDBGCTL_FREE_A > ; impl < 'a , REG , const O : u8 > PDBGCTL_FREE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "STOP"] # [inline (always)] pub fn pdbgctl_free_stop (self) -> & 'a mut crate :: W < REG > { self . variant (PDBGCTL_FREE_A :: PDBGCTL_FREE_STOP) } # [doc = "RUN"] # [inline (always)] pub fn pdbgctl_free_run (self) -> & 'a mut crate :: W < REG > { self . variant (PDBGCTL_FREE_A :: PDBGCTL_FREE_RUN) } } impl R { # [doc = "Bit 0 - Free run control"] # [inline (always)] pub fn pdbgctl_free (& self) -> PDBGCTL_FREE_R { PDBGCTL_FREE_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Free run control"] # [inline (always)] # [must_use] pub fn pdbgctl_free (& mut self) -> PDBGCTL_FREE_W < PDBGCTL_SPEC , 0 > { PDBGCTL_FREE_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Peripheral Debug Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pdbgctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pdbgctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PDBGCTL_SPEC ; impl crate :: RegisterSpec for PDBGCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`pdbgctl::R`](R) reader structure"] impl crate :: Readable for PDBGCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`pdbgctl::W`](W) writer structure"] impl crate :: Writable for PDBGCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets PDBGCTL to value 0"] impl crate :: Resettable for PDBGCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }