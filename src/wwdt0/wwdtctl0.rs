# [doc = "Register `WWDTCTL0` reader"] pub type R = crate :: R < WWDTCTL0_SPEC > ; # [doc = "Register `WWDTCTL0` writer"] pub type W = crate :: W < WWDTCTL0_SPEC > ; # [doc = "Field `WWDTCTL0_CLKDIV` reader - Module Clock Divider, Divide the clock source by CLKDIV+1. Divider values from /1 to /8 are possible. The clock divider is currently 4 bits. Bit 4 has no effect and should always be written with 0."] pub type WWDTCTL0_CLKDIV_R = crate :: FieldReader ; # [doc = "Field `WWDTCTL0_CLKDIV` writer - Module Clock Divider, Divide the clock source by CLKDIV+1. Divider values from /1 to /8 are possible. The clock divider is currently 4 bits. Bit 4 has no effect and should always be written with 0."] pub type WWDTCTL0_CLKDIV_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 3 , O > ; # [doc = "Field `WWDTCTL0_PER` reader - Timer Period of the WWDT. These bits select the total watchdog timer count."] pub type WWDTCTL0_PER_R = crate :: FieldReader < WWDTCTL0_PER_A > ; # [doc = "Timer Period of the WWDT. These bits select the total watchdog timer count.\n\nValue on reset: 4"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum WWDTCTL0_PER_A { # [doc = "0: EN_25"] WWDTCTL0_PER_EN_25 = 0 , # [doc = "1: EN_21"] WWDTCTL0_PER_EN_21 = 1 , # [doc = "2: EN_18"] WWDTCTL0_PER_EN_18 = 2 , # [doc = "3: EN_15"] WWDTCTL0_PER_EN_15 = 3 , # [doc = "4: EN_12"] WWDTCTL0_PER_EN_12 = 4 , # [doc = "5: EN_10"] WWDTCTL0_PER_EN_10 = 5 , # [doc = "6: EN_8"] WWDTCTL0_PER_EN_8 = 6 , # [doc = "7: EN_6"] WWDTCTL0_PER_EN_6 = 7 , } impl From < WWDTCTL0_PER_A > for u8 { # [inline (always)] fn from (variant : WWDTCTL0_PER_A) -> Self { variant as _ } } impl crate :: FieldSpec for WWDTCTL0_PER_A { type Ux = u8 ; } impl WWDTCTL0_PER_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> WWDTCTL0_PER_A { match self . bits { 0 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_25 , 1 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_21 , 2 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_18 , 3 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_15 , 4 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_12 , 5 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_10 , 6 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_8 , 7 => WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_6 , _ => unreachable ! () , } } # [doc = "EN_25"] # [inline (always)] pub fn is_wwdtctl0_per_en_25 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_25 } # [doc = "EN_21"] # [inline (always)] pub fn is_wwdtctl0_per_en_21 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_21 } # [doc = "EN_18"] # [inline (always)] pub fn is_wwdtctl0_per_en_18 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_18 } # [doc = "EN_15"] # [inline (always)] pub fn is_wwdtctl0_per_en_15 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_15 } # [doc = "EN_12"] # [inline (always)] pub fn is_wwdtctl0_per_en_12 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_12 } # [doc = "EN_10"] # [inline (always)] pub fn is_wwdtctl0_per_en_10 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_10 } # [doc = "EN_8"] # [inline (always)] pub fn is_wwdtctl0_per_en_8 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_8 } # [doc = "EN_6"] # [inline (always)] pub fn is_wwdtctl0_per_en_6 (& self) -> bool { * self == WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_6 } } # [doc = "Field `WWDTCTL0_PER` writer - Timer Period of the WWDT. These bits select the total watchdog timer count."] pub type WWDTCTL0_PER_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , WWDTCTL0_PER_A > ; impl < 'a , REG , const O : u8 > WWDTCTL0_PER_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "EN_25"] # [inline (always)] pub fn wwdtctl0_per_en_25 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_25) } # [doc = "EN_21"] # [inline (always)] pub fn wwdtctl0_per_en_21 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_21) } # [doc = "EN_18"] # [inline (always)] pub fn wwdtctl0_per_en_18 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_18) } # [doc = "EN_15"] # [inline (always)] pub fn wwdtctl0_per_en_15 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_15) } # [doc = "EN_12"] # [inline (always)] pub fn wwdtctl0_per_en_12 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_12) } # [doc = "EN_10"] # [inline (always)] pub fn wwdtctl0_per_en_10 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_10) } # [doc = "EN_8"] # [inline (always)] pub fn wwdtctl0_per_en_8 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_8) } # [doc = "EN_6"] # [inline (always)] pub fn wwdtctl0_per_en_6 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_PER_A :: WWDTCTL0_PER_EN_6) } } # [doc = "Field `WWDTCTL0_WINDOW0` reader - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] pub type WWDTCTL0_WINDOW0_R = crate :: FieldReader < WWDTCTL0_WINDOW0_A > ; # [doc = "Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum WWDTCTL0_WINDOW0_A { # [doc = "0: SIZE_0"] WWDTCTL0_WINDOW0_SIZE_0 = 0 , # [doc = "1: SIZE_12"] WWDTCTL0_WINDOW0_SIZE_12 = 1 , # [doc = "2: SIZE_18"] WWDTCTL0_WINDOW0_SIZE_18 = 2 , # [doc = "3: SIZE_25"] WWDTCTL0_WINDOW0_SIZE_25 = 3 , # [doc = "4: SIZE_50"] WWDTCTL0_WINDOW0_SIZE_50 = 4 , # [doc = "5: SIZE_75"] WWDTCTL0_WINDOW0_SIZE_75 = 5 , # [doc = "6: SIZE_81"] WWDTCTL0_WINDOW0_SIZE_81 = 6 , # [doc = "7: SIZE_87"] WWDTCTL0_WINDOW0_SIZE_87 = 7 , } impl From < WWDTCTL0_WINDOW0_A > for u8 { # [inline (always)] fn from (variant : WWDTCTL0_WINDOW0_A) -> Self { variant as _ } } impl crate :: FieldSpec for WWDTCTL0_WINDOW0_A { type Ux = u8 ; } impl WWDTCTL0_WINDOW0_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> WWDTCTL0_WINDOW0_A { match self . bits { 0 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_0 , 1 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_12 , 2 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_18 , 3 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_25 , 4 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_50 , 5 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_75 , 6 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_81 , 7 => WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_87 , _ => unreachable ! () , } } # [doc = "SIZE_0"] # [inline (always)] pub fn is_wwdtctl0_window0_size_0 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_0 } # [doc = "SIZE_12"] # [inline (always)] pub fn is_wwdtctl0_window0_size_12 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_12 } # [doc = "SIZE_18"] # [inline (always)] pub fn is_wwdtctl0_window0_size_18 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_18 } # [doc = "SIZE_25"] # [inline (always)] pub fn is_wwdtctl0_window0_size_25 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_25 } # [doc = "SIZE_50"] # [inline (always)] pub fn is_wwdtctl0_window0_size_50 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_50 } # [doc = "SIZE_75"] # [inline (always)] pub fn is_wwdtctl0_window0_size_75 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_75 } # [doc = "SIZE_81"] # [inline (always)] pub fn is_wwdtctl0_window0_size_81 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_81 } # [doc = "SIZE_87"] # [inline (always)] pub fn is_wwdtctl0_window0_size_87 (& self) -> bool { * self == WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_87 } } # [doc = "Field `WWDTCTL0_WINDOW0` writer - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] pub type WWDTCTL0_WINDOW0_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , WWDTCTL0_WINDOW0_A > ; impl < 'a , REG , const O : u8 > WWDTCTL0_WINDOW0_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "SIZE_0"] # [inline (always)] pub fn wwdtctl0_window0_size_0 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_0) } # [doc = "SIZE_12"] # [inline (always)] pub fn wwdtctl0_window0_size_12 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_12) } # [doc = "SIZE_18"] # [inline (always)] pub fn wwdtctl0_window0_size_18 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_18) } # [doc = "SIZE_25"] # [inline (always)] pub fn wwdtctl0_window0_size_25 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_25) } # [doc = "SIZE_50"] # [inline (always)] pub fn wwdtctl0_window0_size_50 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_50) } # [doc = "SIZE_75"] # [inline (always)] pub fn wwdtctl0_window0_size_75 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_75) } # [doc = "SIZE_81"] # [inline (always)] pub fn wwdtctl0_window0_size_81 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_81) } # [doc = "SIZE_87"] # [inline (always)] pub fn wwdtctl0_window0_size_87 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW0_A :: WWDTCTL0_WINDOW0_SIZE_87) } } # [doc = "Field `WWDTCTL0_WINDOW1` reader - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] pub type WWDTCTL0_WINDOW1_R = crate :: FieldReader < WWDTCTL0_WINDOW1_A > ; # [doc = "Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum WWDTCTL0_WINDOW1_A { # [doc = "0: SIZE_0"] WWDTCTL0_WINDOW1_SIZE_0 = 0 , # [doc = "1: SIZE_12"] WWDTCTL0_WINDOW1_SIZE_12 = 1 , # [doc = "2: SIZE_18"] WWDTCTL0_WINDOW1_SIZE_18 = 2 , # [doc = "3: SIZE_25"] WWDTCTL0_WINDOW1_SIZE_25 = 3 , # [doc = "4: SIZE_50"] WWDTCTL0_WINDOW1_SIZE_50 = 4 , # [doc = "5: SIZE_75"] WWDTCTL0_WINDOW1_SIZE_75 = 5 , # [doc = "6: SIZE_81"] WWDTCTL0_WINDOW1_SIZE_81 = 6 , # [doc = "7: SIZE_87"] WWDTCTL0_WINDOW1_SIZE_87 = 7 , } impl From < WWDTCTL0_WINDOW1_A > for u8 { # [inline (always)] fn from (variant : WWDTCTL0_WINDOW1_A) -> Self { variant as _ } } impl crate :: FieldSpec for WWDTCTL0_WINDOW1_A { type Ux = u8 ; } impl WWDTCTL0_WINDOW1_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> WWDTCTL0_WINDOW1_A { match self . bits { 0 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_0 , 1 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_12 , 2 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_18 , 3 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_25 , 4 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_50 , 5 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_75 , 6 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_81 , 7 => WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_87 , _ => unreachable ! () , } } # [doc = "SIZE_0"] # [inline (always)] pub fn is_wwdtctl0_window1_size_0 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_0 } # [doc = "SIZE_12"] # [inline (always)] pub fn is_wwdtctl0_window1_size_12 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_12 } # [doc = "SIZE_18"] # [inline (always)] pub fn is_wwdtctl0_window1_size_18 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_18 } # [doc = "SIZE_25"] # [inline (always)] pub fn is_wwdtctl0_window1_size_25 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_25 } # [doc = "SIZE_50"] # [inline (always)] pub fn is_wwdtctl0_window1_size_50 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_50 } # [doc = "SIZE_75"] # [inline (always)] pub fn is_wwdtctl0_window1_size_75 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_75 } # [doc = "SIZE_81"] # [inline (always)] pub fn is_wwdtctl0_window1_size_81 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_81 } # [doc = "SIZE_87"] # [inline (always)] pub fn is_wwdtctl0_window1_size_87 (& self) -> bool { * self == WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_87 } } # [doc = "Field `WWDTCTL0_WINDOW1` writer - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] pub type WWDTCTL0_WINDOW1_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , WWDTCTL0_WINDOW1_A > ; impl < 'a , REG , const O : u8 > WWDTCTL0_WINDOW1_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "SIZE_0"] # [inline (always)] pub fn wwdtctl0_window1_size_0 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_0) } # [doc = "SIZE_12"] # [inline (always)] pub fn wwdtctl0_window1_size_12 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_12) } # [doc = "SIZE_18"] # [inline (always)] pub fn wwdtctl0_window1_size_18 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_18) } # [doc = "SIZE_25"] # [inline (always)] pub fn wwdtctl0_window1_size_25 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_25) } # [doc = "SIZE_50"] # [inline (always)] pub fn wwdtctl0_window1_size_50 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_50) } # [doc = "SIZE_75"] # [inline (always)] pub fn wwdtctl0_window1_size_75 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_75) } # [doc = "SIZE_81"] # [inline (always)] pub fn wwdtctl0_window1_size_81 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_81) } # [doc = "SIZE_87"] # [inline (always)] pub fn wwdtctl0_window1_size_87 (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_WINDOW1_A :: WWDTCTL0_WINDOW1_SIZE_87) } } # [doc = "Field `WWDTCTL0_MODE` reader - Window Watchdog Timer Mode"] pub type WWDTCTL0_MODE_R = crate :: BitReader < WWDTCTL0_MODE_A > ; # [doc = "Window Watchdog Timer Mode\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum WWDTCTL0_MODE_A { # [doc = "0: WINDOW"] WWDTCTL0_MODE_WINDOW = 0 , # [doc = "1: INTERVAL"] WWDTCTL0_MODE_INTERVAL = 1 , } impl From < WWDTCTL0_MODE_A > for bool { # [inline (always)] fn from (variant : WWDTCTL0_MODE_A) -> Self { variant as u8 != 0 } } impl WWDTCTL0_MODE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> WWDTCTL0_MODE_A { match self . bits { false => WWDTCTL0_MODE_A :: WWDTCTL0_MODE_WINDOW , true => WWDTCTL0_MODE_A :: WWDTCTL0_MODE_INTERVAL , } } # [doc = "WINDOW"] # [inline (always)] pub fn is_wwdtctl0_mode_window (& self) -> bool { * self == WWDTCTL0_MODE_A :: WWDTCTL0_MODE_WINDOW } # [doc = "INTERVAL"] # [inline (always)] pub fn is_wwdtctl0_mode_interval (& self) -> bool { * self == WWDTCTL0_MODE_A :: WWDTCTL0_MODE_INTERVAL } } # [doc = "Field `WWDTCTL0_MODE` writer - Window Watchdog Timer Mode"] pub type WWDTCTL0_MODE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , WWDTCTL0_MODE_A > ; impl < 'a , REG , const O : u8 > WWDTCTL0_MODE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "WINDOW"] # [inline (always)] pub fn wwdtctl0_mode_window (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_MODE_A :: WWDTCTL0_MODE_WINDOW) } # [doc = "INTERVAL"] # [inline (always)] pub fn wwdtctl0_mode_interval (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_MODE_A :: WWDTCTL0_MODE_INTERVAL) } } # [doc = "Field `WWDTCTL0_STISM` reader - Stop In Sleep Mode. The functionality of this bit requires that POLICY.HWCEN = 0. If POLICY.HWCEN = 1 the WWDT resets during sleep and needs re-configuration. Note: This bit has no effect for the global Window Watchdog as Sleep Mode is not supported."] pub type WWDTCTL0_STISM_R = crate :: BitReader < WWDTCTL0_STISM_A > ; # [doc = "Stop In Sleep Mode. The functionality of this bit requires that POLICY.HWCEN = 0. If POLICY.HWCEN = 1 the WWDT resets during sleep and needs re-configuration. Note: This bit has no effect for the global Window Watchdog as Sleep Mode is not supported.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum WWDTCTL0_STISM_A { # [doc = "0: CONT"] WWDTCTL0_STISM_CONT = 0 , # [doc = "1: STOP"] WWDTCTL0_STISM_STOP = 1 , } impl From < WWDTCTL0_STISM_A > for bool { # [inline (always)] fn from (variant : WWDTCTL0_STISM_A) -> Self { variant as u8 != 0 } } impl WWDTCTL0_STISM_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> WWDTCTL0_STISM_A { match self . bits { false => WWDTCTL0_STISM_A :: WWDTCTL0_STISM_CONT , true => WWDTCTL0_STISM_A :: WWDTCTL0_STISM_STOP , } } # [doc = "CONT"] # [inline (always)] pub fn is_wwdtctl0_stism_cont (& self) -> bool { * self == WWDTCTL0_STISM_A :: WWDTCTL0_STISM_CONT } # [doc = "STOP"] # [inline (always)] pub fn is_wwdtctl0_stism_stop (& self) -> bool { * self == WWDTCTL0_STISM_A :: WWDTCTL0_STISM_STOP } } # [doc = "Field `WWDTCTL0_STISM` writer - Stop In Sleep Mode. The functionality of this bit requires that POLICY.HWCEN = 0. If POLICY.HWCEN = 1 the WWDT resets during sleep and needs re-configuration. Note: This bit has no effect for the global Window Watchdog as Sleep Mode is not supported."] pub type WWDTCTL0_STISM_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , WWDTCTL0_STISM_A > ; impl < 'a , REG , const O : u8 > WWDTCTL0_STISM_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CONT"] # [inline (always)] pub fn wwdtctl0_stism_cont (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_STISM_A :: WWDTCTL0_STISM_CONT) } # [doc = "STOP"] # [inline (always)] pub fn wwdtctl0_stism_stop (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_STISM_A :: WWDTCTL0_STISM_STOP) } } # [doc = "Field `WWDTCTL0_KEY` reader - KEY to allow write access to this register. Writing to this register with an incorrect key activates the WWDT error signal to the ESM. Read as 0."] pub type WWDTCTL0_KEY_R = crate :: FieldReader < WWDTCTL0_KEY_A > ; # [doc = "KEY to allow write access to this register. Writing to this register with an incorrect key activates the WWDT error signal to the ESM. Read as 0.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum WWDTCTL0_KEY_A { # [doc = "201: _TO_UNLOCK_W_"] WWDTCTL0_KEY_UNLOCK_W = 201 , } impl From < WWDTCTL0_KEY_A > for u8 { # [inline (always)] fn from (variant : WWDTCTL0_KEY_A) -> Self { variant as _ } } impl crate :: FieldSpec for WWDTCTL0_KEY_A { type Ux = u8 ; } impl WWDTCTL0_KEY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < WWDTCTL0_KEY_A > { match self . bits { 201 => Some (WWDTCTL0_KEY_A :: WWDTCTL0_KEY_UNLOCK_W) , _ => None , } } # [doc = "_TO_UNLOCK_W_"] # [inline (always)] pub fn is_wwdtctl0_key_unlock_w (& self) -> bool { * self == WWDTCTL0_KEY_A :: WWDTCTL0_KEY_UNLOCK_W } } # [doc = "Field `WWDTCTL0_KEY` writer - KEY to allow write access to this register. Writing to this register with an incorrect key activates the WWDT error signal to the ESM. Read as 0."] pub type WWDTCTL0_KEY_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O , WWDTCTL0_KEY_A > ; impl < 'a , REG , const O : u8 > WWDTCTL0_KEY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "_TO_UNLOCK_W_"] # [inline (always)] pub fn wwdtctl0_key_unlock_w (self) -> & 'a mut crate :: W < REG > { self . variant (WWDTCTL0_KEY_A :: WWDTCTL0_KEY_UNLOCK_W) } } impl R { # [doc = "Bits 0:2 - Module Clock Divider, Divide the clock source by CLKDIV+1. Divider values from /1 to /8 are possible. The clock divider is currently 4 bits. Bit 4 has no effect and should always be written with 0."] # [inline (always)] pub fn wwdtctl0_clkdiv (& self) -> WWDTCTL0_CLKDIV_R { WWDTCTL0_CLKDIV_R :: new ((self . bits & 7) as u8) } # [doc = "Bits 4:6 - Timer Period of the WWDT. These bits select the total watchdog timer count."] # [inline (always)] pub fn wwdtctl0_per (& self) -> WWDTCTL0_PER_R { WWDTCTL0_PER_R :: new (((self . bits >> 4) & 7) as u8) } # [doc = "Bits 8:10 - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] # [inline (always)] pub fn wwdtctl0_window0 (& self) -> WWDTCTL0_WINDOW0_R { WWDTCTL0_WINDOW0_R :: new (((self . bits >> 8) & 7) as u8) } # [doc = "Bits 12:14 - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] # [inline (always)] pub fn wwdtctl0_window1 (& self) -> WWDTCTL0_WINDOW1_R { WWDTCTL0_WINDOW1_R :: new (((self . bits >> 12) & 7) as u8) } # [doc = "Bit 16 - Window Watchdog Timer Mode"] # [inline (always)] pub fn wwdtctl0_mode (& self) -> WWDTCTL0_MODE_R { WWDTCTL0_MODE_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Stop In Sleep Mode. The functionality of this bit requires that POLICY.HWCEN = 0. If POLICY.HWCEN = 1 the WWDT resets during sleep and needs re-configuration. Note: This bit has no effect for the global Window Watchdog as Sleep Mode is not supported."] # [inline (always)] pub fn wwdtctl0_stism (& self) -> WWDTCTL0_STISM_R { WWDTCTL0_STISM_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bits 24:31 - KEY to allow write access to this register. Writing to this register with an incorrect key activates the WWDT error signal to the ESM. Read as 0."] # [inline (always)] pub fn wwdtctl0_key (& self) -> WWDTCTL0_KEY_R { WWDTCTL0_KEY_R :: new (((self . bits >> 24) & 0xff) as u8) } } impl W { # [doc = "Bits 0:2 - Module Clock Divider, Divide the clock source by CLKDIV+1. Divider values from /1 to /8 are possible. The clock divider is currently 4 bits. Bit 4 has no effect and should always be written with 0."] # [inline (always)] # [must_use] pub fn wwdtctl0_clkdiv (& mut self) -> WWDTCTL0_CLKDIV_W < WWDTCTL0_SPEC , 0 > { WWDTCTL0_CLKDIV_W :: new (self) } # [doc = "Bits 4:6 - Timer Period of the WWDT. These bits select the total watchdog timer count."] # [inline (always)] # [must_use] pub fn wwdtctl0_per (& mut self) -> WWDTCTL0_PER_W < WWDTCTL0_SPEC , 4 > { WWDTCTL0_PER_W :: new (self) } # [doc = "Bits 8:10 - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] # [inline (always)] # [must_use] pub fn wwdtctl0_window0 (& mut self) -> WWDTCTL0_WINDOW0_W < WWDTCTL0_SPEC , 8 > { WWDTCTL0_WINDOW0_W :: new (self) } # [doc = "Bits 12:14 - Closed window period in percentage of the timer interval. WWDTCTL1.WINSEL determines the active window setting (WWDTCTL0.WINDOW0 or WWDTCTL0.WINDOW1)."] # [inline (always)] # [must_use] pub fn wwdtctl0_window1 (& mut self) -> WWDTCTL0_WINDOW1_W < WWDTCTL0_SPEC , 12 > { WWDTCTL0_WINDOW1_W :: new (self) } # [doc = "Bit 16 - Window Watchdog Timer Mode"] # [inline (always)] # [must_use] pub fn wwdtctl0_mode (& mut self) -> WWDTCTL0_MODE_W < WWDTCTL0_SPEC , 16 > { WWDTCTL0_MODE_W :: new (self) } # [doc = "Bit 17 - Stop In Sleep Mode. The functionality of this bit requires that POLICY.HWCEN = 0. If POLICY.HWCEN = 1 the WWDT resets during sleep and needs re-configuration. Note: This bit has no effect for the global Window Watchdog as Sleep Mode is not supported."] # [inline (always)] # [must_use] pub fn wwdtctl0_stism (& mut self) -> WWDTCTL0_STISM_W < WWDTCTL0_SPEC , 17 > { WWDTCTL0_STISM_W :: new (self) } # [doc = "Bits 24:31 - KEY to allow write access to this register. Writing to this register with an incorrect key activates the WWDT error signal to the ESM. Read as 0."] # [inline (always)] # [must_use] pub fn wwdtctl0_key (& mut self) -> WWDTCTL0_KEY_W < WWDTCTL0_SPEC , 24 > { WWDTCTL0_KEY_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Window Watchdog Timer Control Register 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`wwdtctl0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`wwdtctl0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct WWDTCTL0_SPEC ; impl crate :: RegisterSpec for WWDTCTL0_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`wwdtctl0::R`](R) reader structure"] impl crate :: Readable for WWDTCTL0_SPEC { } # [doc = "`write(|w| ..)` method takes [`wwdtctl0::W`](W) writer structure"] impl crate :: Writable for WWDTCTL0_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets WWDTCTL0 to value 0x43"] impl crate :: Resettable for WWDTCTL0_SPEC { const RESET_VALUE : Self :: Ux = 0x43 ; }