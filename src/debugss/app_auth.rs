# [doc = "Register `APP_AUTH` reader"] pub type R = crate :: R < APP_AUTH_SPEC > ; # [doc = "Field `APP_AUTH_DBGEN` reader - Controls invasive debug enable."] pub type APP_AUTH_DBGEN_R = crate :: BitReader < APP_AUTH_DBGEN_A > ; # [doc = "Controls invasive debug enable.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum APP_AUTH_DBGEN_A { # [doc = "0: DISABLE"] APP_AUTH_DBGEN_DISABLE = 0 , # [doc = "1: ENABLE"] APP_AUTH_DBGEN_ENABLE = 1 , } impl From < APP_AUTH_DBGEN_A > for bool { # [inline (always)] fn from (variant : APP_AUTH_DBGEN_A) -> Self { variant as u8 != 0 } } impl APP_AUTH_DBGEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> APP_AUTH_DBGEN_A { match self . bits { false => APP_AUTH_DBGEN_A :: APP_AUTH_DBGEN_DISABLE , true => APP_AUTH_DBGEN_A :: APP_AUTH_DBGEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_app_auth_dbgen_disable (& self) -> bool { * self == APP_AUTH_DBGEN_A :: APP_AUTH_DBGEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_app_auth_dbgen_enable (& self) -> bool { * self == APP_AUTH_DBGEN_A :: APP_AUTH_DBGEN_ENABLE } } # [doc = "Field `APP_AUTH_NIDEN` reader - Controls non-invasive debug enable."] pub type APP_AUTH_NIDEN_R = crate :: BitReader < APP_AUTH_NIDEN_A > ; # [doc = "Controls non-invasive debug enable.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum APP_AUTH_NIDEN_A { # [doc = "0: DISABLE"] APP_AUTH_NIDEN_DISABLE = 0 , # [doc = "1: ENABLE"] APP_AUTH_NIDEN_ENABLE = 1 , } impl From < APP_AUTH_NIDEN_A > for bool { # [inline (always)] fn from (variant : APP_AUTH_NIDEN_A) -> Self { variant as u8 != 0 } } impl APP_AUTH_NIDEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> APP_AUTH_NIDEN_A { match self . bits { false => APP_AUTH_NIDEN_A :: APP_AUTH_NIDEN_DISABLE , true => APP_AUTH_NIDEN_A :: APP_AUTH_NIDEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_app_auth_niden_disable (& self) -> bool { * self == APP_AUTH_NIDEN_A :: APP_AUTH_NIDEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_app_auth_niden_enable (& self) -> bool { * self == APP_AUTH_NIDEN_A :: APP_AUTH_NIDEN_ENABLE } } # [doc = "Field `APP_AUTH_SPIDEN` reader - Secure invasive debug enable."] pub type APP_AUTH_SPIDEN_R = crate :: BitReader < APP_AUTH_SPIDEN_A > ; # [doc = "Secure invasive debug enable.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum APP_AUTH_SPIDEN_A { # [doc = "0: DISABLE"] APP_AUTH_SPIDEN_DISABLE = 0 , # [doc = "1: ENABLE"] APP_AUTH_SPIDEN_ENABLE = 1 , } impl From < APP_AUTH_SPIDEN_A > for bool { # [inline (always)] fn from (variant : APP_AUTH_SPIDEN_A) -> Self { variant as u8 != 0 } } impl APP_AUTH_SPIDEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> APP_AUTH_SPIDEN_A { match self . bits { false => APP_AUTH_SPIDEN_A :: APP_AUTH_SPIDEN_DISABLE , true => APP_AUTH_SPIDEN_A :: APP_AUTH_SPIDEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_app_auth_spiden_disable (& self) -> bool { * self == APP_AUTH_SPIDEN_A :: APP_AUTH_SPIDEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_app_auth_spiden_enable (& self) -> bool { * self == APP_AUTH_SPIDEN_A :: APP_AUTH_SPIDEN_ENABLE } } # [doc = "Field `APP_AUTH_SPNIDEN` reader - Secure non-invasive debug enable."] pub type APP_AUTH_SPNIDEN_R = crate :: BitReader < APP_AUTH_SPNIDEN_A > ; # [doc = "Secure non-invasive debug enable.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum APP_AUTH_SPNIDEN_A { # [doc = "0: DISABLE"] APP_AUTH_SPNIDEN_DISABLE = 0 , # [doc = "1: ENABLE"] APP_AUTH_SPNIDEN_ENABLE = 1 , } impl From < APP_AUTH_SPNIDEN_A > for bool { # [inline (always)] fn from (variant : APP_AUTH_SPNIDEN_A) -> Self { variant as u8 != 0 } } impl APP_AUTH_SPNIDEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> APP_AUTH_SPNIDEN_A { match self . bits { false => APP_AUTH_SPNIDEN_A :: APP_AUTH_SPNIDEN_DISABLE , true => APP_AUTH_SPNIDEN_A :: APP_AUTH_SPNIDEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_app_auth_spniden_disable (& self) -> bool { * self == APP_AUTH_SPNIDEN_A :: APP_AUTH_SPNIDEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_app_auth_spniden_enable (& self) -> bool { * self == APP_AUTH_SPNIDEN_A :: APP_AUTH_SPNIDEN_ENABLE } } impl R { # [doc = "Bit 0 - Controls invasive debug enable."] # [inline (always)] pub fn app_auth_dbgen (& self) -> APP_AUTH_DBGEN_R { APP_AUTH_DBGEN_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Controls non-invasive debug enable."] # [inline (always)] pub fn app_auth_niden (& self) -> APP_AUTH_NIDEN_R { APP_AUTH_NIDEN_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Secure invasive debug enable."] # [inline (always)] pub fn app_auth_spiden (& self) -> APP_AUTH_SPIDEN_R { APP_AUTH_SPIDEN_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Secure non-invasive debug enable."] # [inline (always)] pub fn app_auth_spniden (& self) -> APP_AUTH_SPNIDEN_R { APP_AUTH_SPNIDEN_R :: new (((self . bits >> 3) & 1) != 0) } } # [doc = "Application CPU0 authorization register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`app_auth::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct APP_AUTH_SPEC ; impl crate :: RegisterSpec for APP_AUTH_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`app_auth::R`](R) reader structure"] impl crate :: Readable for APP_AUTH_SPEC { } # [doc = "`reset()` method sets APP_AUTH to value 0"] impl crate :: Resettable for APP_AUTH_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }