# [doc = "Register `MIS` reader"] pub type R = crate :: R < MIS_SPEC > ; # [doc = "Field `MIS_TXIFG` reader - Masked interrupt status for TXIFG"] pub type MIS_TXIFG_R = crate :: BitReader < MIS_TXIFG_A > ; # [doc = "Masked interrupt status for TXIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_TXIFG_A { # [doc = "0: CLR"] MIS_TXIFG_CLR = 0 , # [doc = "1: SET"] MIS_TXIFG_SET = 1 , } impl From < MIS_TXIFG_A > for bool { # [inline (always)] fn from (variant : MIS_TXIFG_A) -> Self { variant as u8 != 0 } } impl MIS_TXIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_TXIFG_A { match self . bits { false => MIS_TXIFG_A :: MIS_TXIFG_CLR , true => MIS_TXIFG_A :: MIS_TXIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_mis_txifg_clr (& self) -> bool { * self == MIS_TXIFG_A :: MIS_TXIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_mis_txifg_set (& self) -> bool { * self == MIS_TXIFG_A :: MIS_TXIFG_SET } } # [doc = "Field `MIS_RXIFG` reader - Masked interrupt status for RXIFG"] pub type MIS_RXIFG_R = crate :: BitReader < MIS_RXIFG_A > ; # [doc = "Masked interrupt status for RXIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_RXIFG_A { # [doc = "0: CLR"] MIS_RXIFG_CLR = 0 , # [doc = "1: SET"] MIS_RXIFG_SET = 1 , } impl From < MIS_RXIFG_A > for bool { # [inline (always)] fn from (variant : MIS_RXIFG_A) -> Self { variant as u8 != 0 } } impl MIS_RXIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_RXIFG_A { match self . bits { false => MIS_RXIFG_A :: MIS_RXIFG_CLR , true => MIS_RXIFG_A :: MIS_RXIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_mis_rxifg_clr (& self) -> bool { * self == MIS_RXIFG_A :: MIS_RXIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_mis_rxifg_set (& self) -> bool { * self == MIS_RXIFG_A :: MIS_RXIFG_SET } } # [doc = "Field `MIS_PWRUPIFG` reader - Masked interrupt status for PWRUPIFG"] pub type MIS_PWRUPIFG_R = crate :: BitReader < MIS_PWRUPIFG_A > ; # [doc = "Masked interrupt status for PWRUPIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_PWRUPIFG_A { # [doc = "0: CLR"] MIS_PWRUPIFG_CLR = 0 , # [doc = "1: SET"] MIS_PWRUPIFG_SET = 1 , } impl From < MIS_PWRUPIFG_A > for bool { # [inline (always)] fn from (variant : MIS_PWRUPIFG_A) -> Self { variant as u8 != 0 } } impl MIS_PWRUPIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_PWRUPIFG_A { match self . bits { false => MIS_PWRUPIFG_A :: MIS_PWRUPIFG_CLR , true => MIS_PWRUPIFG_A :: MIS_PWRUPIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_mis_pwrupifg_clr (& self) -> bool { * self == MIS_PWRUPIFG_A :: MIS_PWRUPIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_mis_pwrupifg_set (& self) -> bool { * self == MIS_PWRUPIFG_A :: MIS_PWRUPIFG_SET } } # [doc = "Field `MIS_PWRDWNIFG` reader - Masked interrupt status for PWRDWNIFG"] pub type MIS_PWRDWNIFG_R = crate :: BitReader < MIS_PWRDWNIFG_A > ; # [doc = "Masked interrupt status for PWRDWNIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MIS_PWRDWNIFG_A { # [doc = "0: CLR"] MIS_PWRDWNIFG_CLR = 0 , # [doc = "1: SET"] MIS_PWRDWNIFG_SET = 1 , } impl From < MIS_PWRDWNIFG_A > for bool { # [inline (always)] fn from (variant : MIS_PWRDWNIFG_A) -> Self { variant as u8 != 0 } } impl MIS_PWRDWNIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MIS_PWRDWNIFG_A { match self . bits { false => MIS_PWRDWNIFG_A :: MIS_PWRDWNIFG_CLR , true => MIS_PWRDWNIFG_A :: MIS_PWRDWNIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_mis_pwrdwnifg_clr (& self) -> bool { * self == MIS_PWRDWNIFG_A :: MIS_PWRDWNIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_mis_pwrdwnifg_set (& self) -> bool { * self == MIS_PWRDWNIFG_A :: MIS_PWRDWNIFG_SET } } impl R { # [doc = "Bit 0 - Masked interrupt status for TXIFG"] # [inline (always)] pub fn mis_txifg (& self) -> MIS_TXIFG_R { MIS_TXIFG_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Masked interrupt status for RXIFG"] # [inline (always)] pub fn mis_rxifg (& self) -> MIS_RXIFG_R { MIS_RXIFG_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Masked interrupt status for PWRUPIFG"] # [inline (always)] pub fn mis_pwrupifg (& self) -> MIS_PWRUPIFG_R { MIS_PWRUPIFG_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Masked interrupt status for PWRDWNIFG"] # [inline (always)] pub fn mis_pwrdwnifg (& self) -> MIS_PWRDWNIFG_R { MIS_PWRDWNIFG_R :: new (((self . bits >> 3) & 1) != 0) } } # [doc = "Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mis::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MIS_SPEC ; impl crate :: RegisterSpec for MIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`mis::R`](R) reader structure"] impl crate :: Readable for MIS_SPEC { } # [doc = "`reset()` method sets MIS to value 0"] impl crate :: Resettable for MIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }