# [doc = "Register `IMASK` reader"] pub type R = crate :: R < IMASK_SPEC > ; # [doc = "Register `IMASK` writer"] pub type W = crate :: W < IMASK_SPEC > ; # [doc = "Field `IMASK_TXIFG` reader - Masks TXIFG in MIS register"] pub type IMASK_TXIFG_R = crate :: BitReader < IMASK_TXIFG_A > ; # [doc = "Masks TXIFG in MIS register\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_TXIFG_A { # [doc = "0: CLR"] IMASK_TXIFG_CLR = 0 , # [doc = "1: SET"] IMASK_TXIFG_SET = 1 , } impl From < IMASK_TXIFG_A > for bool { # [inline (always)] fn from (variant : IMASK_TXIFG_A) -> Self { variant as u8 != 0 } } impl IMASK_TXIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_TXIFG_A { match self . bits { false => IMASK_TXIFG_A :: IMASK_TXIFG_CLR , true => IMASK_TXIFG_A :: IMASK_TXIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_txifg_clr (& self) -> bool { * self == IMASK_TXIFG_A :: IMASK_TXIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_txifg_set (& self) -> bool { * self == IMASK_TXIFG_A :: IMASK_TXIFG_SET } } # [doc = "Field `IMASK_TXIFG` writer - Masks TXIFG in MIS register"] pub type IMASK_TXIFG_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_TXIFG_A > ; impl < 'a , REG , const O : u8 > IMASK_TXIFG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_txifg_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_TXIFG_A :: IMASK_TXIFG_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_txifg_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_TXIFG_A :: IMASK_TXIFG_SET) } } # [doc = "Field `IMASK_RXIFG` reader - Masks RXIFG in MIS register"] pub type IMASK_RXIFG_R = crate :: BitReader < IMASK_RXIFG_A > ; # [doc = "Masks RXIFG in MIS register\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_RXIFG_A { # [doc = "0: CLR"] IMASK_RXIFG_CLR = 0 , # [doc = "1: SET"] IMASK_RXIFG_SET = 1 , } impl From < IMASK_RXIFG_A > for bool { # [inline (always)] fn from (variant : IMASK_RXIFG_A) -> Self { variant as u8 != 0 } } impl IMASK_RXIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_RXIFG_A { match self . bits { false => IMASK_RXIFG_A :: IMASK_RXIFG_CLR , true => IMASK_RXIFG_A :: IMASK_RXIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_rxifg_clr (& self) -> bool { * self == IMASK_RXIFG_A :: IMASK_RXIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_rxifg_set (& self) -> bool { * self == IMASK_RXIFG_A :: IMASK_RXIFG_SET } } # [doc = "Field `IMASK_RXIFG` writer - Masks RXIFG in MIS register"] pub type IMASK_RXIFG_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_RXIFG_A > ; impl < 'a , REG , const O : u8 > IMASK_RXIFG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_rxifg_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_RXIFG_A :: IMASK_RXIFG_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_rxifg_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_RXIFG_A :: IMASK_RXIFG_SET) } } # [doc = "Field `IMASK_PWRUPIFG` reader - Masks PWRUPIFG in MIS register"] pub type IMASK_PWRUPIFG_R = crate :: BitReader < IMASK_PWRUPIFG_A > ; # [doc = "Masks PWRUPIFG in MIS register\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_PWRUPIFG_A { # [doc = "0: CLR"] IMASK_PWRUPIFG_CLR = 0 , # [doc = "1: SET"] IMASK_PWRUPIFG_SET = 1 , } impl From < IMASK_PWRUPIFG_A > for bool { # [inline (always)] fn from (variant : IMASK_PWRUPIFG_A) -> Self { variant as u8 != 0 } } impl IMASK_PWRUPIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_PWRUPIFG_A { match self . bits { false => IMASK_PWRUPIFG_A :: IMASK_PWRUPIFG_CLR , true => IMASK_PWRUPIFG_A :: IMASK_PWRUPIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_pwrupifg_clr (& self) -> bool { * self == IMASK_PWRUPIFG_A :: IMASK_PWRUPIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_pwrupifg_set (& self) -> bool { * self == IMASK_PWRUPIFG_A :: IMASK_PWRUPIFG_SET } } # [doc = "Field `IMASK_PWRUPIFG` writer - Masks PWRUPIFG in MIS register"] pub type IMASK_PWRUPIFG_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_PWRUPIFG_A > ; impl < 'a , REG , const O : u8 > IMASK_PWRUPIFG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_pwrupifg_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_PWRUPIFG_A :: IMASK_PWRUPIFG_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_pwrupifg_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_PWRUPIFG_A :: IMASK_PWRUPIFG_SET) } } # [doc = "Field `IMASK_PWRDWNIFG` reader - Masks PWRDWNIFG in MIS register"] pub type IMASK_PWRDWNIFG_R = crate :: BitReader < IMASK_PWRDWNIFG_A > ; # [doc = "Masks PWRDWNIFG in MIS register\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum IMASK_PWRDWNIFG_A { # [doc = "0: CLR"] IMASK_PWRDWNIFG_CLR = 0 , # [doc = "1: SET"] IMASK_PWRDWNIFG_SET = 1 , } impl From < IMASK_PWRDWNIFG_A > for bool { # [inline (always)] fn from (variant : IMASK_PWRDWNIFG_A) -> Self { variant as u8 != 0 } } impl IMASK_PWRDWNIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IMASK_PWRDWNIFG_A { match self . bits { false => IMASK_PWRDWNIFG_A :: IMASK_PWRDWNIFG_CLR , true => IMASK_PWRDWNIFG_A :: IMASK_PWRDWNIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_imask_pwrdwnifg_clr (& self) -> bool { * self == IMASK_PWRDWNIFG_A :: IMASK_PWRDWNIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_imask_pwrdwnifg_set (& self) -> bool { * self == IMASK_PWRDWNIFG_A :: IMASK_PWRDWNIFG_SET } } # [doc = "Field `IMASK_PWRDWNIFG` writer - Masks PWRDWNIFG in MIS register"] pub type IMASK_PWRDWNIFG_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , IMASK_PWRDWNIFG_A > ; impl < 'a , REG , const O : u8 > IMASK_PWRDWNIFG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn imask_pwrdwnifg_clr (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_PWRDWNIFG_A :: IMASK_PWRDWNIFG_CLR) } # [doc = "SET"] # [inline (always)] pub fn imask_pwrdwnifg_set (self) -> & 'a mut crate :: W < REG > { self . variant (IMASK_PWRDWNIFG_A :: IMASK_PWRDWNIFG_SET) } } impl R { # [doc = "Bit 0 - Masks TXIFG in MIS register"] # [inline (always)] pub fn imask_txifg (& self) -> IMASK_TXIFG_R { IMASK_TXIFG_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Masks RXIFG in MIS register"] # [inline (always)] pub fn imask_rxifg (& self) -> IMASK_RXIFG_R { IMASK_RXIFG_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Masks PWRUPIFG in MIS register"] # [inline (always)] pub fn imask_pwrupifg (& self) -> IMASK_PWRUPIFG_R { IMASK_PWRUPIFG_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Masks PWRDWNIFG in MIS register"] # [inline (always)] pub fn imask_pwrdwnifg (& self) -> IMASK_PWRDWNIFG_R { IMASK_PWRDWNIFG_R :: new (((self . bits >> 3) & 1) != 0) } } impl W { # [doc = "Bit 0 - Masks TXIFG in MIS register"] # [inline (always)] # [must_use] pub fn imask_txifg (& mut self) -> IMASK_TXIFG_W < IMASK_SPEC , 0 > { IMASK_TXIFG_W :: new (self) } # [doc = "Bit 1 - Masks RXIFG in MIS register"] # [inline (always)] # [must_use] pub fn imask_rxifg (& mut self) -> IMASK_RXIFG_W < IMASK_SPEC , 1 > { IMASK_RXIFG_W :: new (self) } # [doc = "Bit 2 - Masks PWRUPIFG in MIS register"] # [inline (always)] # [must_use] pub fn imask_pwrupifg (& mut self) -> IMASK_PWRUPIFG_W < IMASK_SPEC , 2 > { IMASK_PWRUPIFG_W :: new (self) } # [doc = "Bit 3 - Masks PWRDWNIFG in MIS register"] # [inline (always)] # [must_use] pub fn imask_pwrdwnifg (& mut self) -> IMASK_PWRDWNIFG_W < IMASK_SPEC , 3 > { IMASK_PWRDWNIFG_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`imask::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`imask::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IMASK_SPEC ; impl crate :: RegisterSpec for IMASK_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`imask::R`](R) reader structure"] impl crate :: Readable for IMASK_SPEC { } # [doc = "`write(|w| ..)` method takes [`imask::W`](W) writer structure"] impl crate :: Writable for IMASK_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets IMASK to value 0"] impl crate :: Resettable for IMASK_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }