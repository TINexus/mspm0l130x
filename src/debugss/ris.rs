# [doc = "Register `RIS` reader"] pub type R = crate :: R < RIS_SPEC > ; # [doc = "Field `RIS_TXIFG` reader - Raw interrupt status for TXIFG"] pub type RIS_TXIFG_R = crate :: BitReader < RIS_TXIFG_A > ; # [doc = "Raw interrupt status for TXIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_TXIFG_A { # [doc = "0: CLR"] RIS_TXIFG_CLR = 0 , # [doc = "1: SET"] RIS_TXIFG_SET = 1 , } impl From < RIS_TXIFG_A > for bool { # [inline (always)] fn from (variant : RIS_TXIFG_A) -> Self { variant as u8 != 0 } } impl RIS_TXIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_TXIFG_A { match self . bits { false => RIS_TXIFG_A :: RIS_TXIFG_CLR , true => RIS_TXIFG_A :: RIS_TXIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_ris_txifg_clr (& self) -> bool { * self == RIS_TXIFG_A :: RIS_TXIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_ris_txifg_set (& self) -> bool { * self == RIS_TXIFG_A :: RIS_TXIFG_SET } } # [doc = "Field `RIS_RXIFG` reader - Raw interrupt status for RXIFG"] pub type RIS_RXIFG_R = crate :: BitReader < RIS_RXIFG_A > ; # [doc = "Raw interrupt status for RXIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_RXIFG_A { # [doc = "0: CLR"] RIS_RXIFG_CLR = 0 , # [doc = "1: SET"] RIS_RXIFG_SET = 1 , } impl From < RIS_RXIFG_A > for bool { # [inline (always)] fn from (variant : RIS_RXIFG_A) -> Self { variant as u8 != 0 } } impl RIS_RXIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_RXIFG_A { match self . bits { false => RIS_RXIFG_A :: RIS_RXIFG_CLR , true => RIS_RXIFG_A :: RIS_RXIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_ris_rxifg_clr (& self) -> bool { * self == RIS_RXIFG_A :: RIS_RXIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_ris_rxifg_set (& self) -> bool { * self == RIS_RXIFG_A :: RIS_RXIFG_SET } } # [doc = "Field `RIS_PWRUPIFG` reader - Raw interrupt status for PWRUPIFG"] pub type RIS_PWRUPIFG_R = crate :: BitReader < RIS_PWRUPIFG_A > ; # [doc = "Raw interrupt status for PWRUPIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_PWRUPIFG_A { # [doc = "0: CLR"] RIS_PWRUPIFG_CLR = 0 , # [doc = "1: SET"] RIS_PWRUPIFG_SET = 1 , } impl From < RIS_PWRUPIFG_A > for bool { # [inline (always)] fn from (variant : RIS_PWRUPIFG_A) -> Self { variant as u8 != 0 } } impl RIS_PWRUPIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_PWRUPIFG_A { match self . bits { false => RIS_PWRUPIFG_A :: RIS_PWRUPIFG_CLR , true => RIS_PWRUPIFG_A :: RIS_PWRUPIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_ris_pwrupifg_clr (& self) -> bool { * self == RIS_PWRUPIFG_A :: RIS_PWRUPIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_ris_pwrupifg_set (& self) -> bool { * self == RIS_PWRUPIFG_A :: RIS_PWRUPIFG_SET } } # [doc = "Field `RIS_PWRDWNIFG` reader - Raw interrupt status for PWRDWNIFG"] pub type RIS_PWRDWNIFG_R = crate :: BitReader < RIS_PWRDWNIFG_A > ; # [doc = "Raw interrupt status for PWRDWNIFG\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RIS_PWRDWNIFG_A { # [doc = "0: CLR"] RIS_PWRDWNIFG_CLR = 0 , # [doc = "1: SET"] RIS_PWRDWNIFG_SET = 1 , } impl From < RIS_PWRDWNIFG_A > for bool { # [inline (always)] fn from (variant : RIS_PWRDWNIFG_A) -> Self { variant as u8 != 0 } } impl RIS_PWRDWNIFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RIS_PWRDWNIFG_A { match self . bits { false => RIS_PWRDWNIFG_A :: RIS_PWRDWNIFG_CLR , true => RIS_PWRDWNIFG_A :: RIS_PWRDWNIFG_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_ris_pwrdwnifg_clr (& self) -> bool { * self == RIS_PWRDWNIFG_A :: RIS_PWRDWNIFG_CLR } # [doc = "SET"] # [inline (always)] pub fn is_ris_pwrdwnifg_set (& self) -> bool { * self == RIS_PWRDWNIFG_A :: RIS_PWRDWNIFG_SET } } impl R { # [doc = "Bit 0 - Raw interrupt status for TXIFG"] # [inline (always)] pub fn ris_txifg (& self) -> RIS_TXIFG_R { RIS_TXIFG_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Raw interrupt status for RXIFG"] # [inline (always)] pub fn ris_rxifg (& self) -> RIS_RXIFG_R { RIS_RXIFG_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Raw interrupt status for PWRUPIFG"] # [inline (always)] pub fn ris_pwrupifg (& self) -> RIS_PWRUPIFG_R { RIS_PWRUPIFG_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Raw interrupt status for PWRDWNIFG"] # [inline (always)] pub fn ris_pwrdwnifg (& self) -> RIS_PWRDWNIFG_R { RIS_PWRDWNIFG_R :: new (((self . bits >> 3) & 1) != 0) } } # [doc = "Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RIS_SPEC ; impl crate :: RegisterSpec for RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ris::R`](R) reader structure"] impl crate :: Readable for RIS_SPEC { } # [doc = "`reset()` method sets RIS to value 0"] impl crate :: Resettable for RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }