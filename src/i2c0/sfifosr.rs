# [doc = "Register `SFIFOSR` reader"] pub type R = crate :: R < SFIFOSR_SPEC > ; # [doc = "Field `SFIFOSR_RXFIFOCNT` reader - Number of Bytes which could be read from the RX FIFO"] pub type SFIFOSR_RXFIFOCNT_R = crate :: FieldReader ; # [doc = "Field `SFIFOSR_RXFLUSH` reader - RX FIFO Flush When this bit is set a Flush operation for the RX FIFO is active. Clear the RXFLUSH bit in the control register to stop."] pub type SFIFOSR_RXFLUSH_R = crate :: BitReader < SFIFOSR_RXFLUSH_A > ; # [doc = "RX FIFO Flush When this bit is set a Flush operation for the RX FIFO is active. Clear the RXFLUSH bit in the control register to stop.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SFIFOSR_RXFLUSH_A { # [doc = "0: INACTIVE"] SFIFOSR_RXFLUSH_INACTIVE = 0 , # [doc = "1: ACTIVE"] SFIFOSR_RXFLUSH_ACTIVE = 1 , } impl From < SFIFOSR_RXFLUSH_A > for bool { # [inline (always)] fn from (variant : SFIFOSR_RXFLUSH_A) -> Self { variant as u8 != 0 } } impl SFIFOSR_RXFLUSH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SFIFOSR_RXFLUSH_A { match self . bits { false => SFIFOSR_RXFLUSH_A :: SFIFOSR_RXFLUSH_INACTIVE , true => SFIFOSR_RXFLUSH_A :: SFIFOSR_RXFLUSH_ACTIVE , } } # [doc = "INACTIVE"] # [inline (always)] pub fn is_sfifosr_rxflush_inactive (& self) -> bool { * self == SFIFOSR_RXFLUSH_A :: SFIFOSR_RXFLUSH_INACTIVE } # [doc = "ACTIVE"] # [inline (always)] pub fn is_sfifosr_rxflush_active (& self) -> bool { * self == SFIFOSR_RXFLUSH_A :: SFIFOSR_RXFLUSH_ACTIVE } } # [doc = "Field `SFIFOSR_TXFIFOCNT` reader - Number of Bytes which could be put into the TX FIFO"] pub type SFIFOSR_TXFIFOCNT_R = crate :: FieldReader ; # [doc = "Field `SFIFOSR_TXFLUSH` reader - TX FIFO Flush When this bit is set a Flush operation for the TX FIFO is active. Clear the TXFLUSH bit in the control register to stop."] pub type SFIFOSR_TXFLUSH_R = crate :: BitReader < SFIFOSR_TXFLUSH_A > ; # [doc = "TX FIFO Flush When this bit is set a Flush operation for the TX FIFO is active. Clear the TXFLUSH bit in the control register to stop.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SFIFOSR_TXFLUSH_A { # [doc = "0: INACTIVE"] SFIFOSR_TXFLUSH_INACTIVE = 0 , # [doc = "1: ACTIVE"] SFIFOSR_TXFLUSH_ACTIVE = 1 , } impl From < SFIFOSR_TXFLUSH_A > for bool { # [inline (always)] fn from (variant : SFIFOSR_TXFLUSH_A) -> Self { variant as u8 != 0 } } impl SFIFOSR_TXFLUSH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SFIFOSR_TXFLUSH_A { match self . bits { false => SFIFOSR_TXFLUSH_A :: SFIFOSR_TXFLUSH_INACTIVE , true => SFIFOSR_TXFLUSH_A :: SFIFOSR_TXFLUSH_ACTIVE , } } # [doc = "INACTIVE"] # [inline (always)] pub fn is_sfifosr_txflush_inactive (& self) -> bool { * self == SFIFOSR_TXFLUSH_A :: SFIFOSR_TXFLUSH_INACTIVE } # [doc = "ACTIVE"] # [inline (always)] pub fn is_sfifosr_txflush_active (& self) -> bool { * self == SFIFOSR_TXFLUSH_A :: SFIFOSR_TXFLUSH_ACTIVE } } impl R { # [doc = "Bits 0:3 - Number of Bytes which could be read from the RX FIFO"] # [inline (always)] pub fn sfifosr_rxfifocnt (& self) -> SFIFOSR_RXFIFOCNT_R { SFIFOSR_RXFIFOCNT_R :: new ((self . bits & 0x0f) as u8) } # [doc = "Bit 7 - RX FIFO Flush When this bit is set a Flush operation for the RX FIFO is active. Clear the RXFLUSH bit in the control register to stop."] # [inline (always)] pub fn sfifosr_rxflush (& self) -> SFIFOSR_RXFLUSH_R { SFIFOSR_RXFLUSH_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bits 8:11 - Number of Bytes which could be put into the TX FIFO"] # [inline (always)] pub fn sfifosr_txfifocnt (& self) -> SFIFOSR_TXFIFOCNT_R { SFIFOSR_TXFIFOCNT_R :: new (((self . bits >> 8) & 0x0f) as u8) } # [doc = "Bit 15 - TX FIFO Flush When this bit is set a Flush operation for the TX FIFO is active. Clear the TXFLUSH bit in the control register to stop."] # [inline (always)] pub fn sfifosr_txflush (& self) -> SFIFOSR_TXFLUSH_R { SFIFOSR_TXFLUSH_R :: new (((self . bits >> 15) & 1) != 0) } } # [doc = "I2C Slave FIFO Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfifosr::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SFIFOSR_SPEC ; impl crate :: RegisterSpec for SFIFOSR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`sfifosr::R`](R) reader structure"] impl crate :: Readable for SFIFOSR_SPEC { } # [doc = "`reset()` method sets SFIFOSR to value 0x0800"] impl crate :: Resettable for SFIFOSR_SPEC { const RESET_VALUE : Self :: Ux = 0x0800 ; }