# [doc = "Register `SLAVE_PECSR` reader"] pub type R = crate :: R < SLAVE_PECSR_SPEC > ; # [doc = "Field `SLAVE_PECSR_PECBYTECNT` reader - This is the current PEC Byte Count of the Slave State Machine."] pub type SLAVE_PECSR_PECBYTECNT_R = crate :: FieldReader < u16 > ; # [doc = "Field `SLAVE_PECSR_PECSTS_CHECK` reader - This status bit indicates if the PEC was checked in the transaction that occurred before the last Stop. Latched on Stop."] pub type SLAVE_PECSR_PECSTS_CHECK_R = crate :: BitReader < SLAVE_PECSR_PECSTS_CHECK_A > ; # [doc = "This status bit indicates if the PEC was checked in the transaction that occurred before the last Stop. Latched on Stop.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SLAVE_PECSR_PECSTS_CHECK_A { # [doc = "0: CLEARED"] SLAVE_PECSR_PECSTS_CHECK_CLEARED = 0 , # [doc = "1: SET"] SLAVE_PECSR_PECSTS_CHECK_SET = 1 , } impl From < SLAVE_PECSR_PECSTS_CHECK_A > for bool { # [inline (always)] fn from (variant : SLAVE_PECSR_PECSTS_CHECK_A) -> Self { variant as u8 != 0 } } impl SLAVE_PECSR_PECSTS_CHECK_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SLAVE_PECSR_PECSTS_CHECK_A { match self . bits { false => SLAVE_PECSR_PECSTS_CHECK_A :: SLAVE_PECSR_PECSTS_CHECK_CLEARED , true => SLAVE_PECSR_PECSTS_CHECK_A :: SLAVE_PECSR_PECSTS_CHECK_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_slave_pecsr_pecsts_check_cleared (& self) -> bool { * self == SLAVE_PECSR_PECSTS_CHECK_A :: SLAVE_PECSR_PECSTS_CHECK_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_slave_pecsr_pecsts_check_set (& self) -> bool { * self == SLAVE_PECSR_PECSTS_CHECK_A :: SLAVE_PECSR_PECSTS_CHECK_SET } } # [doc = "Field `SLAVE_PECSR_PECSTS_ERROR` reader - This status bit indicates if a PEC check error occurred in the transaction that occurred before the last Stop. Latched on Stop."] pub type SLAVE_PECSR_PECSTS_ERROR_R = crate :: BitReader < SLAVE_PECSR_PECSTS_ERROR_A > ; # [doc = "This status bit indicates if a PEC check error occurred in the transaction that occurred before the last Stop. Latched on Stop.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SLAVE_PECSR_PECSTS_ERROR_A { # [doc = "0: CLEARED"] SLAVE_PECSR_PECSTS_ERROR_CLEARED = 0 , # [doc = "1: SET"] SLAVE_PECSR_PECSTS_ERROR_SET = 1 , } impl From < SLAVE_PECSR_PECSTS_ERROR_A > for bool { # [inline (always)] fn from (variant : SLAVE_PECSR_PECSTS_ERROR_A) -> Self { variant as u8 != 0 } } impl SLAVE_PECSR_PECSTS_ERROR_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SLAVE_PECSR_PECSTS_ERROR_A { match self . bits { false => SLAVE_PECSR_PECSTS_ERROR_A :: SLAVE_PECSR_PECSTS_ERROR_CLEARED , true => SLAVE_PECSR_PECSTS_ERROR_A :: SLAVE_PECSR_PECSTS_ERROR_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_slave_pecsr_pecsts_error_cleared (& self) -> bool { * self == SLAVE_PECSR_PECSTS_ERROR_A :: SLAVE_PECSR_PECSTS_ERROR_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_slave_pecsr_pecsts_error_set (& self) -> bool { * self == SLAVE_PECSR_PECSTS_ERROR_A :: SLAVE_PECSR_PECSTS_ERROR_SET } } impl R { # [doc = "Bits 0:8 - This is the current PEC Byte Count of the Slave State Machine."] # [inline (always)] pub fn slave_pecsr_pecbytecnt (& self) -> SLAVE_PECSR_PECBYTECNT_R { SLAVE_PECSR_PECBYTECNT_R :: new ((self . bits & 0x01ff) as u16) } # [doc = "Bit 16 - This status bit indicates if the PEC was checked in the transaction that occurred before the last Stop. Latched on Stop."] # [inline (always)] pub fn slave_pecsr_pecsts_check (& self) -> SLAVE_PECSR_PECSTS_CHECK_R { SLAVE_PECSR_PECSTS_CHECK_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - This status bit indicates if a PEC check error occurred in the transaction that occurred before the last Stop. Latched on Stop."] # [inline (always)] pub fn slave_pecsr_pecsts_error (& self) -> SLAVE_PECSR_PECSTS_ERROR_R { SLAVE_PECSR_PECSTS_ERROR_R :: new (((self . bits >> 17) & 1) != 0) } } # [doc = "I2C slave PEC status register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`slave_pecsr::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SLAVE_PECSR_SPEC ; impl crate :: RegisterSpec for SLAVE_PECSR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`slave_pecsr::R`](R) reader structure"] impl crate :: Readable for SLAVE_PECSR_SPEC { } # [doc = "`reset()` method sets SLAVE_PECSR to value 0"] impl crate :: Resettable for SLAVE_PECSR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }