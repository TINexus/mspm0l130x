# [doc = "Register `TIMEOUT_CTL` reader"] pub type R = crate :: R < TIMEOUT_CTL_SPEC > ; # [doc = "Register `TIMEOUT_CTL` writer"] pub type W = crate :: W < TIMEOUT_CTL_SPEC > ; # [doc = "Field `TIMEOUT_CTL_TCNTLA` reader - Timeout counter A load value Counter A is used for SCL low detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout A count. NOTE: The value of CNTLA must be greater than 1h. Each count is equal to 520 times the timeout period of functional clock. For example, with 8MHz functional clock and a 100KHz operating I2C clock, one timeout period will be equal to (1 / 8MHz) * 520 or 65 us."] pub type TIMEOUT_CTL_TCNTLA_R = crate :: FieldReader ; # [doc = "Field `TIMEOUT_CTL_TCNTLA` writer - Timeout counter A load value Counter A is used for SCL low detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout A count. NOTE: The value of CNTLA must be greater than 1h. Each count is equal to 520 times the timeout period of functional clock. For example, with 8MHz functional clock and a 100KHz operating I2C clock, one timeout period will be equal to (1 / 8MHz) * 520 or 65 us."] pub type TIMEOUT_CTL_TCNTLA_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O > ; # [doc = "Field `TIMEOUT_CTL_TCNTAEN` reader - Timeout Counter A Enable"] pub type TIMEOUT_CTL_TCNTAEN_R = crate :: BitReader < TIMEOUT_CTL_TCNTAEN_A > ; # [doc = "Timeout Counter A Enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum TIMEOUT_CTL_TCNTAEN_A { # [doc = "0: DISABLE"] TIMEOUT_CTL_TCNTAEN_DISABLE = 0 , # [doc = "1: ENABLE"] TIMEOUT_CTL_TCNTAEN_ENABLE = 1 , } impl From < TIMEOUT_CTL_TCNTAEN_A > for bool { # [inline (always)] fn from (variant : TIMEOUT_CTL_TCNTAEN_A) -> Self { variant as u8 != 0 } } impl TIMEOUT_CTL_TCNTAEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> TIMEOUT_CTL_TCNTAEN_A { match self . bits { false => TIMEOUT_CTL_TCNTAEN_A :: TIMEOUT_CTL_TCNTAEN_DISABLE , true => TIMEOUT_CTL_TCNTAEN_A :: TIMEOUT_CTL_TCNTAEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_timeout_ctl_tcntaen_disable (& self) -> bool { * self == TIMEOUT_CTL_TCNTAEN_A :: TIMEOUT_CTL_TCNTAEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_timeout_ctl_tcntaen_enable (& self) -> bool { * self == TIMEOUT_CTL_TCNTAEN_A :: TIMEOUT_CTL_TCNTAEN_ENABLE } } # [doc = "Field `TIMEOUT_CTL_TCNTAEN` writer - Timeout Counter A Enable"] pub type TIMEOUT_CTL_TCNTAEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , TIMEOUT_CTL_TCNTAEN_A > ; impl < 'a , REG , const O : u8 > TIMEOUT_CTL_TCNTAEN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn timeout_ctl_tcntaen_disable (self) -> & 'a mut crate :: W < REG > { self . variant (TIMEOUT_CTL_TCNTAEN_A :: TIMEOUT_CTL_TCNTAEN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn timeout_ctl_tcntaen_enable (self) -> & 'a mut crate :: W < REG > { self . variant (TIMEOUT_CTL_TCNTAEN_A :: TIMEOUT_CTL_TCNTAEN_ENABLE) } } # [doc = "Field `TIMEOUT_CTL_TCNTLB` reader - Timeout Count B Load: Counter B is used for SCL High Detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout B count. NOTE: The value of CNTLB must be greater than 1h. Each count is equal to 1* clock period. For example, with 10MHz functional clock one timeout period will be equal to1*100ns."] pub type TIMEOUT_CTL_TCNTLB_R = crate :: FieldReader ; # [doc = "Field `TIMEOUT_CTL_TCNTLB` writer - Timeout Count B Load: Counter B is used for SCL High Detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout B count. NOTE: The value of CNTLB must be greater than 1h. Each count is equal to 1* clock period. For example, with 10MHz functional clock one timeout period will be equal to1*100ns."] pub type TIMEOUT_CTL_TCNTLB_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 8 , O > ; # [doc = "Field `TIMEOUT_CTL_TCNTBEN` reader - Timeout Counter B Enable"] pub type TIMEOUT_CTL_TCNTBEN_R = crate :: BitReader < TIMEOUT_CTL_TCNTBEN_A > ; # [doc = "Timeout Counter B Enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum TIMEOUT_CTL_TCNTBEN_A { # [doc = "0: DISABLE"] TIMEOUT_CTL_TCNTBEN_DISABLE = 0 , # [doc = "1: ENABLE"] TIMEOUT_CTL_TCNTBEN_ENABLE = 1 , } impl From < TIMEOUT_CTL_TCNTBEN_A > for bool { # [inline (always)] fn from (variant : TIMEOUT_CTL_TCNTBEN_A) -> Self { variant as u8 != 0 } } impl TIMEOUT_CTL_TCNTBEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> TIMEOUT_CTL_TCNTBEN_A { match self . bits { false => TIMEOUT_CTL_TCNTBEN_A :: TIMEOUT_CTL_TCNTBEN_DISABLE , true => TIMEOUT_CTL_TCNTBEN_A :: TIMEOUT_CTL_TCNTBEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_timeout_ctl_tcntben_disable (& self) -> bool { * self == TIMEOUT_CTL_TCNTBEN_A :: TIMEOUT_CTL_TCNTBEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_timeout_ctl_tcntben_enable (& self) -> bool { * self == TIMEOUT_CTL_TCNTBEN_A :: TIMEOUT_CTL_TCNTBEN_ENABLE } } # [doc = "Field `TIMEOUT_CTL_TCNTBEN` writer - Timeout Counter B Enable"] pub type TIMEOUT_CTL_TCNTBEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , TIMEOUT_CTL_TCNTBEN_A > ; impl < 'a , REG , const O : u8 > TIMEOUT_CTL_TCNTBEN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn timeout_ctl_tcntben_disable (self) -> & 'a mut crate :: W < REG > { self . variant (TIMEOUT_CTL_TCNTBEN_A :: TIMEOUT_CTL_TCNTBEN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn timeout_ctl_tcntben_enable (self) -> & 'a mut crate :: W < REG > { self . variant (TIMEOUT_CTL_TCNTBEN_A :: TIMEOUT_CTL_TCNTBEN_ENABLE) } } impl R { # [doc = "Bits 0:7 - Timeout counter A load value Counter A is used for SCL low detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout A count. NOTE: The value of CNTLA must be greater than 1h. Each count is equal to 520 times the timeout period of functional clock. For example, with 8MHz functional clock and a 100KHz operating I2C clock, one timeout period will be equal to (1 / 8MHz) * 520 or 65 us."] # [inline (always)] pub fn timeout_ctl_tcntla (& self) -> TIMEOUT_CTL_TCNTLA_R { TIMEOUT_CTL_TCNTLA_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bit 15 - Timeout Counter A Enable"] # [inline (always)] pub fn timeout_ctl_tcntaen (& self) -> TIMEOUT_CTL_TCNTAEN_R { TIMEOUT_CTL_TCNTAEN_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bits 16:23 - Timeout Count B Load: Counter B is used for SCL High Detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout B count. NOTE: The value of CNTLB must be greater than 1h. Each count is equal to 1* clock period. For example, with 10MHz functional clock one timeout period will be equal to1*100ns."] # [inline (always)] pub fn timeout_ctl_tcntlb (& self) -> TIMEOUT_CTL_TCNTLB_R { TIMEOUT_CTL_TCNTLB_R :: new (((self . bits >> 16) & 0xff) as u8) } # [doc = "Bit 31 - Timeout Counter B Enable"] # [inline (always)] pub fn timeout_ctl_tcntben (& self) -> TIMEOUT_CTL_TCNTBEN_R { TIMEOUT_CTL_TCNTBEN_R :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bits 0:7 - Timeout counter A load value Counter A is used for SCL low detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout A count. NOTE: The value of CNTLA must be greater than 1h. Each count is equal to 520 times the timeout period of functional clock. For example, with 8MHz functional clock and a 100KHz operating I2C clock, one timeout period will be equal to (1 / 8MHz) * 520 or 65 us."] # [inline (always)] # [must_use] pub fn timeout_ctl_tcntla (& mut self) -> TIMEOUT_CTL_TCNTLA_W < TIMEOUT_CTL_SPEC , 0 > { TIMEOUT_CTL_TCNTLA_W :: new (self) } # [doc = "Bit 15 - Timeout Counter A Enable"] # [inline (always)] # [must_use] pub fn timeout_ctl_tcntaen (& mut self) -> TIMEOUT_CTL_TCNTAEN_W < TIMEOUT_CTL_SPEC , 15 > { TIMEOUT_CTL_TCNTAEN_W :: new (self) } # [doc = "Bits 16:23 - Timeout Count B Load: Counter B is used for SCL High Detection. This field contains the upper 8 bits of a 12-bit pre-load value for the Timeout B count. NOTE: The value of CNTLB must be greater than 1h. Each count is equal to 1* clock period. For example, with 10MHz functional clock one timeout period will be equal to1*100ns."] # [inline (always)] # [must_use] pub fn timeout_ctl_tcntlb (& mut self) -> TIMEOUT_CTL_TCNTLB_W < TIMEOUT_CTL_SPEC , 16 > { TIMEOUT_CTL_TCNTLB_W :: new (self) } # [doc = "Bit 31 - Timeout Counter B Enable"] # [inline (always)] # [must_use] pub fn timeout_ctl_tcntben (& mut self) -> TIMEOUT_CTL_TCNTBEN_W < TIMEOUT_CTL_SPEC , 31 > { TIMEOUT_CTL_TCNTBEN_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "I2C Timeout Count Control Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`timeout_ctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`timeout_ctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TIMEOUT_CTL_SPEC ; impl crate :: RegisterSpec for TIMEOUT_CTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`timeout_ctl::R`](R) reader structure"] impl crate :: Readable for TIMEOUT_CTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`timeout_ctl::W`](W) writer structure"] impl crate :: Writable for TIMEOUT_CTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets TIMEOUT_CTL to value 0x0002_0002"] impl crate :: Resettable for TIMEOUT_CTL_SPEC { const RESET_VALUE : Self :: Ux = 0x0002_0002 ; }