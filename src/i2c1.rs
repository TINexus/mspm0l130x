# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { _reserved0 : [u8 ; 0x0800] , # [doc = "0x800 - Power enable"] pub pwren : PWREN , # [doc = "0x804 - Reset Control"] pub rstctl : RSTCTL , # [doc = "0x808 - Peripheral Clock Configuration Register"] pub clkcfg : CLKCFG , _reserved3 : [u8 ; 0x08] , # [doc = "0x814 - Status Register"] pub stat : STAT , _reserved4 : [u8 ; 0x07e8] , # [doc = "0x1000 - Clock Divider"] pub clkdiv : CLKDIV , # [doc = "0x1004 - Clock Select for Ultra Low Power peripherals"] pub clksel : CLKSEL , _reserved6 : [u8 ; 0x10] , # [doc = "0x1018 - Peripheral Debug Control"] pub pdbgctl : PDBGCTL , _reserved7 : [u8 ; 0x04] , # [doc = "0x1020 - Interrupt index"] pub int_event0_iidx : INT_EVENT0_IIDX , _reserved8 : [u8 ; 0x04] , # [doc = "0x1028 - Interrupt mask"] pub int_event0_imask : INT_EVENT0_IMASK , _reserved9 : [u8 ; 0x04] , # [doc = "0x1030 - Raw interrupt status"] pub int_event0_ris : INT_EVENT0_RIS , _reserved10 : [u8 ; 0x04] , # [doc = "0x1038 - Masked interrupt status"] pub int_event0_mis : INT_EVENT0_MIS , _reserved11 : [u8 ; 0x04] , # [doc = "0x1040 - Interrupt set"] pub int_event0_iset : INT_EVENT0_ISET , _reserved12 : [u8 ; 0x04] , # [doc = "0x1048 - Interrupt clear"] pub int_event0_iclr : INT_EVENT0_ICLR , _reserved13 : [u8 ; 0x04] , # [doc = "0x1050 - Interrupt index"] pub int_event1_iidx : INT_EVENT1_IIDX , _reserved14 : [u8 ; 0x04] , # [doc = "0x1058 - Interrupt mask"] pub int_event1_imask : INT_EVENT1_IMASK , _reserved15 : [u8 ; 0x04] , # [doc = "0x1060 - Raw interrupt status"] pub int_event1_ris : INT_EVENT1_RIS , _reserved16 : [u8 ; 0x04] , # [doc = "0x1068 - Masked interrupt status"] pub int_event1_mis : INT_EVENT1_MIS , _reserved17 : [u8 ; 0x04] , # [doc = "0x1070 - Interrupt set"] pub int_event1_iset : INT_EVENT1_ISET , _reserved18 : [u8 ; 0x04] , # [doc = "0x1078 - Interrupt clear"] pub int_event1_iclr : INT_EVENT1_ICLR , _reserved19 : [u8 ; 0x04] , # [doc = "0x1080 - Interrupt index"] pub int_event2_iidx : INT_EVENT2_IIDX , _reserved20 : [u8 ; 0x04] , # [doc = "0x1088 - Interrupt mask"] pub int_event2_imask : INT_EVENT2_IMASK , _reserved21 : [u8 ; 0x04] , # [doc = "0x1090 - Raw interrupt status"] pub int_event2_ris : INT_EVENT2_RIS , _reserved22 : [u8 ; 0x04] , # [doc = "0x1098 - Masked interrupt status"] pub int_event2_mis : INT_EVENT2_MIS , _reserved23 : [u8 ; 0x04] , # [doc = "0x10a0 - Interrupt set"] pub int_event2_iset : INT_EVENT2_ISET , _reserved24 : [u8 ; 0x04] , # [doc = "0x10a8 - Interrupt clear"] pub int_event2_iclr : INT_EVENT2_ICLR , _reserved25 : [u8 ; 0x34] , # [doc = "0x10e0 - Event Mode"] pub evt_mode : EVT_MODE , _reserved26 : [u8 ; 0x18] , # [doc = "0x10fc - Module Description"] pub desc : DESC , _reserved27 : [u8 ; 0x0100] , # [doc = "0x1200 - I2C Glitch Filter Control"] pub gfctl : GFCTL , # [doc = "0x1204 - I2C Timeout Count Control Register"] pub timeout_ctl : TIMEOUT_CTL , # [doc = "0x1208 - I2C Timeout Count Register"] pub timeout_cnt : TIMEOUT_CNT , _reserved30 : [u8 ; 0x04] , # [doc = "0x1210 - I2C Master Slave Address Register"] pub msa : MSA , # [doc = "0x1214 - I2C Master Control Register"] pub mctr : MCTR , # [doc = "0x1218 - I2C Master Status Register"] pub msr : MSR , # [doc = "0x121c - I2C Master RXData"] pub mrxdata : MRXDATA , # [doc = "0x1220 - I2C Master TXData"] pub mtxdata : MTXDATA , # [doc = "0x1224 - I2C Master Timer Period"] pub mtpr : MTPR , # [doc = "0x1228 - I2C Master Configuration"] pub mcr : MCR , _reserved37 : [u8 ; 0x08] , # [doc = "0x1234 - I2C Master Bus Monitor"] pub mbmon : MBMON , # [doc = "0x1238 - I2C Master FIFO Control"] pub mfifoctl : MFIFOCTL , # [doc = "0x123c - I2C Master FIFO Status Register"] pub mfifosr : MFIFOSR , # [doc = "0x1240 - I2C master PEC control register"] pub master_i2cpecctl : MASTER_I2CPECCTL , # [doc = "0x1244 - I2C master PEC status register"] pub master_pecsr : MASTER_PECSR , _reserved42 : [u8 ; 0x08] , # [doc = "0x1250 - I2C Slave Own Address"] pub soar : SOAR , # [doc = "0x1254 - I2C Slave Own Address 2"] pub soar2 : SOAR2 , # [doc = "0x1258 - I2C Slave Control Register"] pub sctr : SCTR , # [doc = "0x125c - I2C Slave Status Register"] pub ssr : SSR , # [doc = "0x1260 - I2C Slave RXData"] pub srxdata : SRXDATA , # [doc = "0x1264 - I2C Slave TXData"] pub stxdata : STXDATA , # [doc = "0x1268 - I2C Slave ACK Control"] pub sackctl : SACKCTL , # [doc = "0x126c - I2C Slave FIFO Control"] pub sfifoctl : SFIFOCTL , # [doc = "0x1270 - I2C Slave FIFO Status Register"] pub sfifosr : SFIFOSR , # [doc = "0x1274 - I2C Slave PEC control register"] pub slave_pecctl : SLAVE_PECCTL , # [doc = "0x1278 - I2C slave PEC status register"] pub slave_pecsr : SLAVE_PECSR , } # [doc = "PWREN (rw) register accessor: Power enable\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pwren::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pwren::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pwren`]
module"] pub type PWREN = crate :: Reg < pwren :: PWREN_SPEC > ; # [doc = "Power enable"] pub mod pwren ; # [doc = "RSTCTL (w) register accessor: Reset Control\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rstctl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rstctl`]
module"] pub type RSTCTL = crate :: Reg < rstctl :: RSTCTL_SPEC > ; # [doc = "Reset Control"] pub mod rstctl ; # [doc = "CLKCFG (rw) register accessor: Peripheral Clock Configuration Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkcfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkcfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkcfg`]
module"] pub type CLKCFG = crate :: Reg < clkcfg :: CLKCFG_SPEC > ; # [doc = "Peripheral Clock Configuration Register"] pub mod clkcfg ; # [doc = "STAT (r) register accessor: Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stat::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"] pub type STAT = crate :: Reg < stat :: STAT_SPEC > ; # [doc = "Status Register"] pub mod stat ; # [doc = "CLKDIV (rw) register accessor: Clock Divider\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkdiv::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkdiv::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkdiv`]
module"] pub type CLKDIV = crate :: Reg < clkdiv :: CLKDIV_SPEC > ; # [doc = "Clock Divider"] pub mod clkdiv ; # [doc = "CLKSEL (rw) register accessor: Clock Select for Ultra Low Power peripherals\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clksel::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clksel::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clksel`]
module"] pub type CLKSEL = crate :: Reg < clksel :: CLKSEL_SPEC > ; # [doc = "Clock Select for Ultra Low Power peripherals"] pub mod clksel ; # [doc = "PDBGCTL (rw) register accessor: Peripheral Debug Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pdbgctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pdbgctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pdbgctl`]
module"] pub type PDBGCTL = crate :: Reg < pdbgctl :: PDBGCTL_SPEC > ; # [doc = "Peripheral Debug Control"] pub mod pdbgctl ; # [doc = "INT_EVENT0_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iidx`]
module"] pub type INT_EVENT0_IIDX = crate :: Reg < int_event0_iidx :: INT_EVENT0_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event0_iidx ; # [doc = "INT_EVENT0_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_imask`]
module"] pub type INT_EVENT0_IMASK = crate :: Reg < int_event0_imask :: INT_EVENT0_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event0_imask ; # [doc = "INT_EVENT0_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_ris`]
module"] pub type INT_EVENT0_RIS = crate :: Reg < int_event0_ris :: INT_EVENT0_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event0_ris ; # [doc = "INT_EVENT0_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_mis`]
module"] pub type INT_EVENT0_MIS = crate :: Reg < int_event0_mis :: INT_EVENT0_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event0_mis ; # [doc = "INT_EVENT0_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iset`]
module"] pub type INT_EVENT0_ISET = crate :: Reg < int_event0_iset :: INT_EVENT0_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event0_iset ; # [doc = "INT_EVENT0_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event0_iclr`]
module"] pub type INT_EVENT0_ICLR = crate :: Reg < int_event0_iclr :: INT_EVENT0_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event0_iclr ; # [doc = "INT_EVENT1_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iidx`]
module"] pub type INT_EVENT1_IIDX = crate :: Reg < int_event1_iidx :: INT_EVENT1_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event1_iidx ; # [doc = "INT_EVENT1_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_imask`]
module"] pub type INT_EVENT1_IMASK = crate :: Reg < int_event1_imask :: INT_EVENT1_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event1_imask ; # [doc = "INT_EVENT1_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_ris`]
module"] pub type INT_EVENT1_RIS = crate :: Reg < int_event1_ris :: INT_EVENT1_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event1_ris ; # [doc = "INT_EVENT1_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event1_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_mis`]
module"] pub type INT_EVENT1_MIS = crate :: Reg < int_event1_mis :: INT_EVENT1_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event1_mis ; # [doc = "INT_EVENT1_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iset`]
module"] pub type INT_EVENT1_ISET = crate :: Reg < int_event1_iset :: INT_EVENT1_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event1_iset ; # [doc = "INT_EVENT1_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event1_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event1_iclr`]
module"] pub type INT_EVENT1_ICLR = crate :: Reg < int_event1_iclr :: INT_EVENT1_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event1_iclr ; # [doc = "INT_EVENT2_IIDX (r) register accessor: Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iidx`]
module"] pub type INT_EVENT2_IIDX = crate :: Reg < int_event2_iidx :: INT_EVENT2_IIDX_SPEC > ; # [doc = "Interrupt index"] pub mod int_event2_iidx ; # [doc = "INT_EVENT2_IMASK (rw) register accessor: Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_imask`]
module"] pub type INT_EVENT2_IMASK = crate :: Reg < int_event2_imask :: INT_EVENT2_IMASK_SPEC > ; # [doc = "Interrupt mask"] pub mod int_event2_imask ; # [doc = "INT_EVENT2_RIS (r) register accessor: Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_ris`]
module"] pub type INT_EVENT2_RIS = crate :: Reg < int_event2_ris :: INT_EVENT2_RIS_SPEC > ; # [doc = "Raw interrupt status"] pub mod int_event2_ris ; # [doc = "INT_EVENT2_MIS (r) register accessor: Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_mis`]
module"] pub type INT_EVENT2_MIS = crate :: Reg < int_event2_mis :: INT_EVENT2_MIS_SPEC > ; # [doc = "Masked interrupt status"] pub mod int_event2_mis ; # [doc = "INT_EVENT2_ISET (w) register accessor: Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iset`]
module"] pub type INT_EVENT2_ISET = crate :: Reg < int_event2_iset :: INT_EVENT2_ISET_SPEC > ; # [doc = "Interrupt set"] pub mod int_event2_iset ; # [doc = "INT_EVENT2_ICLR (w) register accessor: Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event2_iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_event2_iclr`]
module"] pub type INT_EVENT2_ICLR = crate :: Reg < int_event2_iclr :: INT_EVENT2_ICLR_SPEC > ; # [doc = "Interrupt clear"] pub mod int_event2_iclr ; # [doc = "EVT_MODE (rw) register accessor: Event Mode\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evt_mode::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`evt_mode::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evt_mode`]
module"] pub type EVT_MODE = crate :: Reg < evt_mode :: EVT_MODE_SPEC > ; # [doc = "Event Mode"] pub mod evt_mode ; # [doc = "DESC (r) register accessor: Module Description\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`desc::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@desc`]
module"] pub type DESC = crate :: Reg < desc :: DESC_SPEC > ; # [doc = "Module Description"] pub mod desc ; # [doc = "GFCTL (rw) register accessor: I2C Glitch Filter Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`gfctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`gfctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gfctl`]
module"] pub type GFCTL = crate :: Reg < gfctl :: GFCTL_SPEC > ; # [doc = "I2C Glitch Filter Control"] pub mod gfctl ; # [doc = "TIMEOUT_CTL (rw) register accessor: I2C Timeout Count Control Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`timeout_ctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`timeout_ctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@timeout_ctl`]
module"] pub type TIMEOUT_CTL = crate :: Reg < timeout_ctl :: TIMEOUT_CTL_SPEC > ; # [doc = "I2C Timeout Count Control Register"] pub mod timeout_ctl ; # [doc = "TIMEOUT_CNT (r) register accessor: I2C Timeout Count Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`timeout_cnt::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@timeout_cnt`]
module"] pub type TIMEOUT_CNT = crate :: Reg < timeout_cnt :: TIMEOUT_CNT_SPEC > ; # [doc = "I2C Timeout Count Register"] pub mod timeout_cnt ; # [doc = "MSA (rw) register accessor: I2C Master Slave Address Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`msa::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`msa::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@msa`]
module"] pub type MSA = crate :: Reg < msa :: MSA_SPEC > ; # [doc = "I2C Master Slave Address Register"] pub mod msa ; # [doc = "MCTR (rw) register accessor: I2C Master Control Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mctr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mctr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mctr`]
module"] pub type MCTR = crate :: Reg < mctr :: MCTR_SPEC > ; # [doc = "I2C Master Control Register"] pub mod mctr ; # [doc = "MSR (r) register accessor: I2C Master Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`msr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@msr`]
module"] pub type MSR = crate :: Reg < msr :: MSR_SPEC > ; # [doc = "I2C Master Status Register"] pub mod msr ; # [doc = "MRXDATA (r) register accessor: I2C Master RXData\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mrxdata::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mrxdata`]
module"] pub type MRXDATA = crate :: Reg < mrxdata :: MRXDATA_SPEC > ; # [doc = "I2C Master RXData"] pub mod mrxdata ; # [doc = "MTXDATA (rw) register accessor: I2C Master TXData\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mtxdata::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mtxdata::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mtxdata`]
module"] pub type MTXDATA = crate :: Reg < mtxdata :: MTXDATA_SPEC > ; # [doc = "I2C Master TXData"] pub mod mtxdata ; # [doc = "MTPR (rw) register accessor: I2C Master Timer Period\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mtpr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mtpr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mtpr`]
module"] pub type MTPR = crate :: Reg < mtpr :: MTPR_SPEC > ; # [doc = "I2C Master Timer Period"] pub mod mtpr ; # [doc = "MCR (rw) register accessor: I2C Master Configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mcr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mcr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mcr`]
module"] pub type MCR = crate :: Reg < mcr :: MCR_SPEC > ; # [doc = "I2C Master Configuration"] pub mod mcr ; # [doc = "MBMON (r) register accessor: I2C Master Bus Monitor\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mbmon::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mbmon`]
module"] pub type MBMON = crate :: Reg < mbmon :: MBMON_SPEC > ; # [doc = "I2C Master Bus Monitor"] pub mod mbmon ; # [doc = "MFIFOCTL (rw) register accessor: I2C Master FIFO Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mfifoctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mfifoctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mfifoctl`]
module"] pub type MFIFOCTL = crate :: Reg < mfifoctl :: MFIFOCTL_SPEC > ; # [doc = "I2C Master FIFO Control"] pub mod mfifoctl ; # [doc = "MFIFOSR (r) register accessor: I2C Master FIFO Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mfifosr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mfifosr`]
module"] pub type MFIFOSR = crate :: Reg < mfifosr :: MFIFOSR_SPEC > ; # [doc = "I2C Master FIFO Status Register"] pub mod mfifosr ; # [doc = "MASTER_I2CPECCTL (rw) register accessor: I2C master PEC control register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`master_i2cpecctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`master_i2cpecctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@master_i2cpecctl`]
module"] pub type MASTER_I2CPECCTL = crate :: Reg < master_i2cpecctl :: MASTER_I2CPECCTL_SPEC > ; # [doc = "I2C master PEC control register"] pub mod master_i2cpecctl ; # [doc = "MASTER_PECSR (r) register accessor: I2C master PEC status register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`master_pecsr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@master_pecsr`]
module"] pub type MASTER_PECSR = crate :: Reg < master_pecsr :: MASTER_PECSR_SPEC > ; # [doc = "I2C master PEC status register"] pub mod master_pecsr ; # [doc = "SOAR (rw) register accessor: I2C Slave Own Address\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`soar::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`soar::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@soar`]
module"] pub type SOAR = crate :: Reg < soar :: SOAR_SPEC > ; # [doc = "I2C Slave Own Address"] pub mod soar ; # [doc = "SOAR2 (rw) register accessor: I2C Slave Own Address 2\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`soar2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`soar2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@soar2`]
module"] pub type SOAR2 = crate :: Reg < soar2 :: SOAR2_SPEC > ; # [doc = "I2C Slave Own Address 2"] pub mod soar2 ; # [doc = "SCTR (rw) register accessor: I2C Slave Control Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sctr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sctr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sctr`]
module"] pub type SCTR = crate :: Reg < sctr :: SCTR_SPEC > ; # [doc = "I2C Slave Control Register"] pub mod sctr ; # [doc = "SSR (r) register accessor: I2C Slave Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ssr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ssr`]
module"] pub type SSR = crate :: Reg < ssr :: SSR_SPEC > ; # [doc = "I2C Slave Status Register"] pub mod ssr ; # [doc = "SRXDATA (r) register accessor: I2C Slave RXData\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`srxdata::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@srxdata`]
module"] pub type SRXDATA = crate :: Reg < srxdata :: SRXDATA_SPEC > ; # [doc = "I2C Slave RXData"] pub mod srxdata ; # [doc = "STXDATA (rw) register accessor: I2C Slave TXData\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stxdata::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`stxdata::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stxdata`]
module"] pub type STXDATA = crate :: Reg < stxdata :: STXDATA_SPEC > ; # [doc = "I2C Slave TXData"] pub mod stxdata ; # [doc = "SACKCTL (rw) register accessor: I2C Slave ACK Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sackctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sackctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sackctl`]
module"] pub type SACKCTL = crate :: Reg < sackctl :: SACKCTL_SPEC > ; # [doc = "I2C Slave ACK Control"] pub mod sackctl ; # [doc = "SFIFOCTL (rw) register accessor: I2C Slave FIFO Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfifoctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sfifoctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sfifoctl`]
module"] pub type SFIFOCTL = crate :: Reg < sfifoctl :: SFIFOCTL_SPEC > ; # [doc = "I2C Slave FIFO Control"] pub mod sfifoctl ; # [doc = "SFIFOSR (r) register accessor: I2C Slave FIFO Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfifosr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sfifosr`]
module"] pub type SFIFOSR = crate :: Reg < sfifosr :: SFIFOSR_SPEC > ; # [doc = "I2C Slave FIFO Status Register"] pub mod sfifosr ; # [doc = "SLAVE_PECCTL (rw) register accessor: I2C Slave PEC control register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`slave_pecctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`slave_pecctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@slave_pecctl`]
module"] pub type SLAVE_PECCTL = crate :: Reg < slave_pecctl :: SLAVE_PECCTL_SPEC > ; # [doc = "I2C Slave PEC control register"] pub mod slave_pecctl ; # [doc = "SLAVE_PECSR (r) register accessor: I2C slave PEC status register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`slave_pecsr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@slave_pecsr`]
module"] pub type SLAVE_PECSR = crate :: Reg < slave_pecsr :: SLAVE_PECSR_SPEC > ; # [doc = "I2C slave PEC status register"] pub mod slave_pecsr ;