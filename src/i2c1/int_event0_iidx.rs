# [doc = "Register `INT_EVENT0_IIDX` reader"] pub type R = crate :: R < INT_EVENT0_IIDX_SPEC > ; # [doc = "Field `INT_EVENT0_IIDX_STAT` reader - I2C Module Interrupt Vector Value. This register provides the highes priority interrupt index. A read clears the corresponding interrupt flag in RIS and MISC. 15h-1Fh = Reserved"] pub type INT_EVENT0_IIDX_STAT_R = crate :: FieldReader < INT_EVENT0_IIDX_STAT_A > ; # [doc = "I2C Module Interrupt Vector Value. This register provides the highes priority interrupt index. A read clears the corresponding interrupt flag in RIS and MISC. 15h-1Fh = Reserved\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum INT_EVENT0_IIDX_STAT_A { # [doc = "0: NO_INTR"] INT_EVENT0_IIDX_STAT_NO_INTR = 0 , # [doc = "1: MRXDONEFG"] INT_EVENT0_IIDX_STAT_MRXDONEFG = 1 , # [doc = "2: MTXDONEFG"] INT_EVENT0_IIDX_STAT_MTXDONEFG = 2 , # [doc = "3: MRXFIFOTRG"] INT_EVENT0_IIDX_STAT_MRXFIFOTRG = 3 , # [doc = "4: MTXFIFOTRG"] INT_EVENT0_IIDX_STAT_MTXFIFOTRG = 4 , # [doc = "5: MRXFIFOFULL"] INT_EVENT0_IIDX_STAT_MRXFIFOFULL = 5 , # [doc = "6: MTX_EMPTY"] INT_EVENT0_IIDX_STAT_MTX_EMPTY = 6 , # [doc = "8: MNACKFG"] INT_EVENT0_IIDX_STAT_MNACKFG = 8 , # [doc = "9: MSTARTFG"] INT_EVENT0_IIDX_STAT_MSTARTFG = 9 , # [doc = "10: MSTOPFG"] INT_EVENT0_IIDX_STAT_MSTOPFG = 10 , # [doc = "11: MARBLOSTFG"] INT_EVENT0_IIDX_STAT_MARBLOSTFG = 11 , # [doc = "12: MDMA_DONE1_CH2"] INT_EVENT0_IIDX_STAT_MDMA_DONE1_CH2 = 12 , # [doc = "13: MDMA_DONE1_CH3"] INT_EVENT0_IIDX_STAT_MDMA_DONE1_CH3 = 13 , # [doc = "14: MPEC_RX_ERR"] INT_EVENT0_IIDX_STAT_MPEC_RX_ERR = 14 , # [doc = "15: TIMEOUTA"] INT_EVENT0_IIDX_STAT_TIMEOUTA = 15 , # [doc = "16: TIMEOUTB"] INT_EVENT0_IIDX_STAT_TIMEOUTB = 16 , # [doc = "17: SRXDONEFG"] INT_EVENT0_IIDX_STAT_SRXDONEFG = 17 , # [doc = "18: STXDONEFG"] INT_EVENT0_IIDX_STAT_STXDONEFG = 18 , # [doc = "19: SRXFIFOTRG"] INT_EVENT0_IIDX_STAT_SRXFIFOTRG = 19 , # [doc = "20: STXFIFOTRG"] INT_EVENT0_IIDX_STAT_STXFIFOTRG = 20 , # [doc = "21: SRXFIFOFULL"] INT_EVENT0_IIDX_STAT_SRXFIFOFULL = 21 , # [doc = "22: STXEMPTY"] INT_EVENT0_IIDX_STAT_STXEMPTY = 22 , # [doc = "23: SSTARTFG"] INT_EVENT0_IIDX_STAT_SSTARTFG = 23 , # [doc = "24: SSTOPFG"] INT_EVENT0_IIDX_STAT_SSTOPFG = 24 , # [doc = "25: SGENCALL"] INT_EVENT0_IIDX_STAT_SGENCALL = 25 , # [doc = "26: SDMA_DONE1_CH2"] INT_EVENT0_IIDX_STAT_SDMA_DONE1_CH2 = 26 , # [doc = "27: SDMA_DONE1_CH3"] INT_EVENT0_IIDX_STAT_SDMA_DONE1_CH3 = 27 , # [doc = "28: SPEC_RX_ERR"] INT_EVENT0_IIDX_STAT_SPEC_RX_ERR = 28 , # [doc = "29: STX_UNFL"] INT_EVENT0_IIDX_STAT_STX_UNFL = 29 , # [doc = "30: SRX_OVFL"] INT_EVENT0_IIDX_STAT_SRX_OVFL = 30 , # [doc = "31: SARBLOST"] INT_EVENT0_IIDX_STAT_SARBLOST = 31 , # [doc = "32: INTR_OVFL"] INT_EVENT0_IIDX_STAT_INTR_OVFL = 32 , } impl From < INT_EVENT0_IIDX_STAT_A > for u8 { # [inline (always)] fn from (variant : INT_EVENT0_IIDX_STAT_A) -> Self { variant as _ } } impl crate :: FieldSpec for INT_EVENT0_IIDX_STAT_A { type Ux = u8 ; } impl INT_EVENT0_IIDX_STAT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < INT_EVENT0_IIDX_STAT_A > { match self . bits { 0 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NO_INTR) , 1 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MRXDONEFG) , 2 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MTXDONEFG) , 3 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MRXFIFOTRG) , 4 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MTXFIFOTRG) , 5 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MRXFIFOFULL) , 6 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MTX_EMPTY) , 8 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MNACKFG) , 9 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MSTARTFG) , 10 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MSTOPFG) , 11 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MARBLOSTFG) , 12 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MDMA_DONE1_CH2) , 13 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MDMA_DONE1_CH3) , 14 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MPEC_RX_ERR) , 15 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_TIMEOUTA) , 16 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_TIMEOUTB) , 17 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRXDONEFG) , 18 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STXDONEFG) , 19 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRXFIFOTRG) , 20 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STXFIFOTRG) , 21 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRXFIFOFULL) , 22 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STXEMPTY) , 23 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SSTARTFG) , 24 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SSTOPFG) , 25 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SGENCALL) , 26 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SDMA_DONE1_CH2) , 27 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SDMA_DONE1_CH3) , 28 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SPEC_RX_ERR) , 29 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STX_UNFL) , 30 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRX_OVFL) , 31 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SARBLOST) , 32 => Some (INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_INTR_OVFL) , _ => None , } } # [doc = "NO_INTR"] # [inline (always)] pub fn is_int_event0_iidx_stat_no_intr (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_NO_INTR } # [doc = "MRXDONEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mrxdonefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MRXDONEFG } # [doc = "MTXDONEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mtxdonefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MTXDONEFG } # [doc = "MRXFIFOTRG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mrxfifotrg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MRXFIFOTRG } # [doc = "MTXFIFOTRG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mtxfifotrg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MTXFIFOTRG } # [doc = "MRXFIFOFULL"] # [inline (always)] pub fn is_int_event0_iidx_stat_mrxfifofull (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MRXFIFOFULL } # [doc = "MTX_EMPTY"] # [inline (always)] pub fn is_int_event0_iidx_stat_mtx_empty (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MTX_EMPTY } # [doc = "MNACKFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mnackfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MNACKFG } # [doc = "MSTARTFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mstartfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MSTARTFG } # [doc = "MSTOPFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_mstopfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MSTOPFG } # [doc = "MARBLOSTFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_marblostfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MARBLOSTFG } # [doc = "MDMA_DONE1_CH2"] # [inline (always)] pub fn is_int_event0_iidx_stat_mdma_done1_ch2 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MDMA_DONE1_CH2 } # [doc = "MDMA_DONE1_CH3"] # [inline (always)] pub fn is_int_event0_iidx_stat_mdma_done1_ch3 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MDMA_DONE1_CH3 } # [doc = "MPEC_RX_ERR"] # [inline (always)] pub fn is_int_event0_iidx_stat_mpec_rx_err (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_MPEC_RX_ERR } # [doc = "TIMEOUTA"] # [inline (always)] pub fn is_int_event0_iidx_stat_timeouta (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_TIMEOUTA } # [doc = "TIMEOUTB"] # [inline (always)] pub fn is_int_event0_iidx_stat_timeoutb (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_TIMEOUTB } # [doc = "SRXDONEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_srxdonefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRXDONEFG } # [doc = "STXDONEFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_stxdonefg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STXDONEFG } # [doc = "SRXFIFOTRG"] # [inline (always)] pub fn is_int_event0_iidx_stat_srxfifotrg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRXFIFOTRG } # [doc = "STXFIFOTRG"] # [inline (always)] pub fn is_int_event0_iidx_stat_stxfifotrg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STXFIFOTRG } # [doc = "SRXFIFOFULL"] # [inline (always)] pub fn is_int_event0_iidx_stat_srxfifofull (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRXFIFOFULL } # [doc = "STXEMPTY"] # [inline (always)] pub fn is_int_event0_iidx_stat_stxempty (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STXEMPTY } # [doc = "SSTARTFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_sstartfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SSTARTFG } # [doc = "SSTOPFG"] # [inline (always)] pub fn is_int_event0_iidx_stat_sstopfg (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SSTOPFG } # [doc = "SGENCALL"] # [inline (always)] pub fn is_int_event0_iidx_stat_sgencall (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SGENCALL } # [doc = "SDMA_DONE1_CH2"] # [inline (always)] pub fn is_int_event0_iidx_stat_sdma_done1_ch2 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SDMA_DONE1_CH2 } # [doc = "SDMA_DONE1_CH3"] # [inline (always)] pub fn is_int_event0_iidx_stat_sdma_done1_ch3 (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SDMA_DONE1_CH3 } # [doc = "SPEC_RX_ERR"] # [inline (always)] pub fn is_int_event0_iidx_stat_spec_rx_err (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SPEC_RX_ERR } # [doc = "STX_UNFL"] # [inline (always)] pub fn is_int_event0_iidx_stat_stx_unfl (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_STX_UNFL } # [doc = "SRX_OVFL"] # [inline (always)] pub fn is_int_event0_iidx_stat_srx_ovfl (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SRX_OVFL } # [doc = "SARBLOST"] # [inline (always)] pub fn is_int_event0_iidx_stat_sarblost (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_SARBLOST } # [doc = "INTR_OVFL"] # [inline (always)] pub fn is_int_event0_iidx_stat_intr_ovfl (& self) -> bool { * self == INT_EVENT0_IIDX_STAT_A :: INT_EVENT0_IIDX_STAT_INTR_OVFL } } impl R { # [doc = "Bits 0:7 - I2C Module Interrupt Vector Value. This register provides the highes priority interrupt index. A read clears the corresponding interrupt flag in RIS and MISC. 15h-1Fh = Reserved"] # [inline (always)] pub fn int_event0_iidx_stat (& self) -> INT_EVENT0_IIDX_STAT_R { INT_EVENT0_IIDX_STAT_R :: new ((self . bits & 0xff) as u8) } } # [doc = "Interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_iidx::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_IIDX_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_IIDX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_iidx::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_IIDX_SPEC { } # [doc = "`reset()` method sets INT_EVENT0_IIDX to value 0"] impl crate :: Resettable for INT_EVENT0_IIDX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }