# [doc = "Register `SOAR2` reader"] pub type R = crate :: R < SOAR2_SPEC > ; # [doc = "Register `SOAR2` writer"] pub type W = crate :: W < SOAR2_SPEC > ; # [doc = "Field `SOAR2_OAR2` reader - I2C Slave Own Address 2 This field specifies the alternate OAR2 address."] pub type SOAR2_OAR2_R = crate :: FieldReader ; # [doc = "Field `SOAR2_OAR2` writer - I2C Slave Own Address 2 This field specifies the alternate OAR2 address."] pub type SOAR2_OAR2_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 7 , O > ; # [doc = "Field `SOAR2_OAR2EN` reader - I2C Slave Own Address 2 Enable"] pub type SOAR2_OAR2EN_R = crate :: BitReader < SOAR2_OAR2EN_A > ; # [doc = "I2C Slave Own Address 2 Enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SOAR2_OAR2EN_A { # [doc = "0: DISABLE"] SOAR2_OAR2EN_DISABLE = 0 , # [doc = "1: ENABLE"] SOAR2_OAR2EN_ENABLE = 1 , } impl From < SOAR2_OAR2EN_A > for bool { # [inline (always)] fn from (variant : SOAR2_OAR2EN_A) -> Self { variant as u8 != 0 } } impl SOAR2_OAR2EN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SOAR2_OAR2EN_A { match self . bits { false => SOAR2_OAR2EN_A :: SOAR2_OAR2EN_DISABLE , true => SOAR2_OAR2EN_A :: SOAR2_OAR2EN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_soar2_oar2en_disable (& self) -> bool { * self == SOAR2_OAR2EN_A :: SOAR2_OAR2EN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_soar2_oar2en_enable (& self) -> bool { * self == SOAR2_OAR2EN_A :: SOAR2_OAR2EN_ENABLE } } # [doc = "Field `SOAR2_OAR2EN` writer - I2C Slave Own Address 2 Enable"] pub type SOAR2_OAR2EN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SOAR2_OAR2EN_A > ; impl < 'a , REG , const O : u8 > SOAR2_OAR2EN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn soar2_oar2en_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SOAR2_OAR2EN_A :: SOAR2_OAR2EN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn soar2_oar2en_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SOAR2_OAR2EN_A :: SOAR2_OAR2EN_ENABLE) } } # [doc = "Field `SOAR2_OAR2_MASK` reader - I2C Slave Own Address 2 Mask: This field specifies bits A6 through A0 of the slave address. The bits with value 1 in SOAR2.OAR2_MASK field will make the corresponding incoming address bits to match by default regardless of the value inside SOAR2.OAR2 i.e. corresponding SOAR2.OAR2 bit is a dont care."] pub type SOAR2_OAR2_MASK_R = crate :: FieldReader ; # [doc = "Field `SOAR2_OAR2_MASK` writer - I2C Slave Own Address 2 Mask: This field specifies bits A6 through A0 of the slave address. The bits with value 1 in SOAR2.OAR2_MASK field will make the corresponding incoming address bits to match by default regardless of the value inside SOAR2.OAR2 i.e. corresponding SOAR2.OAR2 bit is a dont care."] pub type SOAR2_OAR2_MASK_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 7 , O > ; impl R { # [doc = "Bits 0:6 - I2C Slave Own Address 2 This field specifies the alternate OAR2 address."] # [inline (always)] pub fn soar2_oar2 (& self) -> SOAR2_OAR2_R { SOAR2_OAR2_R :: new ((self . bits & 0x7f) as u8) } # [doc = "Bit 7 - I2C Slave Own Address 2 Enable"] # [inline (always)] pub fn soar2_oar2en (& self) -> SOAR2_OAR2EN_R { SOAR2_OAR2EN_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bits 16:22 - I2C Slave Own Address 2 Mask: This field specifies bits A6 through A0 of the slave address. The bits with value 1 in SOAR2.OAR2_MASK field will make the corresponding incoming address bits to match by default regardless of the value inside SOAR2.OAR2 i.e. corresponding SOAR2.OAR2 bit is a dont care."] # [inline (always)] pub fn soar2_oar2_mask (& self) -> SOAR2_OAR2_MASK_R { SOAR2_OAR2_MASK_R :: new (((self . bits >> 16) & 0x7f) as u8) } } impl W { # [doc = "Bits 0:6 - I2C Slave Own Address 2 This field specifies the alternate OAR2 address."] # [inline (always)] # [must_use] pub fn soar2_oar2 (& mut self) -> SOAR2_OAR2_W < SOAR2_SPEC , 0 > { SOAR2_OAR2_W :: new (self) } # [doc = "Bit 7 - I2C Slave Own Address 2 Enable"] # [inline (always)] # [must_use] pub fn soar2_oar2en (& mut self) -> SOAR2_OAR2EN_W < SOAR2_SPEC , 7 > { SOAR2_OAR2EN_W :: new (self) } # [doc = "Bits 16:22 - I2C Slave Own Address 2 Mask: This field specifies bits A6 through A0 of the slave address. The bits with value 1 in SOAR2.OAR2_MASK field will make the corresponding incoming address bits to match by default regardless of the value inside SOAR2.OAR2 i.e. corresponding SOAR2.OAR2 bit is a dont care."] # [inline (always)] # [must_use] pub fn soar2_oar2_mask (& mut self) -> SOAR2_OAR2_MASK_W < SOAR2_SPEC , 16 > { SOAR2_OAR2_MASK_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "I2C Slave Own Address 2\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`soar2::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`soar2::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SOAR2_SPEC ; impl crate :: RegisterSpec for SOAR2_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`soar2::R`](R) reader structure"] impl crate :: Readable for SOAR2_SPEC { } # [doc = "`write(|w| ..)` method takes [`soar2::W`](W) writer structure"] impl crate :: Writable for SOAR2_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SOAR2 to value 0"] impl crate :: Resettable for SOAR2_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }