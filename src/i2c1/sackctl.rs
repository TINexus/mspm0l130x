# [doc = "Register `SACKCTL` reader"] pub type R = crate :: R < SACKCTL_SPEC > ; # [doc = "Register `SACKCTL` writer"] pub type W = crate :: W < SACKCTL_SPEC > ; # [doc = "Field `SACKCTL_ACKOEN` reader - I2C Slave ACK Override Enable"] pub type SACKCTL_ACKOEN_R = crate :: BitReader < SACKCTL_ACKOEN_A > ; # [doc = "I2C Slave ACK Override Enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SACKCTL_ACKOEN_A { # [doc = "0: DISABLE"] SACKCTL_ACKOEN_DISABLE = 0 , # [doc = "1: ENABLE"] SACKCTL_ACKOEN_ENABLE = 1 , } impl From < SACKCTL_ACKOEN_A > for bool { # [inline (always)] fn from (variant : SACKCTL_ACKOEN_A) -> Self { variant as u8 != 0 } } impl SACKCTL_ACKOEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SACKCTL_ACKOEN_A { match self . bits { false => SACKCTL_ACKOEN_A :: SACKCTL_ACKOEN_DISABLE , true => SACKCTL_ACKOEN_A :: SACKCTL_ACKOEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sackctl_ackoen_disable (& self) -> bool { * self == SACKCTL_ACKOEN_A :: SACKCTL_ACKOEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sackctl_ackoen_enable (& self) -> bool { * self == SACKCTL_ACKOEN_A :: SACKCTL_ACKOEN_ENABLE } } # [doc = "Field `SACKCTL_ACKOEN` writer - I2C Slave ACK Override Enable"] pub type SACKCTL_ACKOEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SACKCTL_ACKOEN_A > ; impl < 'a , REG , const O : u8 > SACKCTL_ACKOEN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sackctl_ackoen_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_A :: SACKCTL_ACKOEN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sackctl_ackoen_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_A :: SACKCTL_ACKOEN_ENABLE) } } # [doc = "Field `SACKCTL_ACKOVAL` reader - I2C Slave ACK Override Value Note: for General Call this bit will be ignored if set to NACK and slave continues to receive data."] pub type SACKCTL_ACKOVAL_R = crate :: BitReader < SACKCTL_ACKOVAL_A > ; # [doc = "I2C Slave ACK Override Value Note: for General Call this bit will be ignored if set to NACK and slave continues to receive data.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SACKCTL_ACKOVAL_A { # [doc = "0: DISABLE"] SACKCTL_ACKOVAL_DISABLE = 0 , # [doc = "1: ENABLE"] SACKCTL_ACKOVAL_ENABLE = 1 , } impl From < SACKCTL_ACKOVAL_A > for bool { # [inline (always)] fn from (variant : SACKCTL_ACKOVAL_A) -> Self { variant as u8 != 0 } } impl SACKCTL_ACKOVAL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SACKCTL_ACKOVAL_A { match self . bits { false => SACKCTL_ACKOVAL_A :: SACKCTL_ACKOVAL_DISABLE , true => SACKCTL_ACKOVAL_A :: SACKCTL_ACKOVAL_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sackctl_ackoval_disable (& self) -> bool { * self == SACKCTL_ACKOVAL_A :: SACKCTL_ACKOVAL_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sackctl_ackoval_enable (& self) -> bool { * self == SACKCTL_ACKOVAL_A :: SACKCTL_ACKOVAL_ENABLE } } # [doc = "Field `SACKCTL_ACKOVAL` writer - I2C Slave ACK Override Value Note: for General Call this bit will be ignored if set to NACK and slave continues to receive data."] pub type SACKCTL_ACKOVAL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SACKCTL_ACKOVAL_A > ; impl < 'a , REG , const O : u8 > SACKCTL_ACKOVAL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sackctl_ackoval_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOVAL_A :: SACKCTL_ACKOVAL_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sackctl_ackoval_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOVAL_A :: SACKCTL_ACKOVAL_ENABLE) } } # [doc = "Field `SACKCTL_ACKOEN_ON_START` reader - When set this bit will automatically turn on the Slave ACKOEN field following a Start Condition."] pub type SACKCTL_ACKOEN_ON_START_R = crate :: BitReader < SACKCTL_ACKOEN_ON_START_A > ; # [doc = "When set this bit will automatically turn on the Slave ACKOEN field following a Start Condition.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SACKCTL_ACKOEN_ON_START_A { # [doc = "0: DISABLE"] SACKCTL_ACKOEN_ON_START_DISABLE = 0 , # [doc = "1: ENABLE"] SACKCTL_ACKOEN_ON_START_ENABLE = 1 , } impl From < SACKCTL_ACKOEN_ON_START_A > for bool { # [inline (always)] fn from (variant : SACKCTL_ACKOEN_ON_START_A) -> Self { variant as u8 != 0 } } impl SACKCTL_ACKOEN_ON_START_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SACKCTL_ACKOEN_ON_START_A { match self . bits { false => SACKCTL_ACKOEN_ON_START_A :: SACKCTL_ACKOEN_ON_START_DISABLE , true => SACKCTL_ACKOEN_ON_START_A :: SACKCTL_ACKOEN_ON_START_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sackctl_ackoen_on_start_disable (& self) -> bool { * self == SACKCTL_ACKOEN_ON_START_A :: SACKCTL_ACKOEN_ON_START_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sackctl_ackoen_on_start_enable (& self) -> bool { * self == SACKCTL_ACKOEN_ON_START_A :: SACKCTL_ACKOEN_ON_START_ENABLE } } # [doc = "Field `SACKCTL_ACKOEN_ON_START` writer - When set this bit will automatically turn on the Slave ACKOEN field following a Start Condition."] pub type SACKCTL_ACKOEN_ON_START_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SACKCTL_ACKOEN_ON_START_A > ; impl < 'a , REG , const O : u8 > SACKCTL_ACKOEN_ON_START_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sackctl_ackoen_on_start_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_ON_START_A :: SACKCTL_ACKOEN_ON_START_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sackctl_ackoen_on_start_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_ON_START_A :: SACKCTL_ACKOEN_ON_START_ENABLE) } } # [doc = "Field `SACKCTL_ACKOEN_ON_PECNEXT` reader - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the byte received just prior to the PEC byte. Note that when ACKOEN is set the PEC byte will not automatically be ACKed/NACKed by the State Machine and FW must perform this function by writing SLAVE_SACKCTL."] pub type SACKCTL_ACKOEN_ON_PECNEXT_R = crate :: BitReader < SACKCTL_ACKOEN_ON_PECNEXT_A > ; # [doc = "When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the byte received just prior to the PEC byte. Note that when ACKOEN is set the PEC byte will not automatically be ACKed/NACKed by the State Machine and FW must perform this function by writing SLAVE_SACKCTL.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SACKCTL_ACKOEN_ON_PECNEXT_A { # [doc = "0: DISABLE"] SACKCTL_ACKOEN_ON_PECNEXT_DISABLE = 0 , # [doc = "1: ENABLE"] SACKCTL_ACKOEN_ON_PECNEXT_ENABLE = 1 , } impl From < SACKCTL_ACKOEN_ON_PECNEXT_A > for bool { # [inline (always)] fn from (variant : SACKCTL_ACKOEN_ON_PECNEXT_A) -> Self { variant as u8 != 0 } } impl SACKCTL_ACKOEN_ON_PECNEXT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SACKCTL_ACKOEN_ON_PECNEXT_A { match self . bits { false => SACKCTL_ACKOEN_ON_PECNEXT_A :: SACKCTL_ACKOEN_ON_PECNEXT_DISABLE , true => SACKCTL_ACKOEN_ON_PECNEXT_A :: SACKCTL_ACKOEN_ON_PECNEXT_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sackctl_ackoen_on_pecnext_disable (& self) -> bool { * self == SACKCTL_ACKOEN_ON_PECNEXT_A :: SACKCTL_ACKOEN_ON_PECNEXT_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sackctl_ackoen_on_pecnext_enable (& self) -> bool { * self == SACKCTL_ACKOEN_ON_PECNEXT_A :: SACKCTL_ACKOEN_ON_PECNEXT_ENABLE } } # [doc = "Field `SACKCTL_ACKOEN_ON_PECNEXT` writer - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the byte received just prior to the PEC byte. Note that when ACKOEN is set the PEC byte will not automatically be ACKed/NACKed by the State Machine and FW must perform this function by writing SLAVE_SACKCTL."] pub type SACKCTL_ACKOEN_ON_PECNEXT_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SACKCTL_ACKOEN_ON_PECNEXT_A > ; impl < 'a , REG , const O : u8 > SACKCTL_ACKOEN_ON_PECNEXT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sackctl_ackoen_on_pecnext_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_ON_PECNEXT_A :: SACKCTL_ACKOEN_ON_PECNEXT_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sackctl_ackoen_on_pecnext_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_ON_PECNEXT_A :: SACKCTL_ACKOEN_ON_PECNEXT_ENABLE) } } # [doc = "Field `SACKCTL_ACKOEN_ON_PECDONE` reader - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the received PEC byte."] pub type SACKCTL_ACKOEN_ON_PECDONE_R = crate :: BitReader < SACKCTL_ACKOEN_ON_PECDONE_A > ; # [doc = "When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the received PEC byte.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SACKCTL_ACKOEN_ON_PECDONE_A { # [doc = "0: DISABLE"] SACKCTL_ACKOEN_ON_PECDONE_DISABLE = 0 , # [doc = "1: ENABLE"] SACKCTL_ACKOEN_ON_PECDONE_ENABLE = 1 , } impl From < SACKCTL_ACKOEN_ON_PECDONE_A > for bool { # [inline (always)] fn from (variant : SACKCTL_ACKOEN_ON_PECDONE_A) -> Self { variant as u8 != 0 } } impl SACKCTL_ACKOEN_ON_PECDONE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SACKCTL_ACKOEN_ON_PECDONE_A { match self . bits { false => SACKCTL_ACKOEN_ON_PECDONE_A :: SACKCTL_ACKOEN_ON_PECDONE_DISABLE , true => SACKCTL_ACKOEN_ON_PECDONE_A :: SACKCTL_ACKOEN_ON_PECDONE_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_sackctl_ackoen_on_pecdone_disable (& self) -> bool { * self == SACKCTL_ACKOEN_ON_PECDONE_A :: SACKCTL_ACKOEN_ON_PECDONE_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_sackctl_ackoen_on_pecdone_enable (& self) -> bool { * self == SACKCTL_ACKOEN_ON_PECDONE_A :: SACKCTL_ACKOEN_ON_PECDONE_ENABLE } } # [doc = "Field `SACKCTL_ACKOEN_ON_PECDONE` writer - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the received PEC byte."] pub type SACKCTL_ACKOEN_ON_PECDONE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SACKCTL_ACKOEN_ON_PECDONE_A > ; impl < 'a , REG , const O : u8 > SACKCTL_ACKOEN_ON_PECDONE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn sackctl_ackoen_on_pecdone_disable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_ON_PECDONE_A :: SACKCTL_ACKOEN_ON_PECDONE_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn sackctl_ackoen_on_pecdone_enable (self) -> & 'a mut crate :: W < REG > { self . variant (SACKCTL_ACKOEN_ON_PECDONE_A :: SACKCTL_ACKOEN_ON_PECDONE_ENABLE) } } impl R { # [doc = "Bit 0 - I2C Slave ACK Override Enable"] # [inline (always)] pub fn sackctl_ackoen (& self) -> SACKCTL_ACKOEN_R { SACKCTL_ACKOEN_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - I2C Slave ACK Override Value Note: for General Call this bit will be ignored if set to NACK and slave continues to receive data."] # [inline (always)] pub fn sackctl_ackoval (& self) -> SACKCTL_ACKOVAL_R { SACKCTL_ACKOVAL_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - When set this bit will automatically turn on the Slave ACKOEN field following a Start Condition."] # [inline (always)] pub fn sackctl_ackoen_on_start (& self) -> SACKCTL_ACKOEN_ON_START_R { SACKCTL_ACKOEN_ON_START_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the byte received just prior to the PEC byte. Note that when ACKOEN is set the PEC byte will not automatically be ACKed/NACKed by the State Machine and FW must perform this function by writing SLAVE_SACKCTL."] # [inline (always)] pub fn sackctl_ackoen_on_pecnext (& self) -> SACKCTL_ACKOEN_ON_PECNEXT_R { SACKCTL_ACKOEN_ON_PECNEXT_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the received PEC byte."] # [inline (always)] pub fn sackctl_ackoen_on_pecdone (& self) -> SACKCTL_ACKOEN_ON_PECDONE_R { SACKCTL_ACKOEN_ON_PECDONE_R :: new (((self . bits >> 4) & 1) != 0) } } impl W { # [doc = "Bit 0 - I2C Slave ACK Override Enable"] # [inline (always)] # [must_use] pub fn sackctl_ackoen (& mut self) -> SACKCTL_ACKOEN_W < SACKCTL_SPEC , 0 > { SACKCTL_ACKOEN_W :: new (self) } # [doc = "Bit 1 - I2C Slave ACK Override Value Note: for General Call this bit will be ignored if set to NACK and slave continues to receive data."] # [inline (always)] # [must_use] pub fn sackctl_ackoval (& mut self) -> SACKCTL_ACKOVAL_W < SACKCTL_SPEC , 1 > { SACKCTL_ACKOVAL_W :: new (self) } # [doc = "Bit 2 - When set this bit will automatically turn on the Slave ACKOEN field following a Start Condition."] # [inline (always)] # [must_use] pub fn sackctl_ackoen_on_start (& mut self) -> SACKCTL_ACKOEN_ON_START_W < SACKCTL_SPEC , 2 > { SACKCTL_ACKOEN_ON_START_W :: new (self) } # [doc = "Bit 3 - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the byte received just prior to the PEC byte. Note that when ACKOEN is set the PEC byte will not automatically be ACKed/NACKed by the State Machine and FW must perform this function by writing SLAVE_SACKCTL."] # [inline (always)] # [must_use] pub fn sackctl_ackoen_on_pecnext (& mut self) -> SACKCTL_ACKOEN_ON_PECNEXT_W < SACKCTL_SPEC , 3 > { SACKCTL_ACKOEN_ON_PECNEXT_W :: new (self) } # [doc = "Bit 4 - When set this bit will automatically turn on the Slave ACKOEN field following the ACK/NACK of the received PEC byte."] # [inline (always)] # [must_use] pub fn sackctl_ackoen_on_pecdone (& mut self) -> SACKCTL_ACKOEN_ON_PECDONE_W < SACKCTL_SPEC , 4 > { SACKCTL_ACKOEN_ON_PECDONE_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "I2C Slave ACK Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sackctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sackctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SACKCTL_SPEC ; impl crate :: RegisterSpec for SACKCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`sackctl::R`](R) reader structure"] impl crate :: Readable for SACKCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`sackctl::W`](W) writer structure"] impl crate :: Writable for SACKCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SACKCTL to value 0"] impl crate :: Resettable for SACKCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }