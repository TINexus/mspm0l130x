# [doc = "Register `SRXDATA` reader"] pub type R = crate :: R < SRXDATA_SPEC > ; # [doc = "Field `SRXDATA_VALUE` reader - Received Data. This field contains the last received data."] pub type SRXDATA_VALUE_R = crate :: FieldReader ; impl R { # [doc = "Bits 0:7 - Received Data. This field contains the last received data."] # [inline (always)] pub fn srxdata_value (& self) -> SRXDATA_VALUE_R { SRXDATA_VALUE_R :: new ((self . bits & 0xff) as u8) } } # [doc = "I2C Slave RXData\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`srxdata::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SRXDATA_SPEC ; impl crate :: RegisterSpec for SRXDATA_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`srxdata::R`](R) reader structure"] impl crate :: Readable for SRXDATA_SPEC { } # [doc = "`reset()` method sets SRXDATA to value 0"] impl crate :: Resettable for SRXDATA_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }