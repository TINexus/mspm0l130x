# [doc = "Register `MBMON` reader"] pub type R = crate :: R < MBMON_SPEC > ; # [doc = "Field `MBMON_SCL` reader - I2C SCL Status"] pub type MBMON_SCL_R = crate :: BitReader < MBMON_SCL_A > ; # [doc = "I2C SCL Status\n\nValue on reset: 1"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MBMON_SCL_A { # [doc = "0: CLEARED"] MBMON_SCL_CLEARED = 0 , # [doc = "1: SET"] MBMON_SCL_SET = 1 , } impl From < MBMON_SCL_A > for bool { # [inline (always)] fn from (variant : MBMON_SCL_A) -> Self { variant as u8 != 0 } } impl MBMON_SCL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MBMON_SCL_A { match self . bits { false => MBMON_SCL_A :: MBMON_SCL_CLEARED , true => MBMON_SCL_A :: MBMON_SCL_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_mbmon_scl_cleared (& self) -> bool { * self == MBMON_SCL_A :: MBMON_SCL_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_mbmon_scl_set (& self) -> bool { * self == MBMON_SCL_A :: MBMON_SCL_SET } } # [doc = "Field `MBMON_SDA` reader - I2C SDA Status"] pub type MBMON_SDA_R = crate :: BitReader < MBMON_SDA_A > ; # [doc = "I2C SDA Status\n\nValue on reset: 1"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MBMON_SDA_A { # [doc = "0: CLEARED"] MBMON_SDA_CLEARED = 0 , # [doc = "1: SET"] MBMON_SDA_SET = 1 , } impl From < MBMON_SDA_A > for bool { # [inline (always)] fn from (variant : MBMON_SDA_A) -> Self { variant as u8 != 0 } } impl MBMON_SDA_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MBMON_SDA_A { match self . bits { false => MBMON_SDA_A :: MBMON_SDA_CLEARED , true => MBMON_SDA_A :: MBMON_SDA_SET , } } # [doc = "CLEARED"] # [inline (always)] pub fn is_mbmon_sda_cleared (& self) -> bool { * self == MBMON_SDA_A :: MBMON_SDA_CLEARED } # [doc = "SET"] # [inline (always)] pub fn is_mbmon_sda_set (& self) -> bool { * self == MBMON_SDA_A :: MBMON_SDA_SET } } impl R { # [doc = "Bit 0 - I2C SCL Status"] # [inline (always)] pub fn mbmon_scl (& self) -> MBMON_SCL_R { MBMON_SCL_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - I2C SDA Status"] # [inline (always)] pub fn mbmon_sda (& self) -> MBMON_SDA_R { MBMON_SDA_R :: new (((self . bits >> 1) & 1) != 0) } } # [doc = "I2C Master Bus Monitor\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mbmon::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MBMON_SPEC ; impl crate :: RegisterSpec for MBMON_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`mbmon::R`](R) reader structure"] impl crate :: Readable for MBMON_SPEC { } # [doc = "`reset()` method sets MBMON to value 0x03"] impl crate :: Resettable for MBMON_SPEC { const RESET_VALUE : Self :: Ux = 0x03 ; }