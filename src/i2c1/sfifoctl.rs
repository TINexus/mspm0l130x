# [doc = "Register `SFIFOCTL` reader"] pub type R = crate :: R < SFIFOCTL_SPEC > ; # [doc = "Register `SFIFOCTL` writer"] pub type W = crate :: W < SFIFOCTL_SPEC > ; # [doc = "Field `SFIFOCTL_TXTRIG` reader - TX FIFO Trigger Indicates at what fill level in the TX FIFO a trigger will be generated."] pub type SFIFOCTL_TXTRIG_R = crate :: FieldReader < SFIFOCTL_TXTRIG_A > ; # [doc = "TX FIFO Trigger Indicates at what fill level in the TX FIFO a trigger will be generated.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SFIFOCTL_TXTRIG_A { # [doc = "4: LEVEL_4"] SFIFOCTL_TXTRIG_LEVEL_4 = 4 , # [doc = "5: LEVEL_5"] SFIFOCTL_TXTRIG_LEVEL_5 = 5 , # [doc = "6: LEVEL_6"] SFIFOCTL_TXTRIG_LEVEL_6 = 6 , # [doc = "7: LEVEL_7"] SFIFOCTL_TXTRIG_LEVEL_7 = 7 , } impl From < SFIFOCTL_TXTRIG_A > for u8 { # [inline (always)] fn from (variant : SFIFOCTL_TXTRIG_A) -> Self { variant as _ } } impl crate :: FieldSpec for SFIFOCTL_TXTRIG_A { type Ux = u8 ; } impl SFIFOCTL_TXTRIG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < SFIFOCTL_TXTRIG_A > { match self . bits { 4 => Some (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_4) , 5 => Some (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_5) , 6 => Some (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_6) , 7 => Some (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_7) , _ => None , } } # [doc = "LEVEL_4"] # [inline (always)] pub fn is_sfifoctl_txtrig_level_4 (& self) -> bool { * self == SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_4 } # [doc = "LEVEL_5"] # [inline (always)] pub fn is_sfifoctl_txtrig_level_5 (& self) -> bool { * self == SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_5 } # [doc = "LEVEL_6"] # [inline (always)] pub fn is_sfifoctl_txtrig_level_6 (& self) -> bool { * self == SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_6 } # [doc = "LEVEL_7"] # [inline (always)] pub fn is_sfifoctl_txtrig_level_7 (& self) -> bool { * self == SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_7 } } # [doc = "Field `SFIFOCTL_TXTRIG` writer - TX FIFO Trigger Indicates at what fill level in the TX FIFO a trigger will be generated."] pub type SFIFOCTL_TXTRIG_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 3 , O , SFIFOCTL_TXTRIG_A > ; impl < 'a , REG , const O : u8 > SFIFOCTL_TXTRIG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "LEVEL_4"] # [inline (always)] pub fn sfifoctl_txtrig_level_4 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_4) } # [doc = "LEVEL_5"] # [inline (always)] pub fn sfifoctl_txtrig_level_5 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_5) } # [doc = "LEVEL_6"] # [inline (always)] pub fn sfifoctl_txtrig_level_6 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_6) } # [doc = "LEVEL_7"] # [inline (always)] pub fn sfifoctl_txtrig_level_7 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_TXTRIG_A :: SFIFOCTL_TXTRIG_LEVEL_7) } } # [doc = "Field `SFIFOCTL_TXFLUSH` reader - TX FIFO Flush Setting this bit will Flush the TX FIFO. Before reseting this bit to stop Flush the TXFIFOCNT should be checked to be 8 and indicating that the Flush has completed."] pub type SFIFOCTL_TXFLUSH_R = crate :: BitReader < SFIFOCTL_TXFLUSH_A > ; # [doc = "TX FIFO Flush Setting this bit will Flush the TX FIFO. Before reseting this bit to stop Flush the TXFIFOCNT should be checked to be 8 and indicating that the Flush has completed.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SFIFOCTL_TXFLUSH_A { # [doc = "0: NOFLUSH"] SFIFOCTL_TXFLUSH_NOFLUSH = 0 , # [doc = "1: FLUSH"] SFIFOCTL_TXFLUSH_FLUSH = 1 , } impl From < SFIFOCTL_TXFLUSH_A > for bool { # [inline (always)] fn from (variant : SFIFOCTL_TXFLUSH_A) -> Self { variant as u8 != 0 } } impl SFIFOCTL_TXFLUSH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SFIFOCTL_TXFLUSH_A { match self . bits { false => SFIFOCTL_TXFLUSH_A :: SFIFOCTL_TXFLUSH_NOFLUSH , true => SFIFOCTL_TXFLUSH_A :: SFIFOCTL_TXFLUSH_FLUSH , } } # [doc = "NOFLUSH"] # [inline (always)] pub fn is_sfifoctl_txflush_noflush (& self) -> bool { * self == SFIFOCTL_TXFLUSH_A :: SFIFOCTL_TXFLUSH_NOFLUSH } # [doc = "FLUSH"] # [inline (always)] pub fn is_sfifoctl_txflush_flush (& self) -> bool { * self == SFIFOCTL_TXFLUSH_A :: SFIFOCTL_TXFLUSH_FLUSH } } # [doc = "Field `SFIFOCTL_TXFLUSH` writer - TX FIFO Flush Setting this bit will Flush the TX FIFO. Before reseting this bit to stop Flush the TXFIFOCNT should be checked to be 8 and indicating that the Flush has completed."] pub type SFIFOCTL_TXFLUSH_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SFIFOCTL_TXFLUSH_A > ; impl < 'a , REG , const O : u8 > SFIFOCTL_TXFLUSH_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NOFLUSH"] # [inline (always)] pub fn sfifoctl_txflush_noflush (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_TXFLUSH_A :: SFIFOCTL_TXFLUSH_NOFLUSH) } # [doc = "FLUSH"] # [inline (always)] pub fn sfifoctl_txflush_flush (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_TXFLUSH_A :: SFIFOCTL_TXFLUSH_FLUSH) } } # [doc = "Field `SFIFOCTL_RXTRIG` reader - RX FIFO Trigger Indicates at what fill level in the RX FIFO a trigger will be generated. Note: Programming RXTRIG to 0x0 has no effect since no data is present to transfer out of RX FIFO."] pub type SFIFOCTL_RXTRIG_R = crate :: FieldReader < SFIFOCTL_RXTRIG_A > ; # [doc = "RX FIFO Trigger Indicates at what fill level in the RX FIFO a trigger will be generated. Note: Programming RXTRIG to 0x0 has no effect since no data is present to transfer out of RX FIFO.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum SFIFOCTL_RXTRIG_A { # [doc = "4: LEVEL_5"] SFIFOCTL_RXTRIG_LEVEL_5 = 4 , # [doc = "5: LEVEL_6"] SFIFOCTL_RXTRIG_LEVEL_6 = 5 , # [doc = "6: LEVEL_7"] SFIFOCTL_RXTRIG_LEVEL_7 = 6 , # [doc = "7: LEVEL_8"] SFIFOCTL_RXTRIG_LEVEL_8 = 7 , } impl From < SFIFOCTL_RXTRIG_A > for u8 { # [inline (always)] fn from (variant : SFIFOCTL_RXTRIG_A) -> Self { variant as _ } } impl crate :: FieldSpec for SFIFOCTL_RXTRIG_A { type Ux = u8 ; } impl SFIFOCTL_RXTRIG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < SFIFOCTL_RXTRIG_A > { match self . bits { 4 => Some (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_5) , 5 => Some (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_6) , 6 => Some (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_7) , 7 => Some (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_8) , _ => None , } } # [doc = "LEVEL_5"] # [inline (always)] pub fn is_sfifoctl_rxtrig_level_5 (& self) -> bool { * self == SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_5 } # [doc = "LEVEL_6"] # [inline (always)] pub fn is_sfifoctl_rxtrig_level_6 (& self) -> bool { * self == SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_6 } # [doc = "LEVEL_7"] # [inline (always)] pub fn is_sfifoctl_rxtrig_level_7 (& self) -> bool { * self == SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_7 } # [doc = "LEVEL_8"] # [inline (always)] pub fn is_sfifoctl_rxtrig_level_8 (& self) -> bool { * self == SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_8 } } # [doc = "Field `SFIFOCTL_RXTRIG` writer - RX FIFO Trigger Indicates at what fill level in the RX FIFO a trigger will be generated. Note: Programming RXTRIG to 0x0 has no effect since no data is present to transfer out of RX FIFO."] pub type SFIFOCTL_RXTRIG_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 3 , O , SFIFOCTL_RXTRIG_A > ; impl < 'a , REG , const O : u8 > SFIFOCTL_RXTRIG_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "LEVEL_5"] # [inline (always)] pub fn sfifoctl_rxtrig_level_5 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_5) } # [doc = "LEVEL_6"] # [inline (always)] pub fn sfifoctl_rxtrig_level_6 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_6) } # [doc = "LEVEL_7"] # [inline (always)] pub fn sfifoctl_rxtrig_level_7 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_7) } # [doc = "LEVEL_8"] # [inline (always)] pub fn sfifoctl_rxtrig_level_8 (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_RXTRIG_A :: SFIFOCTL_RXTRIG_LEVEL_8) } } # [doc = "Field `SFIFOCTL_RXFLUSH` reader - RX FIFO Flush Setting this bit will Flush the RX FIFO. Before reseting this bit to stop Flush the RXFIFOCNT should be checked to be 0 and indicating that the Flush has completed."] pub type SFIFOCTL_RXFLUSH_R = crate :: BitReader < SFIFOCTL_RXFLUSH_A > ; # [doc = "RX FIFO Flush Setting this bit will Flush the RX FIFO. Before reseting this bit to stop Flush the RXFIFOCNT should be checked to be 0 and indicating that the Flush has completed.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SFIFOCTL_RXFLUSH_A { # [doc = "0: NOFLUSH"] SFIFOCTL_RXFLUSH_NOFLUSH = 0 , # [doc = "1: FLUSH"] SFIFOCTL_RXFLUSH_FLUSH = 1 , } impl From < SFIFOCTL_RXFLUSH_A > for bool { # [inline (always)] fn from (variant : SFIFOCTL_RXFLUSH_A) -> Self { variant as u8 != 0 } } impl SFIFOCTL_RXFLUSH_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> SFIFOCTL_RXFLUSH_A { match self . bits { false => SFIFOCTL_RXFLUSH_A :: SFIFOCTL_RXFLUSH_NOFLUSH , true => SFIFOCTL_RXFLUSH_A :: SFIFOCTL_RXFLUSH_FLUSH , } } # [doc = "NOFLUSH"] # [inline (always)] pub fn is_sfifoctl_rxflush_noflush (& self) -> bool { * self == SFIFOCTL_RXFLUSH_A :: SFIFOCTL_RXFLUSH_NOFLUSH } # [doc = "FLUSH"] # [inline (always)] pub fn is_sfifoctl_rxflush_flush (& self) -> bool { * self == SFIFOCTL_RXFLUSH_A :: SFIFOCTL_RXFLUSH_FLUSH } } # [doc = "Field `SFIFOCTL_RXFLUSH` writer - RX FIFO Flush Setting this bit will Flush the RX FIFO. Before reseting this bit to stop Flush the RXFIFOCNT should be checked to be 0 and indicating that the Flush has completed."] pub type SFIFOCTL_RXFLUSH_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , SFIFOCTL_RXFLUSH_A > ; impl < 'a , REG , const O : u8 > SFIFOCTL_RXFLUSH_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NOFLUSH"] # [inline (always)] pub fn sfifoctl_rxflush_noflush (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_RXFLUSH_A :: SFIFOCTL_RXFLUSH_NOFLUSH) } # [doc = "FLUSH"] # [inline (always)] pub fn sfifoctl_rxflush_flush (self) -> & 'a mut crate :: W < REG > { self . variant (SFIFOCTL_RXFLUSH_A :: SFIFOCTL_RXFLUSH_FLUSH) } } impl R { # [doc = "Bits 0:2 - TX FIFO Trigger Indicates at what fill level in the TX FIFO a trigger will be generated."] # [inline (always)] pub fn sfifoctl_txtrig (& self) -> SFIFOCTL_TXTRIG_R { SFIFOCTL_TXTRIG_R :: new ((self . bits & 7) as u8) } # [doc = "Bit 7 - TX FIFO Flush Setting this bit will Flush the TX FIFO. Before reseting this bit to stop Flush the TXFIFOCNT should be checked to be 8 and indicating that the Flush has completed."] # [inline (always)] pub fn sfifoctl_txflush (& self) -> SFIFOCTL_TXFLUSH_R { SFIFOCTL_TXFLUSH_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bits 8:10 - RX FIFO Trigger Indicates at what fill level in the RX FIFO a trigger will be generated. Note: Programming RXTRIG to 0x0 has no effect since no data is present to transfer out of RX FIFO."] # [inline (always)] pub fn sfifoctl_rxtrig (& self) -> SFIFOCTL_RXTRIG_R { SFIFOCTL_RXTRIG_R :: new (((self . bits >> 8) & 7) as u8) } # [doc = "Bit 15 - RX FIFO Flush Setting this bit will Flush the RX FIFO. Before reseting this bit to stop Flush the RXFIFOCNT should be checked to be 0 and indicating that the Flush has completed."] # [inline (always)] pub fn sfifoctl_rxflush (& self) -> SFIFOCTL_RXFLUSH_R { SFIFOCTL_RXFLUSH_R :: new (((self . bits >> 15) & 1) != 0) } } impl W { # [doc = "Bits 0:2 - TX FIFO Trigger Indicates at what fill level in the TX FIFO a trigger will be generated."] # [inline (always)] # [must_use] pub fn sfifoctl_txtrig (& mut self) -> SFIFOCTL_TXTRIG_W < SFIFOCTL_SPEC , 0 > { SFIFOCTL_TXTRIG_W :: new (self) } # [doc = "Bit 7 - TX FIFO Flush Setting this bit will Flush the TX FIFO. Before reseting this bit to stop Flush the TXFIFOCNT should be checked to be 8 and indicating that the Flush has completed."] # [inline (always)] # [must_use] pub fn sfifoctl_txflush (& mut self) -> SFIFOCTL_TXFLUSH_W < SFIFOCTL_SPEC , 7 > { SFIFOCTL_TXFLUSH_W :: new (self) } # [doc = "Bits 8:10 - RX FIFO Trigger Indicates at what fill level in the RX FIFO a trigger will be generated. Note: Programming RXTRIG to 0x0 has no effect since no data is present to transfer out of RX FIFO."] # [inline (always)] # [must_use] pub fn sfifoctl_rxtrig (& mut self) -> SFIFOCTL_RXTRIG_W < SFIFOCTL_SPEC , 8 > { SFIFOCTL_RXTRIG_W :: new (self) } # [doc = "Bit 15 - RX FIFO Flush Setting this bit will Flush the RX FIFO. Before reseting this bit to stop Flush the RXFIFOCNT should be checked to be 0 and indicating that the Flush has completed."] # [inline (always)] # [must_use] pub fn sfifoctl_rxflush (& mut self) -> SFIFOCTL_RXFLUSH_W < SFIFOCTL_SPEC , 15 > { SFIFOCTL_RXFLUSH_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "I2C Slave FIFO Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfifoctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sfifoctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SFIFOCTL_SPEC ; impl crate :: RegisterSpec for SFIFOCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`sfifoctl::R`](R) reader structure"] impl crate :: Readable for SFIFOCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`sfifoctl::W`](W) writer structure"] impl crate :: Writable for SFIFOCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SFIFOCTL to value 0"] impl crate :: Resettable for SFIFOCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }