# [doc = "Register `TIMEOUT_CNT` reader"] pub type R = crate :: R < TIMEOUT_CNT_SPEC > ; # [doc = "Field `TIMEOUT_CNT_TCNTA` reader - Timeout Count A Current Count: This field contains the upper 8 bits of a 12-bit current counter for timeout counter A"] pub type TIMEOUT_CNT_TCNTA_R = crate :: FieldReader ; # [doc = "Field `TIMEOUT_CNT_TCNTB` reader - Timeout Count B Current Count: This field contains the upper 8 bits of a 12-bit current counter for timeout counter B"] pub type TIMEOUT_CNT_TCNTB_R = crate :: FieldReader ; impl R { # [doc = "Bits 0:7 - Timeout Count A Current Count: This field contains the upper 8 bits of a 12-bit current counter for timeout counter A"] # [inline (always)] pub fn timeout_cnt_tcnta (& self) -> TIMEOUT_CNT_TCNTA_R { TIMEOUT_CNT_TCNTA_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 16:23 - Timeout Count B Current Count: This field contains the upper 8 bits of a 12-bit current counter for timeout counter B"] # [inline (always)] pub fn timeout_cnt_tcntb (& self) -> TIMEOUT_CNT_TCNTB_R { TIMEOUT_CNT_TCNTB_R :: new (((self . bits >> 16) & 0xff) as u8) } } # [doc = "I2C Timeout Count Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`timeout_cnt::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TIMEOUT_CNT_SPEC ; impl crate :: RegisterSpec for TIMEOUT_CNT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`timeout_cnt::R`](R) reader structure"] impl crate :: Readable for TIMEOUT_CNT_SPEC { } # [doc = "`reset()` method sets TIMEOUT_CNT to value 0x0002_0002"] impl crate :: Resettable for TIMEOUT_CNT_SPEC { const RESET_VALUE : Self :: Ux = 0x0002_0002 ; }