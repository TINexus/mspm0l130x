# [doc = "Register `GCTL` reader"] pub type R = crate :: R < GCTL_SPEC > ; # [doc = "Register `GCTL` writer"] pub type W = crate :: W < GCTL_SPEC > ; # [doc = "Field `GCTL_SHDWLDEN` reader - Enables shadow to active load of bufferred registers and register fields."] pub type GCTL_SHDWLDEN_R = crate :: BitReader < GCTL_SHDWLDEN_A > ; # [doc = "Enables shadow to active load of bufferred registers and register fields.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum GCTL_SHDWLDEN_A { # [doc = "0: DISABLE"] GCTL_SHDWLDEN_DISABLE = 0 , # [doc = "1: ENABLE"] GCTL_SHDWLDEN_ENABLE = 1 , } impl From < GCTL_SHDWLDEN_A > for bool { # [inline (always)] fn from (variant : GCTL_SHDWLDEN_A) -> Self { variant as u8 != 0 } } impl GCTL_SHDWLDEN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> GCTL_SHDWLDEN_A { match self . bits { false => GCTL_SHDWLDEN_A :: GCTL_SHDWLDEN_DISABLE , true => GCTL_SHDWLDEN_A :: GCTL_SHDWLDEN_ENABLE , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_gctl_shdwlden_disable (& self) -> bool { * self == GCTL_SHDWLDEN_A :: GCTL_SHDWLDEN_DISABLE } # [doc = "ENABLE"] # [inline (always)] pub fn is_gctl_shdwlden_enable (& self) -> bool { * self == GCTL_SHDWLDEN_A :: GCTL_SHDWLDEN_ENABLE } } # [doc = "Field `GCTL_SHDWLDEN` writer - Enables shadow to active load of bufferred registers and register fields."] pub type GCTL_SHDWLDEN_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , GCTL_SHDWLDEN_A > ; impl < 'a , REG , const O : u8 > GCTL_SHDWLDEN_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DISABLE"] # [inline (always)] pub fn gctl_shdwlden_disable (self) -> & 'a mut crate :: W < REG > { self . variant (GCTL_SHDWLDEN_A :: GCTL_SHDWLDEN_DISABLE) } # [doc = "ENABLE"] # [inline (always)] pub fn gctl_shdwlden_enable (self) -> & 'a mut crate :: W < REG > { self . variant (GCTL_SHDWLDEN_A :: GCTL_SHDWLDEN_ENABLE) } } impl R { # [doc = "Bit 0 - Enables shadow to active load of bufferred registers and register fields."] # [inline (always)] pub fn gctl_shdwlden (& self) -> GCTL_SHDWLDEN_R { GCTL_SHDWLDEN_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Enables shadow to active load of bufferred registers and register fields."] # [inline (always)] # [must_use] pub fn gctl_shdwlden (& mut self) -> GCTL_SHDWLDEN_W < GCTL_SPEC , 0 > { GCTL_SHDWLDEN_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Shadow to active load mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`gctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`gctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GCTL_SPEC ; impl crate :: RegisterSpec for GCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`gctl::R`](R) reader structure"] impl crate :: Readable for GCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`gctl::W`](W) writer structure"] impl crate :: Writable for GCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets GCTL to value 0"] impl crate :: Resettable for GCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }