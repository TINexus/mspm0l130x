# [doc = "Register `INT_EVENT2_RIS` reader"] pub type R = crate :: R < INT_EVENT2_RIS_SPEC > ; # [doc = "Field `INT_EVENT2_RIS_TX` reader - Transmit FIFO event: A read returns the current mask for transmit FIFO interrupt. On a write of 1, the mask for transmit FIFO interrupt is set which means the interrupt state will be reflected in MIS.TXMIS. A write of 0 clears the mask which means MIS.TXMIS will not reflect the interrupt."] pub type INT_EVENT2_RIS_TX_R = crate :: BitReader < INT_EVENT2_RIS_TX_A > ; # [doc = "Transmit FIFO event: A read returns the current mask for transmit FIFO interrupt. On a write of 1, the mask for transmit FIFO interrupt is set which means the interrupt state will be reflected in MIS.TXMIS. A write of 0 clears the mask which means MIS.TXMIS will not reflect the interrupt.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT2_RIS_TX_A { # [doc = "0: CLR"] INT_EVENT2_RIS_TX_CLR = 0 , # [doc = "1: SET"] INT_EVENT2_RIS_TX_SET = 1 , } impl From < INT_EVENT2_RIS_TX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT2_RIS_TX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT2_RIS_TX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT2_RIS_TX_A { match self . bits { false => INT_EVENT2_RIS_TX_A :: INT_EVENT2_RIS_TX_CLR , true => INT_EVENT2_RIS_TX_A :: INT_EVENT2_RIS_TX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event2_ris_tx_clr (& self) -> bool { * self == INT_EVENT2_RIS_TX_A :: INT_EVENT2_RIS_TX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event2_ris_tx_set (& self) -> bool { * self == INT_EVENT2_RIS_TX_A :: INT_EVENT2_RIS_TX_SET } } impl R { # [doc = "Bit 4 - Transmit FIFO event: A read returns the current mask for transmit FIFO interrupt. On a write of 1, the mask for transmit FIFO interrupt is set which means the interrupt state will be reflected in MIS.TXMIS. A write of 0 clears the mask which means MIS.TXMIS will not reflect the interrupt."] # [inline (always)] pub fn int_event2_ris_tx (& self) -> INT_EVENT2_RIS_TX_R { INT_EVENT2_RIS_TX_R :: new (((self . bits >> 4) & 1) != 0) } } # [doc = "Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event2_ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT2_RIS_SPEC ; impl crate :: RegisterSpec for INT_EVENT2_RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event2_ris::R`](R) reader structure"] impl crate :: Readable for INT_EVENT2_RIS_SPEC { } # [doc = "`reset()` method sets INT_EVENT2_RIS to value 0"] impl crate :: Resettable for INT_EVENT2_RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }