# [doc = "Register `INT_EVENT0_IMASK` reader"] pub type R = crate :: R < INT_EVENT0_IMASK_SPEC > ; # [doc = "Register `INT_EVENT0_IMASK` writer"] pub type W = crate :: W < INT_EVENT0_IMASK_SPEC > ; # [doc = "Field `INT_EVENT0_IMASK_RXFIFO_OVF` reader - RXFIFO overflow event mask."] pub type INT_EVENT0_IMASK_RXFIFO_OVF_R = crate :: BitReader < INT_EVENT0_IMASK_RXFIFO_OVF_A > ; # [doc = "RXFIFO overflow event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_RXFIFO_OVF_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_RXFIFO_OVF_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_RXFIFO_OVF_SET = 1 , } impl From < INT_EVENT0_IMASK_RXFIFO_OVF_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_RXFIFO_OVF_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_RXFIFO_OVF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_RXFIFO_OVF_A { match self . bits { false => INT_EVENT0_IMASK_RXFIFO_OVF_A :: INT_EVENT0_IMASK_RXFIFO_OVF_CLR , true => INT_EVENT0_IMASK_RXFIFO_OVF_A :: INT_EVENT0_IMASK_RXFIFO_OVF_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_rxfifo_ovf_clr (& self) -> bool { * self == INT_EVENT0_IMASK_RXFIFO_OVF_A :: INT_EVENT0_IMASK_RXFIFO_OVF_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_rxfifo_ovf_set (& self) -> bool { * self == INT_EVENT0_IMASK_RXFIFO_OVF_A :: INT_EVENT0_IMASK_RXFIFO_OVF_SET } } # [doc = "Field `INT_EVENT0_IMASK_RXFIFO_OVF` writer - RXFIFO overflow event mask."] pub type INT_EVENT0_IMASK_RXFIFO_OVF_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_RXFIFO_OVF_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_RXFIFO_OVF_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_rxfifo_ovf_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RXFIFO_OVF_A :: INT_EVENT0_IMASK_RXFIFO_OVF_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_rxfifo_ovf_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RXFIFO_OVF_A :: INT_EVENT0_IMASK_RXFIFO_OVF_SET) } } # [doc = "Field `INT_EVENT0_IMASK_PER` reader - Parity error event mask."] pub type INT_EVENT0_IMASK_PER_R = crate :: BitReader < INT_EVENT0_IMASK_PER_A > ; # [doc = "Parity error event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_PER_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_PER_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_PER_SET = 1 , } impl From < INT_EVENT0_IMASK_PER_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_PER_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_PER_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_PER_A { match self . bits { false => INT_EVENT0_IMASK_PER_A :: INT_EVENT0_IMASK_PER_CLR , true => INT_EVENT0_IMASK_PER_A :: INT_EVENT0_IMASK_PER_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_per_clr (& self) -> bool { * self == INT_EVENT0_IMASK_PER_A :: INT_EVENT0_IMASK_PER_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_per_set (& self) -> bool { * self == INT_EVENT0_IMASK_PER_A :: INT_EVENT0_IMASK_PER_SET } } # [doc = "Field `INT_EVENT0_IMASK_PER` writer - Parity error event mask."] pub type INT_EVENT0_IMASK_PER_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_PER_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_PER_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_per_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_PER_A :: INT_EVENT0_IMASK_PER_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_per_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_PER_A :: INT_EVENT0_IMASK_PER_SET) } } # [doc = "Field `INT_EVENT0_IMASK_RTOUT` reader - Enable SPI Receive Time-Out event mask."] pub type INT_EVENT0_IMASK_RTOUT_R = crate :: BitReader < INT_EVENT0_IMASK_RTOUT_A > ; # [doc = "Enable SPI Receive Time-Out event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_RTOUT_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_RTOUT_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_RTOUT_SET = 1 , } impl From < INT_EVENT0_IMASK_RTOUT_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_RTOUT_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_RTOUT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_RTOUT_A { match self . bits { false => INT_EVENT0_IMASK_RTOUT_A :: INT_EVENT0_IMASK_RTOUT_CLR , true => INT_EVENT0_IMASK_RTOUT_A :: INT_EVENT0_IMASK_RTOUT_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_rtout_clr (& self) -> bool { * self == INT_EVENT0_IMASK_RTOUT_A :: INT_EVENT0_IMASK_RTOUT_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_rtout_set (& self) -> bool { * self == INT_EVENT0_IMASK_RTOUT_A :: INT_EVENT0_IMASK_RTOUT_SET } } # [doc = "Field `INT_EVENT0_IMASK_RTOUT` writer - Enable SPI Receive Time-Out event mask."] pub type INT_EVENT0_IMASK_RTOUT_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_RTOUT_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_RTOUT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_rtout_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RTOUT_A :: INT_EVENT0_IMASK_RTOUT_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_rtout_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RTOUT_A :: INT_EVENT0_IMASK_RTOUT_SET) } } # [doc = "Field `INT_EVENT0_IMASK_RX` reader - Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached"] pub type INT_EVENT0_IMASK_RX_R = crate :: BitReader < INT_EVENT0_IMASK_RX_A > ; # [doc = "Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_RX_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_RX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_RX_SET = 1 , } impl From < INT_EVENT0_IMASK_RX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_RX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_RX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_RX_A { match self . bits { false => INT_EVENT0_IMASK_RX_A :: INT_EVENT0_IMASK_RX_CLR , true => INT_EVENT0_IMASK_RX_A :: INT_EVENT0_IMASK_RX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_rx_clr (& self) -> bool { * self == INT_EVENT0_IMASK_RX_A :: INT_EVENT0_IMASK_RX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_rx_set (& self) -> bool { * self == INT_EVENT0_IMASK_RX_A :: INT_EVENT0_IMASK_RX_SET } } # [doc = "Field `INT_EVENT0_IMASK_RX` writer - Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached"] pub type INT_EVENT0_IMASK_RX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_RX_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_RX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_rx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RX_A :: INT_EVENT0_IMASK_RX_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_rx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RX_A :: INT_EVENT0_IMASK_RX_SET) } } # [doc = "Field `INT_EVENT0_IMASK_TX` reader - Transmit FIFO event mask."] pub type INT_EVENT0_IMASK_TX_R = crate :: BitReader < INT_EVENT0_IMASK_TX_A > ; # [doc = "Transmit FIFO event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_TX_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_TX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_TX_SET = 1 , } impl From < INT_EVENT0_IMASK_TX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_TX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_TX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_TX_A { match self . bits { false => INT_EVENT0_IMASK_TX_A :: INT_EVENT0_IMASK_TX_CLR , true => INT_EVENT0_IMASK_TX_A :: INT_EVENT0_IMASK_TX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_tx_clr (& self) -> bool { * self == INT_EVENT0_IMASK_TX_A :: INT_EVENT0_IMASK_TX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_tx_set (& self) -> bool { * self == INT_EVENT0_IMASK_TX_A :: INT_EVENT0_IMASK_TX_SET } } # [doc = "Field `INT_EVENT0_IMASK_TX` writer - Transmit FIFO event mask."] pub type INT_EVENT0_IMASK_TX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_TX_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_TX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_tx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_TX_A :: INT_EVENT0_IMASK_TX_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_tx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_TX_A :: INT_EVENT0_IMASK_TX_SET) } } # [doc = "Field `INT_EVENT0_IMASK_TXEMPTY` reader - Transmit FIFO Empty event mask."] pub type INT_EVENT0_IMASK_TXEMPTY_R = crate :: BitReader < INT_EVENT0_IMASK_TXEMPTY_A > ; # [doc = "Transmit FIFO Empty event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_TXEMPTY_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_TXEMPTY_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_TXEMPTY_SET = 1 , } impl From < INT_EVENT0_IMASK_TXEMPTY_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_TXEMPTY_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_TXEMPTY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_TXEMPTY_A { match self . bits { false => INT_EVENT0_IMASK_TXEMPTY_A :: INT_EVENT0_IMASK_TXEMPTY_CLR , true => INT_EVENT0_IMASK_TXEMPTY_A :: INT_EVENT0_IMASK_TXEMPTY_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_txempty_clr (& self) -> bool { * self == INT_EVENT0_IMASK_TXEMPTY_A :: INT_EVENT0_IMASK_TXEMPTY_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_txempty_set (& self) -> bool { * self == INT_EVENT0_IMASK_TXEMPTY_A :: INT_EVENT0_IMASK_TXEMPTY_SET } } # [doc = "Field `INT_EVENT0_IMASK_TXEMPTY` writer - Transmit FIFO Empty event mask."] pub type INT_EVENT0_IMASK_TXEMPTY_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_TXEMPTY_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_TXEMPTY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_txempty_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_TXEMPTY_A :: INT_EVENT0_IMASK_TXEMPTY_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_txempty_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_TXEMPTY_A :: INT_EVENT0_IMASK_TXEMPTY_SET) } } # [doc = "Field `INT_EVENT0_IMASK_IDLE` reader - SPI Idle event mask."] pub type INT_EVENT0_IMASK_IDLE_R = crate :: BitReader < INT_EVENT0_IMASK_IDLE_A > ; # [doc = "SPI Idle event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_IDLE_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_IDLE_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_IDLE_SET = 1 , } impl From < INT_EVENT0_IMASK_IDLE_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_IDLE_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_IDLE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_IDLE_A { match self . bits { false => INT_EVENT0_IMASK_IDLE_A :: INT_EVENT0_IMASK_IDLE_CLR , true => INT_EVENT0_IMASK_IDLE_A :: INT_EVENT0_IMASK_IDLE_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_idle_clr (& self) -> bool { * self == INT_EVENT0_IMASK_IDLE_A :: INT_EVENT0_IMASK_IDLE_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_idle_set (& self) -> bool { * self == INT_EVENT0_IMASK_IDLE_A :: INT_EVENT0_IMASK_IDLE_SET } } # [doc = "Field `INT_EVENT0_IMASK_IDLE` writer - SPI Idle event mask."] pub type INT_EVENT0_IMASK_IDLE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_IDLE_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_IDLE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_idle_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_IDLE_A :: INT_EVENT0_IMASK_IDLE_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_idle_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_IDLE_A :: INT_EVENT0_IMASK_IDLE_SET) } } # [doc = "Field `INT_EVENT0_IMASK_DMA_DONE_RX` reader - DMA Done 1 event for RX event mask."] pub type INT_EVENT0_IMASK_DMA_DONE_RX_R = crate :: BitReader < INT_EVENT0_IMASK_DMA_DONE_RX_A > ; # [doc = "DMA Done 1 event for RX event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_DMA_DONE_RX_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_DMA_DONE_RX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_DMA_DONE_RX_SET = 1 , } impl From < INT_EVENT0_IMASK_DMA_DONE_RX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_DMA_DONE_RX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_DMA_DONE_RX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_DMA_DONE_RX_A { match self . bits { false => INT_EVENT0_IMASK_DMA_DONE_RX_A :: INT_EVENT0_IMASK_DMA_DONE_RX_CLR , true => INT_EVENT0_IMASK_DMA_DONE_RX_A :: INT_EVENT0_IMASK_DMA_DONE_RX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_dma_done_rx_clr (& self) -> bool { * self == INT_EVENT0_IMASK_DMA_DONE_RX_A :: INT_EVENT0_IMASK_DMA_DONE_RX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_dma_done_rx_set (& self) -> bool { * self == INT_EVENT0_IMASK_DMA_DONE_RX_A :: INT_EVENT0_IMASK_DMA_DONE_RX_SET } } # [doc = "Field `INT_EVENT0_IMASK_DMA_DONE_RX` writer - DMA Done 1 event for RX event mask."] pub type INT_EVENT0_IMASK_DMA_DONE_RX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_DMA_DONE_RX_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_DMA_DONE_RX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_dma_done_rx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_DMA_DONE_RX_A :: INT_EVENT0_IMASK_DMA_DONE_RX_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_dma_done_rx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_DMA_DONE_RX_A :: INT_EVENT0_IMASK_DMA_DONE_RX_SET) } } # [doc = "Field `INT_EVENT0_IMASK_DMA_DONE_TX` reader - DMA Done 1 event for TX event mask."] pub type INT_EVENT0_IMASK_DMA_DONE_TX_R = crate :: BitReader < INT_EVENT0_IMASK_DMA_DONE_TX_A > ; # [doc = "DMA Done 1 event for TX event mask.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_DMA_DONE_TX_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_DMA_DONE_TX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_DMA_DONE_TX_SET = 1 , } impl From < INT_EVENT0_IMASK_DMA_DONE_TX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_DMA_DONE_TX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_DMA_DONE_TX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_DMA_DONE_TX_A { match self . bits { false => INT_EVENT0_IMASK_DMA_DONE_TX_A :: INT_EVENT0_IMASK_DMA_DONE_TX_CLR , true => INT_EVENT0_IMASK_DMA_DONE_TX_A :: INT_EVENT0_IMASK_DMA_DONE_TX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_dma_done_tx_clr (& self) -> bool { * self == INT_EVENT0_IMASK_DMA_DONE_TX_A :: INT_EVENT0_IMASK_DMA_DONE_TX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_dma_done_tx_set (& self) -> bool { * self == INT_EVENT0_IMASK_DMA_DONE_TX_A :: INT_EVENT0_IMASK_DMA_DONE_TX_SET } } # [doc = "Field `INT_EVENT0_IMASK_DMA_DONE_TX` writer - DMA Done 1 event for TX event mask."] pub type INT_EVENT0_IMASK_DMA_DONE_TX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_DMA_DONE_TX_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_DMA_DONE_TX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_dma_done_tx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_DMA_DONE_TX_A :: INT_EVENT0_IMASK_DMA_DONE_TX_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_dma_done_tx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_DMA_DONE_TX_A :: INT_EVENT0_IMASK_DMA_DONE_TX_SET) } } # [doc = "Field `INT_EVENT0_IMASK_TXFIFO_UNF` reader - TX FIFO underflow interrupt mask"] pub type INT_EVENT0_IMASK_TXFIFO_UNF_R = crate :: BitReader < INT_EVENT0_IMASK_TXFIFO_UNF_A > ; # [doc = "TX FIFO underflow interrupt mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_TXFIFO_UNF_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_TXFIFO_UNF_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_TXFIFO_UNF_SET = 1 , } impl From < INT_EVENT0_IMASK_TXFIFO_UNF_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_TXFIFO_UNF_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_TXFIFO_UNF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_TXFIFO_UNF_A { match self . bits { false => INT_EVENT0_IMASK_TXFIFO_UNF_A :: INT_EVENT0_IMASK_TXFIFO_UNF_CLR , true => INT_EVENT0_IMASK_TXFIFO_UNF_A :: INT_EVENT0_IMASK_TXFIFO_UNF_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_txfifo_unf_clr (& self) -> bool { * self == INT_EVENT0_IMASK_TXFIFO_UNF_A :: INT_EVENT0_IMASK_TXFIFO_UNF_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_txfifo_unf_set (& self) -> bool { * self == INT_EVENT0_IMASK_TXFIFO_UNF_A :: INT_EVENT0_IMASK_TXFIFO_UNF_SET } } # [doc = "Field `INT_EVENT0_IMASK_TXFIFO_UNF` writer - TX FIFO underflow interrupt mask"] pub type INT_EVENT0_IMASK_TXFIFO_UNF_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_TXFIFO_UNF_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_TXFIFO_UNF_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_txfifo_unf_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_TXFIFO_UNF_A :: INT_EVENT0_IMASK_TXFIFO_UNF_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_txfifo_unf_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_TXFIFO_UNF_A :: INT_EVENT0_IMASK_TXFIFO_UNF_SET) } } # [doc = "Field `INT_EVENT0_IMASK_RXFULL` reader - RX FIFO Full Interrupt Mask"] pub type INT_EVENT0_IMASK_RXFULL_R = crate :: BitReader < INT_EVENT0_IMASK_RXFULL_A > ; # [doc = "RX FIFO Full Interrupt Mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_IMASK_RXFULL_A { # [doc = "0: CLR"] INT_EVENT0_IMASK_RXFULL_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_IMASK_RXFULL_SET = 1 , } impl From < INT_EVENT0_IMASK_RXFULL_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_IMASK_RXFULL_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_IMASK_RXFULL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_IMASK_RXFULL_A { match self . bits { false => INT_EVENT0_IMASK_RXFULL_A :: INT_EVENT0_IMASK_RXFULL_CLR , true => INT_EVENT0_IMASK_RXFULL_A :: INT_EVENT0_IMASK_RXFULL_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_imask_rxfull_clr (& self) -> bool { * self == INT_EVENT0_IMASK_RXFULL_A :: INT_EVENT0_IMASK_RXFULL_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_imask_rxfull_set (& self) -> bool { * self == INT_EVENT0_IMASK_RXFULL_A :: INT_EVENT0_IMASK_RXFULL_SET } } # [doc = "Field `INT_EVENT0_IMASK_RXFULL` writer - RX FIFO Full Interrupt Mask"] pub type INT_EVENT0_IMASK_RXFULL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_IMASK_RXFULL_A > ; impl < 'a , REG , const O : u8 > INT_EVENT0_IMASK_RXFULL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CLR"] # [inline (always)] pub fn int_event0_imask_rxfull_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RXFULL_A :: INT_EVENT0_IMASK_RXFULL_CLR) } # [doc = "SET"] # [inline (always)] pub fn int_event0_imask_rxfull_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_IMASK_RXFULL_A :: INT_EVENT0_IMASK_RXFULL_SET) } } impl R { # [doc = "Bit 0 - RXFIFO overflow event mask."] # [inline (always)] pub fn int_event0_imask_rxfifo_ovf (& self) -> INT_EVENT0_IMASK_RXFIFO_OVF_R { INT_EVENT0_IMASK_RXFIFO_OVF_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Parity error event mask."] # [inline (always)] pub fn int_event0_imask_per (& self) -> INT_EVENT0_IMASK_PER_R { INT_EVENT0_IMASK_PER_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Enable SPI Receive Time-Out event mask."] # [inline (always)] pub fn int_event0_imask_rtout (& self) -> INT_EVENT0_IMASK_RTOUT_R { INT_EVENT0_IMASK_RTOUT_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached"] # [inline (always)] pub fn int_event0_imask_rx (& self) -> INT_EVENT0_IMASK_RX_R { INT_EVENT0_IMASK_RX_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Transmit FIFO event mask."] # [inline (always)] pub fn int_event0_imask_tx (& self) -> INT_EVENT0_IMASK_TX_R { INT_EVENT0_IMASK_TX_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Transmit FIFO Empty event mask."] # [inline (always)] pub fn int_event0_imask_txempty (& self) -> INT_EVENT0_IMASK_TXEMPTY_R { INT_EVENT0_IMASK_TXEMPTY_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - SPI Idle event mask."] # [inline (always)] pub fn int_event0_imask_idle (& self) -> INT_EVENT0_IMASK_IDLE_R { INT_EVENT0_IMASK_IDLE_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - DMA Done 1 event for RX event mask."] # [inline (always)] pub fn int_event0_imask_dma_done_rx (& self) -> INT_EVENT0_IMASK_DMA_DONE_RX_R { INT_EVENT0_IMASK_DMA_DONE_RX_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - DMA Done 1 event for TX event mask."] # [inline (always)] pub fn int_event0_imask_dma_done_tx (& self) -> INT_EVENT0_IMASK_DMA_DONE_TX_R { INT_EVENT0_IMASK_DMA_DONE_TX_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - TX FIFO underflow interrupt mask"] # [inline (always)] pub fn int_event0_imask_txfifo_unf (& self) -> INT_EVENT0_IMASK_TXFIFO_UNF_R { INT_EVENT0_IMASK_TXFIFO_UNF_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - RX FIFO Full Interrupt Mask"] # [inline (always)] pub fn int_event0_imask_rxfull (& self) -> INT_EVENT0_IMASK_RXFULL_R { INT_EVENT0_IMASK_RXFULL_R :: new (((self . bits >> 10) & 1) != 0) } } impl W { # [doc = "Bit 0 - RXFIFO overflow event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_rxfifo_ovf (& mut self) -> INT_EVENT0_IMASK_RXFIFO_OVF_W < INT_EVENT0_IMASK_SPEC , 0 > { INT_EVENT0_IMASK_RXFIFO_OVF_W :: new (self) } # [doc = "Bit 1 - Parity error event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_per (& mut self) -> INT_EVENT0_IMASK_PER_W < INT_EVENT0_IMASK_SPEC , 1 > { INT_EVENT0_IMASK_PER_W :: new (self) } # [doc = "Bit 2 - Enable SPI Receive Time-Out event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_rtout (& mut self) -> INT_EVENT0_IMASK_RTOUT_W < INT_EVENT0_IMASK_SPEC , 2 > { INT_EVENT0_IMASK_RTOUT_W :: new (self) } # [doc = "Bit 3 - Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached"] # [inline (always)] # [must_use] pub fn int_event0_imask_rx (& mut self) -> INT_EVENT0_IMASK_RX_W < INT_EVENT0_IMASK_SPEC , 3 > { INT_EVENT0_IMASK_RX_W :: new (self) } # [doc = "Bit 4 - Transmit FIFO event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_tx (& mut self) -> INT_EVENT0_IMASK_TX_W < INT_EVENT0_IMASK_SPEC , 4 > { INT_EVENT0_IMASK_TX_W :: new (self) } # [doc = "Bit 5 - Transmit FIFO Empty event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_txempty (& mut self) -> INT_EVENT0_IMASK_TXEMPTY_W < INT_EVENT0_IMASK_SPEC , 5 > { INT_EVENT0_IMASK_TXEMPTY_W :: new (self) } # [doc = "Bit 6 - SPI Idle event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_idle (& mut self) -> INT_EVENT0_IMASK_IDLE_W < INT_EVENT0_IMASK_SPEC , 6 > { INT_EVENT0_IMASK_IDLE_W :: new (self) } # [doc = "Bit 7 - DMA Done 1 event for RX event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_dma_done_rx (& mut self) -> INT_EVENT0_IMASK_DMA_DONE_RX_W < INT_EVENT0_IMASK_SPEC , 7 > { INT_EVENT0_IMASK_DMA_DONE_RX_W :: new (self) } # [doc = "Bit 8 - DMA Done 1 event for TX event mask."] # [inline (always)] # [must_use] pub fn int_event0_imask_dma_done_tx (& mut self) -> INT_EVENT0_IMASK_DMA_DONE_TX_W < INT_EVENT0_IMASK_SPEC , 8 > { INT_EVENT0_IMASK_DMA_DONE_TX_W :: new (self) } # [doc = "Bit 9 - TX FIFO underflow interrupt mask"] # [inline (always)] # [must_use] pub fn int_event0_imask_txfifo_unf (& mut self) -> INT_EVENT0_IMASK_TXFIFO_UNF_W < INT_EVENT0_IMASK_SPEC , 9 > { INT_EVENT0_IMASK_TXFIFO_UNF_W :: new (self) } # [doc = "Bit 10 - RX FIFO Full Interrupt Mask"] # [inline (always)] # [must_use] pub fn int_event0_imask_rxfull (& mut self) -> INT_EVENT0_IMASK_RXFULL_W < INT_EVENT0_IMASK_SPEC , 10 > { INT_EVENT0_IMASK_RXFULL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_imask::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_imask::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_IMASK_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_IMASK_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_imask::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_IMASK_SPEC { } # [doc = "`write(|w| ..)` method takes [`int_event0_imask::W`](W) writer structure"] impl crate :: Writable for INT_EVENT0_IMASK_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets INT_EVENT0_IMASK to value 0"] impl crate :: Resettable for INT_EVENT0_IMASK_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }