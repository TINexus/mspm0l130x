# [doc = "Register `CLKCTL` reader"] pub type R = crate :: R < CLKCTL_SPEC > ; # [doc = "Register `CLKCTL` writer"] pub type W = crate :: W < CLKCTL_SPEC > ; # [doc = "Field `CLKCTL_SCR` reader - Serial clock divider: This is used to generate the transmit and receive bit rate of the SPI. The SPI bit rate is (SPI's functional clock frequency)/((SCR+1)*2). SCR is a value from 0-1023."] pub type CLKCTL_SCR_R = crate :: FieldReader < u16 > ; # [doc = "Field `CLKCTL_SCR` writer - Serial clock divider: This is used to generate the transmit and receive bit rate of the SPI. The SPI bit rate is (SPI's functional clock frequency)/((SCR+1)*2). SCR is a value from 0-1023."] pub type CLKCTL_SCR_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 10 , O , u16 > ; # [doc = "Field `CLKCTL_DSAMPLE` reader - Delayed sampling value. In controller mode the data on the input pin will be delayed sampled by the defined clock cycles of internal functional clock hence relaxing the setup time of input data. This setting is useful in systems where the board delays and external peripheral delays are more than the input setup time of the controller. Please refer to the datasheet for values of controller input setup time and assess what DSAMPLE value meets the requirement of the system. Note: High values of DSAMPLE can cause HOLD time violations and must be factored in the calculations."] pub type CLKCTL_DSAMPLE_R = crate :: FieldReader ; # [doc = "Field `CLKCTL_DSAMPLE` writer - Delayed sampling value. In controller mode the data on the input pin will be delayed sampled by the defined clock cycles of internal functional clock hence relaxing the setup time of input data. This setting is useful in systems where the board delays and external peripheral delays are more than the input setup time of the controller. Please refer to the datasheet for values of controller input setup time and assess what DSAMPLE value meets the requirement of the system. Note: High values of DSAMPLE can cause HOLD time violations and must be factored in the calculations."] pub type CLKCTL_DSAMPLE_W < 'a , REG , const O : u8 > = crate :: FieldWriter < 'a , REG , 4 , O > ; impl R { # [doc = "Bits 0:9 - Serial clock divider: This is used to generate the transmit and receive bit rate of the SPI. The SPI bit rate is (SPI's functional clock frequency)/((SCR+1)*2). SCR is a value from 0-1023."] # [inline (always)] pub fn clkctl_scr (& self) -> CLKCTL_SCR_R { CLKCTL_SCR_R :: new ((self . bits & 0x03ff) as u16) } # [doc = "Bits 28:31 - Delayed sampling value. In controller mode the data on the input pin will be delayed sampled by the defined clock cycles of internal functional clock hence relaxing the setup time of input data. This setting is useful in systems where the board delays and external peripheral delays are more than the input setup time of the controller. Please refer to the datasheet for values of controller input setup time and assess what DSAMPLE value meets the requirement of the system. Note: High values of DSAMPLE can cause HOLD time violations and must be factored in the calculations."] # [inline (always)] pub fn clkctl_dsample (& self) -> CLKCTL_DSAMPLE_R { CLKCTL_DSAMPLE_R :: new (((self . bits >> 28) & 0x0f) as u8) } } impl W { # [doc = "Bits 0:9 - Serial clock divider: This is used to generate the transmit and receive bit rate of the SPI. The SPI bit rate is (SPI's functional clock frequency)/((SCR+1)*2). SCR is a value from 0-1023."] # [inline (always)] # [must_use] pub fn clkctl_scr (& mut self) -> CLKCTL_SCR_W < CLKCTL_SPEC , 0 > { CLKCTL_SCR_W :: new (self) } # [doc = "Bits 28:31 - Delayed sampling value. In controller mode the data on the input pin will be delayed sampled by the defined clock cycles of internal functional clock hence relaxing the setup time of input data. This setting is useful in systems where the board delays and external peripheral delays are more than the input setup time of the controller. Please refer to the datasheet for values of controller input setup time and assess what DSAMPLE value meets the requirement of the system. Note: High values of DSAMPLE can cause HOLD time violations and must be factored in the calculations."] # [inline (always)] # [must_use] pub fn clkctl_dsample (& mut self) -> CLKCTL_DSAMPLE_W < CLKCTL_SPEC , 28 > { CLKCTL_DSAMPLE_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Clock prescaler and divider register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clkctl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clkctl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CLKCTL_SPEC ; impl crate :: RegisterSpec for CLKCTL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`clkctl::R`](R) reader structure"] impl crate :: Readable for CLKCTL_SPEC { } # [doc = "`write(|w| ..)` method takes [`clkctl::W`](W) writer structure"] impl crate :: Writable for CLKCTL_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CLKCTL to value 0"] impl crate :: Resettable for CLKCTL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }