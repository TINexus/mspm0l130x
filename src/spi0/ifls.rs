# [doc = "Register `IFLS` reader"] pub type R = crate :: R < IFLS_SPEC > ; # [doc = "Register `IFLS` writer"] pub type W = crate :: W < IFLS_SPEC > ; # [doc = "Field `IFLS_TXIFLSEL` reader - SPI Transmit Interrupt FIFO Level Select The trigger points for the transmit interrupt are as follows:"] pub type IFLS_TXIFLSEL_R = crate :: FieldReader < IFLS_TXIFLSEL_A > ; # [doc = "SPI Transmit Interrupt FIFO Level Select The trigger points for the transmit interrupt are as follows:\n\nValue on reset: 2"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum IFLS_TXIFLSEL_A { # [doc = "0: LVL_OFF"] IFLS_TXIFLSEL_LVL_OFF = 0 , # [doc = "1: LVL_3_4"] IFLS_TXIFLSEL_LVL_3_4 = 1 , # [doc = "2: LVL_1_2"] IFLS_TXIFLSEL_LVL_1_2 = 2 , # [doc = "3: LVL_1_4"] IFLS_TXIFLSEL_LVL_1_4 = 3 , # [doc = "4: LVL_RES4"] IFLS_TXIFLSEL_LVL_RES4 = 4 , # [doc = "5: LVL_EMPTY"] IFLS_TXIFLSEL_LVL_EMPTY = 5 , # [doc = "6: LVL_RES6"] IFLS_TXIFLSEL_LVL_RES6 = 6 , # [doc = "7: LEVEL_1"] IFLS_TXIFLSEL_LEVEL_1 = 7 , } impl From < IFLS_TXIFLSEL_A > for u8 { # [inline (always)] fn from (variant : IFLS_TXIFLSEL_A) -> Self { variant as _ } } impl crate :: FieldSpec for IFLS_TXIFLSEL_A { type Ux = u8 ; } impl IFLS_TXIFLSEL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IFLS_TXIFLSEL_A { match self . bits { 0 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_OFF , 1 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_3_4 , 2 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_1_2 , 3 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_1_4 , 4 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_RES4 , 5 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_EMPTY , 6 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_RES6 , 7 => IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LEVEL_1 , _ => unreachable ! () , } } # [doc = "LVL_OFF"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_off (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_OFF } # [doc = "LVL_3_4"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_3_4 (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_3_4 } # [doc = "LVL_1_2"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_1_2 (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_1_2 } # [doc = "LVL_1_4"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_1_4 (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_1_4 } # [doc = "LVL_RES4"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_res4 (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_RES4 } # [doc = "LVL_EMPTY"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_empty (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_EMPTY } # [doc = "LVL_RES6"] # [inline (always)] pub fn is_ifls_txiflsel_lvl_res6 (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_RES6 } # [doc = "LEVEL_1"] # [inline (always)] pub fn is_ifls_txiflsel_level_1 (& self) -> bool { * self == IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LEVEL_1 } } # [doc = "Field `IFLS_TXIFLSEL` writer - SPI Transmit Interrupt FIFO Level Select The trigger points for the transmit interrupt are as follows:"] pub type IFLS_TXIFLSEL_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , IFLS_TXIFLSEL_A > ; impl < 'a , REG , const O : u8 > IFLS_TXIFLSEL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "LVL_OFF"] # [inline (always)] pub fn ifls_txiflsel_lvl_off (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_OFF) } # [doc = "LVL_3_4"] # [inline (always)] pub fn ifls_txiflsel_lvl_3_4 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_3_4) } # [doc = "LVL_1_2"] # [inline (always)] pub fn ifls_txiflsel_lvl_1_2 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_1_2) } # [doc = "LVL_1_4"] # [inline (always)] pub fn ifls_txiflsel_lvl_1_4 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_1_4) } # [doc = "LVL_RES4"] # [inline (always)] pub fn ifls_txiflsel_lvl_res4 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_RES4) } # [doc = "LVL_EMPTY"] # [inline (always)] pub fn ifls_txiflsel_lvl_empty (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_EMPTY) } # [doc = "LVL_RES6"] # [inline (always)] pub fn ifls_txiflsel_lvl_res6 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LVL_RES6) } # [doc = "LEVEL_1"] # [inline (always)] pub fn ifls_txiflsel_level_1 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_TXIFLSEL_A :: IFLS_TXIFLSEL_LEVEL_1) } } # [doc = "Field `IFLS_RXIFLSEL` reader - SPI Receive Interrupt FIFO Level Select The trigger points for the receive interrupt are as follows:"] pub type IFLS_RXIFLSEL_R = crate :: FieldReader < IFLS_RXIFLSEL_A > ; # [doc = "SPI Receive Interrupt FIFO Level Select The trigger points for the receive interrupt are as follows:\n\nValue on reset: 2"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum IFLS_RXIFLSEL_A { # [doc = "0: LVL_OFF"] IFLS_RXIFLSEL_LVL_OFF = 0 , # [doc = "1: LVL_1_4"] IFLS_RXIFLSEL_LVL_1_4 = 1 , # [doc = "2: LVL_1_2"] IFLS_RXIFLSEL_LVL_1_2 = 2 , # [doc = "3: LVL_3_4"] IFLS_RXIFLSEL_LVL_3_4 = 3 , # [doc = "4: LVL_RES4"] IFLS_RXIFLSEL_LVL_RES4 = 4 , # [doc = "5: LVL_FULL"] IFLS_RXIFLSEL_LVL_FULL = 5 , # [doc = "6: LVL_RES6"] IFLS_RXIFLSEL_LVL_RES6 = 6 , # [doc = "7: LEVEL_1"] IFLS_RXIFLSEL_LEVEL_1 = 7 , } impl From < IFLS_RXIFLSEL_A > for u8 { # [inline (always)] fn from (variant : IFLS_RXIFLSEL_A) -> Self { variant as _ } } impl crate :: FieldSpec for IFLS_RXIFLSEL_A { type Ux = u8 ; } impl IFLS_RXIFLSEL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> IFLS_RXIFLSEL_A { match self . bits { 0 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_OFF , 1 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_1_4 , 2 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_1_2 , 3 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_3_4 , 4 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_RES4 , 5 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_FULL , 6 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_RES6 , 7 => IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LEVEL_1 , _ => unreachable ! () , } } # [doc = "LVL_OFF"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_off (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_OFF } # [doc = "LVL_1_4"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_1_4 (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_1_4 } # [doc = "LVL_1_2"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_1_2 (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_1_2 } # [doc = "LVL_3_4"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_3_4 (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_3_4 } # [doc = "LVL_RES4"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_res4 (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_RES4 } # [doc = "LVL_FULL"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_full (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_FULL } # [doc = "LVL_RES6"] # [inline (always)] pub fn is_ifls_rxiflsel_lvl_res6 (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_RES6 } # [doc = "LEVEL_1"] # [inline (always)] pub fn is_ifls_rxiflsel_level_1 (& self) -> bool { * self == IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LEVEL_1 } } # [doc = "Field `IFLS_RXIFLSEL` writer - SPI Receive Interrupt FIFO Level Select The trigger points for the receive interrupt are as follows:"] pub type IFLS_RXIFLSEL_W < 'a , REG , const O : u8 > = crate :: FieldWriterSafe < 'a , REG , 3 , O , IFLS_RXIFLSEL_A > ; impl < 'a , REG , const O : u8 > IFLS_RXIFLSEL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "LVL_OFF"] # [inline (always)] pub fn ifls_rxiflsel_lvl_off (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_OFF) } # [doc = "LVL_1_4"] # [inline (always)] pub fn ifls_rxiflsel_lvl_1_4 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_1_4) } # [doc = "LVL_1_2"] # [inline (always)] pub fn ifls_rxiflsel_lvl_1_2 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_1_2) } # [doc = "LVL_3_4"] # [inline (always)] pub fn ifls_rxiflsel_lvl_3_4 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_3_4) } # [doc = "LVL_RES4"] # [inline (always)] pub fn ifls_rxiflsel_lvl_res4 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_RES4) } # [doc = "LVL_FULL"] # [inline (always)] pub fn ifls_rxiflsel_lvl_full (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_FULL) } # [doc = "LVL_RES6"] # [inline (always)] pub fn ifls_rxiflsel_lvl_res6 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LVL_RES6) } # [doc = "LEVEL_1"] # [inline (always)] pub fn ifls_rxiflsel_level_1 (self) -> & 'a mut crate :: W < REG > { self . variant (IFLS_RXIFLSEL_A :: IFLS_RXIFLSEL_LEVEL_1) } } impl R { # [doc = "Bits 0:2 - SPI Transmit Interrupt FIFO Level Select The trigger points for the transmit interrupt are as follows:"] # [inline (always)] pub fn ifls_txiflsel (& self) -> IFLS_TXIFLSEL_R { IFLS_TXIFLSEL_R :: new ((self . bits & 7) as u8) } # [doc = "Bits 3:5 - SPI Receive Interrupt FIFO Level Select The trigger points for the receive interrupt are as follows:"] # [inline (always)] pub fn ifls_rxiflsel (& self) -> IFLS_RXIFLSEL_R { IFLS_RXIFLSEL_R :: new (((self . bits >> 3) & 7) as u8) } } impl W { # [doc = "Bits 0:2 - SPI Transmit Interrupt FIFO Level Select The trigger points for the transmit interrupt are as follows:"] # [inline (always)] # [must_use] pub fn ifls_txiflsel (& mut self) -> IFLS_TXIFLSEL_W < IFLS_SPEC , 0 > { IFLS_TXIFLSEL_W :: new (self) } # [doc = "Bits 3:5 - SPI Receive Interrupt FIFO Level Select The trigger points for the receive interrupt are as follows:"] # [inline (always)] # [must_use] pub fn ifls_rxiflsel (& mut self) -> IFLS_RXIFLSEL_W < IFLS_SPEC , 3 > { IFLS_RXIFLSEL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "UART Interrupt FIFO Level Select Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ifls::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ifls::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IFLS_SPEC ; impl crate :: RegisterSpec for IFLS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`ifls::R`](R) reader structure"] impl crate :: Readable for IFLS_SPEC { } # [doc = "`write(|w| ..)` method takes [`ifls::W`](W) writer structure"] impl crate :: Writable for IFLS_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets IFLS to value 0x12"] impl crate :: Resettable for IFLS_SPEC { const RESET_VALUE : Self :: Ux = 0x12 ; }