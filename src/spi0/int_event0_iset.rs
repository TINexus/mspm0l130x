# [doc = "Register `INT_EVENT0_ISET` writer"] pub type W = crate :: W < INT_EVENT0_ISET_SPEC > ; # [doc = "Set RXFIFO overflow event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_RXFIFO_OVF_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_RXFIFO_OVF_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_RXFIFO_OVF_SET = 1 , } impl From < INT_EVENT0_ISET_RXFIFO_OVF_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_RXFIFO_OVF_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_RXFIFO_OVF` writer - Set RXFIFO overflow event."] pub type INT_EVENT0_ISET_RXFIFO_OVF_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_RXFIFO_OVF_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_RXFIFO_OVF_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_rxfifo_ovf_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RXFIFO_OVF_AW :: INT_EVENT0_ISET_RXFIFO_OVF_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_rxfifo_ovf_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RXFIFO_OVF_AW :: INT_EVENT0_ISET_RXFIFO_OVF_SET) } } # [doc = "Set Parity error event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_PER_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_PER_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_PER_SET = 1 , } impl From < INT_EVENT0_ISET_PER_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_PER_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_PER` writer - Set Parity error event."] pub type INT_EVENT0_ISET_PER_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_PER_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_PER_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_per_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_PER_AW :: INT_EVENT0_ISET_PER_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_per_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_PER_AW :: INT_EVENT0_ISET_PER_SET) } } # [doc = "Set SPI Receive Time-Out Event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_RTOUT_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_RTOUT_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_RTOUT_SET = 1 , } impl From < INT_EVENT0_ISET_RTOUT_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_RTOUT_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_RTOUT` writer - Set SPI Receive Time-Out Event."] pub type INT_EVENT0_ISET_RTOUT_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_RTOUT_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_RTOUT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_rtout_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RTOUT_AW :: INT_EVENT0_ISET_RTOUT_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_rtout_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RTOUT_AW :: INT_EVENT0_ISET_RTOUT_SET) } } # [doc = "Set Receive FIFO event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_RX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_RX_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_RX_SET = 1 , } impl From < INT_EVENT0_ISET_RX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_RX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_RX` writer - Set Receive FIFO event."] pub type INT_EVENT0_ISET_RX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_RX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_RX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_rx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RX_AW :: INT_EVENT0_ISET_RX_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_rx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RX_AW :: INT_EVENT0_ISET_RX_SET) } } # [doc = "Set Transmit FIFO event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_TX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_TX_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_TX_SET = 1 , } impl From < INT_EVENT0_ISET_TX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_TX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_TX` writer - Set Transmit FIFO event."] pub type INT_EVENT0_ISET_TX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_TX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_TX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_tx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_TX_AW :: INT_EVENT0_ISET_TX_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_tx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_TX_AW :: INT_EVENT0_ISET_TX_SET) } } # [doc = "Set Transmit FIFO Empty event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_TXEMPTY_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_TXEMPTY_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_TXEMPTY_SET = 1 , } impl From < INT_EVENT0_ISET_TXEMPTY_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_TXEMPTY_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_TXEMPTY` writer - Set Transmit FIFO Empty event."] pub type INT_EVENT0_ISET_TXEMPTY_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_TXEMPTY_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_TXEMPTY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_txempty_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_TXEMPTY_AW :: INT_EVENT0_ISET_TXEMPTY_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_txempty_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_TXEMPTY_AW :: INT_EVENT0_ISET_TXEMPTY_SET) } } # [doc = "Set SPI IDLE mode event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_IDLE_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_IDLE_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_IDLE_SET = 1 , } impl From < INT_EVENT0_ISET_IDLE_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_IDLE_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_IDLE` writer - Set SPI IDLE mode event."] pub type INT_EVENT0_ISET_IDLE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_IDLE_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_IDLE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_idle_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_IDLE_AW :: INT_EVENT0_ISET_IDLE_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_idle_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_IDLE_AW :: INT_EVENT0_ISET_IDLE_SET) } } # [doc = "Set DMA Done 1 event for RX.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_DMA_DONE_RX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_DMA_DONE_RX_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_DMA_DONE_RX_SET = 1 , } impl From < INT_EVENT0_ISET_DMA_DONE_RX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_DMA_DONE_RX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_DMA_DONE_RX` writer - Set DMA Done 1 event for RX."] pub type INT_EVENT0_ISET_DMA_DONE_RX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_DMA_DONE_RX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_DMA_DONE_RX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_dma_done_rx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_DMA_DONE_RX_AW :: INT_EVENT0_ISET_DMA_DONE_RX_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_dma_done_rx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_DMA_DONE_RX_AW :: INT_EVENT0_ISET_DMA_DONE_RX_SET) } } # [doc = "Set DMA Done 1 event for TX.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_DMA_DONE_TX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_DMA_DONE_TX_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_DMA_DONE_TX_SET = 1 , } impl From < INT_EVENT0_ISET_DMA_DONE_TX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_DMA_DONE_TX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_DMA_DONE_TX` writer - Set DMA Done 1 event for TX."] pub type INT_EVENT0_ISET_DMA_DONE_TX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_DMA_DONE_TX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_DMA_DONE_TX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_dma_done_tx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_DMA_DONE_TX_AW :: INT_EVENT0_ISET_DMA_DONE_TX_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_dma_done_tx_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_DMA_DONE_TX_AW :: INT_EVENT0_ISET_DMA_DONE_TX_SET) } } # [doc = "Set TX FIFO Underflow Event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_TXFIFO_UNF_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_TXFIFO_UNF_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_TXFIFO_UNF_SET = 1 , } impl From < INT_EVENT0_ISET_TXFIFO_UNF_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_TXFIFO_UNF_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_TXFIFO_UNF` writer - Set TX FIFO Underflow Event"] pub type INT_EVENT0_ISET_TXFIFO_UNF_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_TXFIFO_UNF_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_TXFIFO_UNF_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_txfifo_unf_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_TXFIFO_UNF_AW :: INT_EVENT0_ISET_TXFIFO_UNF_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_txfifo_unf_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_TXFIFO_UNF_AW :: INT_EVENT0_ISET_TXFIFO_UNF_SET) } } # [doc = "Set RX FIFO Full Event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ISET_RXFULL_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ISET_RXFULL_NO_EFFECT = 0 , # [doc = "1: SET"] INT_EVENT0_ISET_RXFULL_SET = 1 , } impl From < INT_EVENT0_ISET_RXFULL_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ISET_RXFULL_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ISET_RXFULL` writer - Set RX FIFO Full Event"] pub type INT_EVENT0_ISET_RXFULL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ISET_RXFULL_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ISET_RXFULL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iset_rxfull_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RXFULL_AW :: INT_EVENT0_ISET_RXFULL_NO_EFFECT) } # [doc = "SET"] # [inline (always)] pub fn int_event0_iset_rxfull_set (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ISET_RXFULL_AW :: INT_EVENT0_ISET_RXFULL_SET) } } impl W { # [doc = "Bit 0 - Set RXFIFO overflow event."] # [inline (always)] # [must_use] pub fn int_event0_iset_rxfifo_ovf (& mut self) -> INT_EVENT0_ISET_RXFIFO_OVF_W < INT_EVENT0_ISET_SPEC , 0 > { INT_EVENT0_ISET_RXFIFO_OVF_W :: new (self) } # [doc = "Bit 1 - Set Parity error event."] # [inline (always)] # [must_use] pub fn int_event0_iset_per (& mut self) -> INT_EVENT0_ISET_PER_W < INT_EVENT0_ISET_SPEC , 1 > { INT_EVENT0_ISET_PER_W :: new (self) } # [doc = "Bit 2 - Set SPI Receive Time-Out Event."] # [inline (always)] # [must_use] pub fn int_event0_iset_rtout (& mut self) -> INT_EVENT0_ISET_RTOUT_W < INT_EVENT0_ISET_SPEC , 2 > { INT_EVENT0_ISET_RTOUT_W :: new (self) } # [doc = "Bit 3 - Set Receive FIFO event."] # [inline (always)] # [must_use] pub fn int_event0_iset_rx (& mut self) -> INT_EVENT0_ISET_RX_W < INT_EVENT0_ISET_SPEC , 3 > { INT_EVENT0_ISET_RX_W :: new (self) } # [doc = "Bit 4 - Set Transmit FIFO event."] # [inline (always)] # [must_use] pub fn int_event0_iset_tx (& mut self) -> INT_EVENT0_ISET_TX_W < INT_EVENT0_ISET_SPEC , 4 > { INT_EVENT0_ISET_TX_W :: new (self) } # [doc = "Bit 5 - Set Transmit FIFO Empty event."] # [inline (always)] # [must_use] pub fn int_event0_iset_txempty (& mut self) -> INT_EVENT0_ISET_TXEMPTY_W < INT_EVENT0_ISET_SPEC , 5 > { INT_EVENT0_ISET_TXEMPTY_W :: new (self) } # [doc = "Bit 6 - Set SPI IDLE mode event."] # [inline (always)] # [must_use] pub fn int_event0_iset_idle (& mut self) -> INT_EVENT0_ISET_IDLE_W < INT_EVENT0_ISET_SPEC , 6 > { INT_EVENT0_ISET_IDLE_W :: new (self) } # [doc = "Bit 7 - Set DMA Done 1 event for RX."] # [inline (always)] # [must_use] pub fn int_event0_iset_dma_done_rx (& mut self) -> INT_EVENT0_ISET_DMA_DONE_RX_W < INT_EVENT0_ISET_SPEC , 7 > { INT_EVENT0_ISET_DMA_DONE_RX_W :: new (self) } # [doc = "Bit 8 - Set DMA Done 1 event for TX."] # [inline (always)] # [must_use] pub fn int_event0_iset_dma_done_tx (& mut self) -> INT_EVENT0_ISET_DMA_DONE_TX_W < INT_EVENT0_ISET_SPEC , 8 > { INT_EVENT0_ISET_DMA_DONE_TX_W :: new (self) } # [doc = "Bit 9 - Set TX FIFO Underflow Event"] # [inline (always)] # [must_use] pub fn int_event0_iset_txfifo_unf (& mut self) -> INT_EVENT0_ISET_TXFIFO_UNF_W < INT_EVENT0_ISET_SPEC , 9 > { INT_EVENT0_ISET_TXFIFO_UNF_W :: new (self) } # [doc = "Bit 10 - Set RX FIFO Full Event"] # [inline (always)] # [must_use] pub fn int_event0_iset_rxfull (& mut self) -> INT_EVENT0_ISET_RXFULL_W < INT_EVENT0_ISET_SPEC , 10 > { INT_EVENT0_ISET_RXFULL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iset::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_ISET_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_ISET_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`int_event0_iset::W`](W) writer structure"] impl crate :: Writable for INT_EVENT0_ISET_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets INT_EVENT0_ISET to value 0"] impl crate :: Resettable for INT_EVENT0_ISET_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }