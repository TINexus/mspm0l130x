# [doc = "Register `RXDATA` reader"] pub type R = crate :: R < RXDATA_SPEC > ; # [doc = "Field `RXDATA_DATA` reader - Received Data When PACKEN=1,two entries of the FIFO are returned as a 32-bit value. When PACKEN=0, 1 entry of FIFO is returned as 16-bit value. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. Received data less than 16 bits is automatically right justified in the receive buffer."] pub type RXDATA_DATA_R = crate :: FieldReader < u16 > ; impl R { # [doc = "Bits 0:15 - Received Data When PACKEN=1,two entries of the FIFO are returned as a 32-bit value. When PACKEN=0, 1 entry of FIFO is returned as 16-bit value. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. Received data less than 16 bits is automatically right justified in the receive buffer."] # [inline (always)] pub fn rxdata_data (& self) -> RXDATA_DATA_R { RXDATA_DATA_R :: new ((self . bits & 0xffff) as u16) } } # [doc = "RXDATA Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdata::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RXDATA_SPEC ; impl crate :: RegisterSpec for RXDATA_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`rxdata::R`](R) reader structure"] impl crate :: Readable for RXDATA_SPEC { } # [doc = "`reset()` method sets RXDATA to value 0"] impl crate :: Resettable for RXDATA_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }