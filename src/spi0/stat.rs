# [doc = "Register `STAT` reader"] pub type R = crate :: R < STAT_SPEC > ; # [doc = "Field `STAT_TFE` reader - Transmit FIFO empty."] pub type STAT_TFE_R = crate :: BitReader < STAT_TFE_A > ; # [doc = "Transmit FIFO empty.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_TFE_A { # [doc = "0: NOT_EMPTY"] STAT_TFE_NOT_EMPTY = 0 , # [doc = "1: EMPTY"] STAT_TFE_EMPTY = 1 , } impl From < STAT_TFE_A > for bool { # [inline (always)] fn from (variant : STAT_TFE_A) -> Self { variant as u8 != 0 } } impl STAT_TFE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_TFE_A { match self . bits { false => STAT_TFE_A :: STAT_TFE_NOT_EMPTY , true => STAT_TFE_A :: STAT_TFE_EMPTY , } } # [doc = "NOT_EMPTY"] # [inline (always)] pub fn is_stat_tfe_not_empty (& self) -> bool { * self == STAT_TFE_A :: STAT_TFE_NOT_EMPTY } # [doc = "EMPTY"] # [inline (always)] pub fn is_stat_tfe_empty (& self) -> bool { * self == STAT_TFE_A :: STAT_TFE_EMPTY } } # [doc = "Field `STAT_TNF` reader - Transmit FIFO not full"] pub type STAT_TNF_R = crate :: BitReader < STAT_TNF_A > ; # [doc = "Transmit FIFO not full\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_TNF_A { # [doc = "0: FULL"] STAT_TNF_FULL = 0 , # [doc = "1: NOT_FULL"] STAT_TNF_NOT_FULL = 1 , } impl From < STAT_TNF_A > for bool { # [inline (always)] fn from (variant : STAT_TNF_A) -> Self { variant as u8 != 0 } } impl STAT_TNF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_TNF_A { match self . bits { false => STAT_TNF_A :: STAT_TNF_FULL , true => STAT_TNF_A :: STAT_TNF_NOT_FULL , } } # [doc = "FULL"] # [inline (always)] pub fn is_stat_tnf_full (& self) -> bool { * self == STAT_TNF_A :: STAT_TNF_FULL } # [doc = "NOT_FULL"] # [inline (always)] pub fn is_stat_tnf_not_full (& self) -> bool { * self == STAT_TNF_A :: STAT_TNF_NOT_FULL } } # [doc = "Field `STAT_RFE` reader - Receive FIFO empty."] pub type STAT_RFE_R = crate :: BitReader < STAT_RFE_A > ; # [doc = "Receive FIFO empty.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_RFE_A { # [doc = "0: NOT_EMPTY"] STAT_RFE_NOT_EMPTY = 0 , # [doc = "1: EMPTY"] STAT_RFE_EMPTY = 1 , } impl From < STAT_RFE_A > for bool { # [inline (always)] fn from (variant : STAT_RFE_A) -> Self { variant as u8 != 0 } } impl STAT_RFE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_RFE_A { match self . bits { false => STAT_RFE_A :: STAT_RFE_NOT_EMPTY , true => STAT_RFE_A :: STAT_RFE_EMPTY , } } # [doc = "NOT_EMPTY"] # [inline (always)] pub fn is_stat_rfe_not_empty (& self) -> bool { * self == STAT_RFE_A :: STAT_RFE_NOT_EMPTY } # [doc = "EMPTY"] # [inline (always)] pub fn is_stat_rfe_empty (& self) -> bool { * self == STAT_RFE_A :: STAT_RFE_EMPTY } } # [doc = "Field `STAT_RNF` reader - Receive FIFO not full"] pub type STAT_RNF_R = crate :: BitReader < STAT_RNF_A > ; # [doc = "Receive FIFO not full\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_RNF_A { # [doc = "0: FULL"] STAT_RNF_FULL = 0 , # [doc = "1: NOT_FULL"] STAT_RNF_NOT_FULL = 1 , } impl From < STAT_RNF_A > for bool { # [inline (always)] fn from (variant : STAT_RNF_A) -> Self { variant as u8 != 0 } } impl STAT_RNF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_RNF_A { match self . bits { false => STAT_RNF_A :: STAT_RNF_FULL , true => STAT_RNF_A :: STAT_RNF_NOT_FULL , } } # [doc = "FULL"] # [inline (always)] pub fn is_stat_rnf_full (& self) -> bool { * self == STAT_RNF_A :: STAT_RNF_FULL } # [doc = "NOT_FULL"] # [inline (always)] pub fn is_stat_rnf_not_full (& self) -> bool { * self == STAT_RNF_A :: STAT_RNF_NOT_FULL } } # [doc = "Field `STAT_BUSY` reader - Busy"] pub type STAT_BUSY_R = crate :: BitReader < STAT_BUSY_A > ; # [doc = "Busy\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum STAT_BUSY_A { # [doc = "0: IDLE"] STAT_BUSY_IDLE = 0 , # [doc = "1: ACTIVE"] STAT_BUSY_ACTIVE = 1 , } impl From < STAT_BUSY_A > for bool { # [inline (always)] fn from (variant : STAT_BUSY_A) -> Self { variant as u8 != 0 } } impl STAT_BUSY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> STAT_BUSY_A { match self . bits { false => STAT_BUSY_A :: STAT_BUSY_IDLE , true => STAT_BUSY_A :: STAT_BUSY_ACTIVE , } } # [doc = "IDLE"] # [inline (always)] pub fn is_stat_busy_idle (& self) -> bool { * self == STAT_BUSY_A :: STAT_BUSY_IDLE } # [doc = "ACTIVE"] # [inline (always)] pub fn is_stat_busy_active (& self) -> bool { * self == STAT_BUSY_A :: STAT_BUSY_ACTIVE } } impl R { # [doc = "Bit 0 - Transmit FIFO empty."] # [inline (always)] pub fn stat_tfe (& self) -> STAT_TFE_R { STAT_TFE_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Transmit FIFO not full"] # [inline (always)] pub fn stat_tnf (& self) -> STAT_TNF_R { STAT_TNF_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Receive FIFO empty."] # [inline (always)] pub fn stat_rfe (& self) -> STAT_RFE_R { STAT_RFE_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Receive FIFO not full"] # [inline (always)] pub fn stat_rnf (& self) -> STAT_RNF_R { STAT_RNF_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Busy"] # [inline (always)] pub fn stat_busy (& self) -> STAT_BUSY_R { STAT_BUSY_R :: new (((self . bits >> 4) & 1) != 0) } } # [doc = "Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`stat::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct STAT_SPEC ; impl crate :: RegisterSpec for STAT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`stat::R`](R) reader structure"] impl crate :: Readable for STAT_SPEC { } # [doc = "`reset()` method sets STAT to value 0"] impl crate :: Resettable for STAT_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }