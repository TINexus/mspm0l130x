# [doc = "Register `INT_EVENT0_RIS` reader"] pub type R = crate :: R < INT_EVENT0_RIS_SPEC > ; # [doc = "Field `INT_EVENT0_RIS_RXFIFO_OVF` reader - RXFIFO overflow event. This interrupt is set if an RX FIFO overflow has been detected."] pub type INT_EVENT0_RIS_RXFIFO_OVF_R = crate :: BitReader < INT_EVENT0_RIS_RXFIFO_OVF_A > ; # [doc = "RXFIFO overflow event. This interrupt is set if an RX FIFO overflow has been detected.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_RXFIFO_OVF_A { # [doc = "0: CLR"] INT_EVENT0_RIS_RXFIFO_OVF_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_RXFIFO_OVF_SET = 1 , } impl From < INT_EVENT0_RIS_RXFIFO_OVF_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_RXFIFO_OVF_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_RXFIFO_OVF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_RXFIFO_OVF_A { match self . bits { false => INT_EVENT0_RIS_RXFIFO_OVF_A :: INT_EVENT0_RIS_RXFIFO_OVF_CLR , true => INT_EVENT0_RIS_RXFIFO_OVF_A :: INT_EVENT0_RIS_RXFIFO_OVF_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_rxfifo_ovf_clr (& self) -> bool { * self == INT_EVENT0_RIS_RXFIFO_OVF_A :: INT_EVENT0_RIS_RXFIFO_OVF_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_rxfifo_ovf_set (& self) -> bool { * self == INT_EVENT0_RIS_RXFIFO_OVF_A :: INT_EVENT0_RIS_RXFIFO_OVF_SET } } # [doc = "Field `INT_EVENT0_RIS_PER` reader - Parity error event: this bit is set if a Parity error has been detected"] pub type INT_EVENT0_RIS_PER_R = crate :: BitReader < INT_EVENT0_RIS_PER_A > ; # [doc = "Parity error event: this bit is set if a Parity error has been detected\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_PER_A { # [doc = "0: CLR"] INT_EVENT0_RIS_PER_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_PER_SET = 1 , } impl From < INT_EVENT0_RIS_PER_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_PER_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_PER_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_PER_A { match self . bits { false => INT_EVENT0_RIS_PER_A :: INT_EVENT0_RIS_PER_CLR , true => INT_EVENT0_RIS_PER_A :: INT_EVENT0_RIS_PER_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_per_clr (& self) -> bool { * self == INT_EVENT0_RIS_PER_A :: INT_EVENT0_RIS_PER_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_per_set (& self) -> bool { * self == INT_EVENT0_RIS_PER_A :: INT_EVENT0_RIS_PER_SET } } # [doc = "Field `INT_EVENT0_RIS_RTOUT` reader - SPI Receive Time-Out event."] pub type INT_EVENT0_RIS_RTOUT_R = crate :: BitReader < INT_EVENT0_RIS_RTOUT_A > ; # [doc = "SPI Receive Time-Out event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_RTOUT_A { # [doc = "0: CLR"] INT_EVENT0_RIS_RTOUT_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_RTOUT_SET = 1 , } impl From < INT_EVENT0_RIS_RTOUT_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_RTOUT_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_RTOUT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_RTOUT_A { match self . bits { false => INT_EVENT0_RIS_RTOUT_A :: INT_EVENT0_RIS_RTOUT_CLR , true => INT_EVENT0_RIS_RTOUT_A :: INT_EVENT0_RIS_RTOUT_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_rtout_clr (& self) -> bool { * self == INT_EVENT0_RIS_RTOUT_A :: INT_EVENT0_RIS_RTOUT_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_rtout_set (& self) -> bool { * self == INT_EVENT0_RIS_RTOUT_A :: INT_EVENT0_RIS_RTOUT_SET } } # [doc = "Field `INT_EVENT0_RIS_RX` reader - Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached"] pub type INT_EVENT0_RIS_RX_R = crate :: BitReader < INT_EVENT0_RIS_RX_A > ; # [doc = "Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_RX_A { # [doc = "0: CLR"] INT_EVENT0_RIS_RX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_RX_SET = 1 , } impl From < INT_EVENT0_RIS_RX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_RX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_RX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_RX_A { match self . bits { false => INT_EVENT0_RIS_RX_A :: INT_EVENT0_RIS_RX_CLR , true => INT_EVENT0_RIS_RX_A :: INT_EVENT0_RIS_RX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_rx_clr (& self) -> bool { * self == INT_EVENT0_RIS_RX_A :: INT_EVENT0_RIS_RX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_rx_set (& self) -> bool { * self == INT_EVENT0_RIS_RX_A :: INT_EVENT0_RIS_RX_SET } } # [doc = "Field `INT_EVENT0_RIS_TX` reader - Transmit FIFO event..This interrupt is set if the selected Transmit FIFO level has been reached."] pub type INT_EVENT0_RIS_TX_R = crate :: BitReader < INT_EVENT0_RIS_TX_A > ; # [doc = "Transmit FIFO event..This interrupt is set if the selected Transmit FIFO level has been reached.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_TX_A { # [doc = "0: CLR"] INT_EVENT0_RIS_TX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_TX_SET = 1 , } impl From < INT_EVENT0_RIS_TX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_TX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_TX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_TX_A { match self . bits { false => INT_EVENT0_RIS_TX_A :: INT_EVENT0_RIS_TX_CLR , true => INT_EVENT0_RIS_TX_A :: INT_EVENT0_RIS_TX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_tx_clr (& self) -> bool { * self == INT_EVENT0_RIS_TX_A :: INT_EVENT0_RIS_TX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_tx_set (& self) -> bool { * self == INT_EVENT0_RIS_TX_A :: INT_EVENT0_RIS_TX_SET } } # [doc = "Field `INT_EVENT0_RIS_TXEMPTY` reader - Transmit FIFO Empty interrupt mask. This interrupt is set if all data in the Transmit FIFO have been move to the shift register."] pub type INT_EVENT0_RIS_TXEMPTY_R = crate :: BitReader < INT_EVENT0_RIS_TXEMPTY_A > ; # [doc = "Transmit FIFO Empty interrupt mask. This interrupt is set if all data in the Transmit FIFO have been move to the shift register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_TXEMPTY_A { # [doc = "0: CLR"] INT_EVENT0_RIS_TXEMPTY_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_TXEMPTY_SET = 1 , } impl From < INT_EVENT0_RIS_TXEMPTY_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_TXEMPTY_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_TXEMPTY_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_TXEMPTY_A { match self . bits { false => INT_EVENT0_RIS_TXEMPTY_A :: INT_EVENT0_RIS_TXEMPTY_CLR , true => INT_EVENT0_RIS_TXEMPTY_A :: INT_EVENT0_RIS_TXEMPTY_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_txempty_clr (& self) -> bool { * self == INT_EVENT0_RIS_TXEMPTY_A :: INT_EVENT0_RIS_TXEMPTY_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_txempty_set (& self) -> bool { * self == INT_EVENT0_RIS_TXEMPTY_A :: INT_EVENT0_RIS_TXEMPTY_SET } } # [doc = "Field `INT_EVENT0_RIS_IDLE` reader - SPI has done finished transfers and changed into IDLE mode. This bit is set when BUSY goes low."] pub type INT_EVENT0_RIS_IDLE_R = crate :: BitReader < INT_EVENT0_RIS_IDLE_A > ; # [doc = "SPI has done finished transfers and changed into IDLE mode. This bit is set when BUSY goes low.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_IDLE_A { # [doc = "0: CLR"] INT_EVENT0_RIS_IDLE_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_IDLE_SET = 1 , } impl From < INT_EVENT0_RIS_IDLE_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_IDLE_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_IDLE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_IDLE_A { match self . bits { false => INT_EVENT0_RIS_IDLE_A :: INT_EVENT0_RIS_IDLE_CLR , true => INT_EVENT0_RIS_IDLE_A :: INT_EVENT0_RIS_IDLE_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_idle_clr (& self) -> bool { * self == INT_EVENT0_RIS_IDLE_A :: INT_EVENT0_RIS_IDLE_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_idle_set (& self) -> bool { * self == INT_EVENT0_RIS_IDLE_A :: INT_EVENT0_RIS_IDLE_SET } } # [doc = "Field `INT_EVENT0_RIS_DMA_DONE_RX` reader - DMA Done 1 event for RX. This interrupt is set if the RX DMA channel sends the DONE signal. This allows the handling of the DMA event inside the mapped peripheral."] pub type INT_EVENT0_RIS_DMA_DONE_RX_R = crate :: BitReader < INT_EVENT0_RIS_DMA_DONE_RX_A > ; # [doc = "DMA Done 1 event for RX. This interrupt is set if the RX DMA channel sends the DONE signal. This allows the handling of the DMA event inside the mapped peripheral.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DMA_DONE_RX_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DMA_DONE_RX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DMA_DONE_RX_SET = 1 , } impl From < INT_EVENT0_RIS_DMA_DONE_RX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DMA_DONE_RX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DMA_DONE_RX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DMA_DONE_RX_A { match self . bits { false => INT_EVENT0_RIS_DMA_DONE_RX_A :: INT_EVENT0_RIS_DMA_DONE_RX_CLR , true => INT_EVENT0_RIS_DMA_DONE_RX_A :: INT_EVENT0_RIS_DMA_DONE_RX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dma_done_rx_clr (& self) -> bool { * self == INT_EVENT0_RIS_DMA_DONE_RX_A :: INT_EVENT0_RIS_DMA_DONE_RX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dma_done_rx_set (& self) -> bool { * self == INT_EVENT0_RIS_DMA_DONE_RX_A :: INT_EVENT0_RIS_DMA_DONE_RX_SET } } # [doc = "Field `INT_EVENT0_RIS_DMA_DONE_TX` reader - DMA Done 1 event for TX. This interrupt is set if the TX DMA channel sends the DONE signal. This allows the handling of the DMA event inside the mapped peripheral."] pub type INT_EVENT0_RIS_DMA_DONE_TX_R = crate :: BitReader < INT_EVENT0_RIS_DMA_DONE_TX_A > ; # [doc = "DMA Done 1 event for TX. This interrupt is set if the TX DMA channel sends the DONE signal. This allows the handling of the DMA event inside the mapped peripheral.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_DMA_DONE_TX_A { # [doc = "0: CLR"] INT_EVENT0_RIS_DMA_DONE_TX_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_DMA_DONE_TX_SET = 1 , } impl From < INT_EVENT0_RIS_DMA_DONE_TX_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_DMA_DONE_TX_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_DMA_DONE_TX_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_DMA_DONE_TX_A { match self . bits { false => INT_EVENT0_RIS_DMA_DONE_TX_A :: INT_EVENT0_RIS_DMA_DONE_TX_CLR , true => INT_EVENT0_RIS_DMA_DONE_TX_A :: INT_EVENT0_RIS_DMA_DONE_TX_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_dma_done_tx_clr (& self) -> bool { * self == INT_EVENT0_RIS_DMA_DONE_TX_A :: INT_EVENT0_RIS_DMA_DONE_TX_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_dma_done_tx_set (& self) -> bool { * self == INT_EVENT0_RIS_DMA_DONE_TX_A :: INT_EVENT0_RIS_DMA_DONE_TX_SET } } # [doc = "Field `INT_EVENT0_RIS_TXFIFO_UNF` reader - TX FIFO Underflow Interrupt"] pub type INT_EVENT0_RIS_TXFIFO_UNF_R = crate :: BitReader < INT_EVENT0_RIS_TXFIFO_UNF_A > ; # [doc = "TX FIFO Underflow Interrupt\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_TXFIFO_UNF_A { # [doc = "0: CLR"] INT_EVENT0_RIS_TXFIFO_UNF_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_TXFIFO_UNF_SET = 1 , } impl From < INT_EVENT0_RIS_TXFIFO_UNF_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_TXFIFO_UNF_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_TXFIFO_UNF_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_TXFIFO_UNF_A { match self . bits { false => INT_EVENT0_RIS_TXFIFO_UNF_A :: INT_EVENT0_RIS_TXFIFO_UNF_CLR , true => INT_EVENT0_RIS_TXFIFO_UNF_A :: INT_EVENT0_RIS_TXFIFO_UNF_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_txfifo_unf_clr (& self) -> bool { * self == INT_EVENT0_RIS_TXFIFO_UNF_A :: INT_EVENT0_RIS_TXFIFO_UNF_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_txfifo_unf_set (& self) -> bool { * self == INT_EVENT0_RIS_TXFIFO_UNF_A :: INT_EVENT0_RIS_TXFIFO_UNF_SET } } # [doc = "Field `INT_EVENT0_RIS_RXFULL` reader - RX FIFO Full Interrupt"] pub type INT_EVENT0_RIS_RXFULL_R = crate :: BitReader < INT_EVENT0_RIS_RXFULL_A > ; # [doc = "RX FIFO Full Interrupt\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_RIS_RXFULL_A { # [doc = "0: CLR"] INT_EVENT0_RIS_RXFULL_CLR = 0 , # [doc = "1: SET"] INT_EVENT0_RIS_RXFULL_SET = 1 , } impl From < INT_EVENT0_RIS_RXFULL_A > for bool { # [inline (always)] fn from (variant : INT_EVENT0_RIS_RXFULL_A) -> Self { variant as u8 != 0 } } impl INT_EVENT0_RIS_RXFULL_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_EVENT0_RIS_RXFULL_A { match self . bits { false => INT_EVENT0_RIS_RXFULL_A :: INT_EVENT0_RIS_RXFULL_CLR , true => INT_EVENT0_RIS_RXFULL_A :: INT_EVENT0_RIS_RXFULL_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_event0_ris_rxfull_clr (& self) -> bool { * self == INT_EVENT0_RIS_RXFULL_A :: INT_EVENT0_RIS_RXFULL_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_event0_ris_rxfull_set (& self) -> bool { * self == INT_EVENT0_RIS_RXFULL_A :: INT_EVENT0_RIS_RXFULL_SET } } impl R { # [doc = "Bit 0 - RXFIFO overflow event. This interrupt is set if an RX FIFO overflow has been detected."] # [inline (always)] pub fn int_event0_ris_rxfifo_ovf (& self) -> INT_EVENT0_RIS_RXFIFO_OVF_R { INT_EVENT0_RIS_RXFIFO_OVF_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Parity error event: this bit is set if a Parity error has been detected"] # [inline (always)] pub fn int_event0_ris_per (& self) -> INT_EVENT0_RIS_PER_R { INT_EVENT0_RIS_PER_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - SPI Receive Time-Out event."] # [inline (always)] pub fn int_event0_ris_rtout (& self) -> INT_EVENT0_RIS_RTOUT_R { INT_EVENT0_RIS_RTOUT_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Receive FIFO event.This interrupt is set if the selected Receive FIFO level has been reached"] # [inline (always)] pub fn int_event0_ris_rx (& self) -> INT_EVENT0_RIS_RX_R { INT_EVENT0_RIS_RX_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Transmit FIFO event..This interrupt is set if the selected Transmit FIFO level has been reached."] # [inline (always)] pub fn int_event0_ris_tx (& self) -> INT_EVENT0_RIS_TX_R { INT_EVENT0_RIS_TX_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Transmit FIFO Empty interrupt mask. This interrupt is set if all data in the Transmit FIFO have been move to the shift register."] # [inline (always)] pub fn int_event0_ris_txempty (& self) -> INT_EVENT0_RIS_TXEMPTY_R { INT_EVENT0_RIS_TXEMPTY_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - SPI has done finished transfers and changed into IDLE mode. This bit is set when BUSY goes low."] # [inline (always)] pub fn int_event0_ris_idle (& self) -> INT_EVENT0_RIS_IDLE_R { INT_EVENT0_RIS_IDLE_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - DMA Done 1 event for RX. This interrupt is set if the RX DMA channel sends the DONE signal. This allows the handling of the DMA event inside the mapped peripheral."] # [inline (always)] pub fn int_event0_ris_dma_done_rx (& self) -> INT_EVENT0_RIS_DMA_DONE_RX_R { INT_EVENT0_RIS_DMA_DONE_RX_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - DMA Done 1 event for TX. This interrupt is set if the TX DMA channel sends the DONE signal. This allows the handling of the DMA event inside the mapped peripheral."] # [inline (always)] pub fn int_event0_ris_dma_done_tx (& self) -> INT_EVENT0_RIS_DMA_DONE_TX_R { INT_EVENT0_RIS_DMA_DONE_TX_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - TX FIFO Underflow Interrupt"] # [inline (always)] pub fn int_event0_ris_txfifo_unf (& self) -> INT_EVENT0_RIS_TXFIFO_UNF_R { INT_EVENT0_RIS_TXFIFO_UNF_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - RX FIFO Full Interrupt"] # [inline (always)] pub fn int_event0_ris_rxfull (& self) -> INT_EVENT0_RIS_RXFULL_R { INT_EVENT0_RIS_RXFULL_R :: new (((self . bits >> 10) & 1) != 0) } } # [doc = "Raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_event0_ris::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_RIS_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_event0_ris::R`](R) reader structure"] impl crate :: Readable for INT_EVENT0_RIS_SPEC { } # [doc = "`reset()` method sets INT_EVENT0_RIS to value 0"] impl crate :: Resettable for INT_EVENT0_RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }