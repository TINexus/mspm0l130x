# [doc = "Register `INT_EVENT0_ICLR` writer"] pub type W = crate :: W < INT_EVENT0_ICLR_SPEC > ; # [doc = "Clear RXFIFO overflow event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_RXFIFO_OVF_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_RXFIFO_OVF_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_RXFIFO_OVF_CLR = 1 , } impl From < INT_EVENT0_ICLR_RXFIFO_OVF_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_RXFIFO_OVF_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_RXFIFO_OVF` writer - Clear RXFIFO overflow event."] pub type INT_EVENT0_ICLR_RXFIFO_OVF_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_RXFIFO_OVF_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_RXFIFO_OVF_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_rxfifo_ovf_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RXFIFO_OVF_AW :: INT_EVENT0_ICLR_RXFIFO_OVF_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_rxfifo_ovf_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RXFIFO_OVF_AW :: INT_EVENT0_ICLR_RXFIFO_OVF_CLR) } } # [doc = "Clear Parity error event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_PER_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_PER_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_PER_CLR = 1 , } impl From < INT_EVENT0_ICLR_PER_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_PER_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_PER` writer - Clear Parity error event."] pub type INT_EVENT0_ICLR_PER_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_PER_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_PER_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_per_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_PER_AW :: INT_EVENT0_ICLR_PER_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_per_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_PER_AW :: INT_EVENT0_ICLR_PER_CLR) } } # [doc = "Clear SPI Receive Time-Out Event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_RTOUT_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_RTOUT_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_RTOUT_CLR = 1 , } impl From < INT_EVENT0_ICLR_RTOUT_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_RTOUT_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_RTOUT` writer - Clear SPI Receive Time-Out Event."] pub type INT_EVENT0_ICLR_RTOUT_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_RTOUT_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_RTOUT_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_rtout_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RTOUT_AW :: INT_EVENT0_ICLR_RTOUT_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_rtout_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RTOUT_AW :: INT_EVENT0_ICLR_RTOUT_CLR) } } # [doc = "Clear Receive FIFO event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_RX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_RX_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_RX_CLR = 1 , } impl From < INT_EVENT0_ICLR_RX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_RX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_RX` writer - Clear Receive FIFO event."] pub type INT_EVENT0_ICLR_RX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_RX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_RX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_rx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RX_AW :: INT_EVENT0_ICLR_RX_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_rx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RX_AW :: INT_EVENT0_ICLR_RX_CLR) } } # [doc = "Clear Transmit FIFO event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_TX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_TX_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_TX_CLR = 1 , } impl From < INT_EVENT0_ICLR_TX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_TX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_TX` writer - Clear Transmit FIFO event."] pub type INT_EVENT0_ICLR_TX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_TX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_TX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_tx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_TX_AW :: INT_EVENT0_ICLR_TX_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_tx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_TX_AW :: INT_EVENT0_ICLR_TX_CLR) } } # [doc = "Clear Transmit FIFO Empty event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_TXEMPTY_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_TXEMPTY_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_TXEMPTY_CLR = 1 , } impl From < INT_EVENT0_ICLR_TXEMPTY_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_TXEMPTY_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_TXEMPTY` writer - Clear Transmit FIFO Empty event."] pub type INT_EVENT0_ICLR_TXEMPTY_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_TXEMPTY_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_TXEMPTY_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_txempty_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_TXEMPTY_AW :: INT_EVENT0_ICLR_TXEMPTY_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_txempty_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_TXEMPTY_AW :: INT_EVENT0_ICLR_TXEMPTY_CLR) } } # [doc = "Clear SPI IDLE mode event.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_IDLE_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_IDLE_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_IDLE_CLR = 1 , } impl From < INT_EVENT0_ICLR_IDLE_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_IDLE_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_IDLE` writer - Clear SPI IDLE mode event."] pub type INT_EVENT0_ICLR_IDLE_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_IDLE_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_IDLE_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_idle_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_IDLE_AW :: INT_EVENT0_ICLR_IDLE_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_idle_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_IDLE_AW :: INT_EVENT0_ICLR_IDLE_CLR) } } # [doc = "Clear DMA Done 1 event for RX.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_DMA_DONE_RX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_DMA_DONE_RX_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_DMA_DONE_RX_CLR = 1 , } impl From < INT_EVENT0_ICLR_DMA_DONE_RX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_DMA_DONE_RX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_DMA_DONE_RX` writer - Clear DMA Done 1 event for RX."] pub type INT_EVENT0_ICLR_DMA_DONE_RX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_DMA_DONE_RX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_DMA_DONE_RX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_dma_done_rx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_DMA_DONE_RX_AW :: INT_EVENT0_ICLR_DMA_DONE_RX_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_dma_done_rx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_DMA_DONE_RX_AW :: INT_EVENT0_ICLR_DMA_DONE_RX_CLR) } } # [doc = "Clear DMA Done 1 event for TX.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_DMA_DONE_TX_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_DMA_DONE_TX_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_DMA_DONE_TX_CLR = 1 , } impl From < INT_EVENT0_ICLR_DMA_DONE_TX_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_DMA_DONE_TX_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_DMA_DONE_TX` writer - Clear DMA Done 1 event for TX."] pub type INT_EVENT0_ICLR_DMA_DONE_TX_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_DMA_DONE_TX_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_DMA_DONE_TX_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_dma_done_tx_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_DMA_DONE_TX_AW :: INT_EVENT0_ICLR_DMA_DONE_TX_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_dma_done_tx_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_DMA_DONE_TX_AW :: INT_EVENT0_ICLR_DMA_DONE_TX_CLR) } } # [doc = "Clear TXFIFO underflow event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_TXFIFO_UNF_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_TXFIFO_UNF_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_TXFIFO_UNF_CLR = 1 , } impl From < INT_EVENT0_ICLR_TXFIFO_UNF_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_TXFIFO_UNF_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_TXFIFO_UNF` writer - Clear TXFIFO underflow event"] pub type INT_EVENT0_ICLR_TXFIFO_UNF_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_TXFIFO_UNF_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_TXFIFO_UNF_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_txfifo_unf_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_TXFIFO_UNF_AW :: INT_EVENT0_ICLR_TXFIFO_UNF_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_txfifo_unf_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_TXFIFO_UNF_AW :: INT_EVENT0_ICLR_TXFIFO_UNF_CLR) } } # [doc = "Clear RX FIFO underflow event\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_EVENT0_ICLR_RXFULL_AW { # [doc = "0: NO_EFFECT"] INT_EVENT0_ICLR_RXFULL_NO_EFFECT = 0 , # [doc = "1: CLR"] INT_EVENT0_ICLR_RXFULL_CLR = 1 , } impl From < INT_EVENT0_ICLR_RXFULL_AW > for bool { # [inline (always)] fn from (variant : INT_EVENT0_ICLR_RXFULL_AW) -> Self { variant as u8 != 0 } } # [doc = "Field `INT_EVENT0_ICLR_RXFULL` writer - Clear RX FIFO underflow event"] pub type INT_EVENT0_ICLR_RXFULL_W < 'a , REG , const O : u8 > = crate :: BitWriter < 'a , REG , O , INT_EVENT0_ICLR_RXFULL_AW > ; impl < 'a , REG , const O : u8 > INT_EVENT0_ICLR_RXFULL_W < 'a , REG , O > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "NO_EFFECT"] # [inline (always)] pub fn int_event0_iclr_rxfull_no_effect (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RXFULL_AW :: INT_EVENT0_ICLR_RXFULL_NO_EFFECT) } # [doc = "CLR"] # [inline (always)] pub fn int_event0_iclr_rxfull_clr (self) -> & 'a mut crate :: W < REG > { self . variant (INT_EVENT0_ICLR_RXFULL_AW :: INT_EVENT0_ICLR_RXFULL_CLR) } } impl W { # [doc = "Bit 0 - Clear RXFIFO overflow event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_rxfifo_ovf (& mut self) -> INT_EVENT0_ICLR_RXFIFO_OVF_W < INT_EVENT0_ICLR_SPEC , 0 > { INT_EVENT0_ICLR_RXFIFO_OVF_W :: new (self) } # [doc = "Bit 1 - Clear Parity error event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_per (& mut self) -> INT_EVENT0_ICLR_PER_W < INT_EVENT0_ICLR_SPEC , 1 > { INT_EVENT0_ICLR_PER_W :: new (self) } # [doc = "Bit 2 - Clear SPI Receive Time-Out Event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_rtout (& mut self) -> INT_EVENT0_ICLR_RTOUT_W < INT_EVENT0_ICLR_SPEC , 2 > { INT_EVENT0_ICLR_RTOUT_W :: new (self) } # [doc = "Bit 3 - Clear Receive FIFO event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_rx (& mut self) -> INT_EVENT0_ICLR_RX_W < INT_EVENT0_ICLR_SPEC , 3 > { INT_EVENT0_ICLR_RX_W :: new (self) } # [doc = "Bit 4 - Clear Transmit FIFO event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_tx (& mut self) -> INT_EVENT0_ICLR_TX_W < INT_EVENT0_ICLR_SPEC , 4 > { INT_EVENT0_ICLR_TX_W :: new (self) } # [doc = "Bit 5 - Clear Transmit FIFO Empty event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_txempty (& mut self) -> INT_EVENT0_ICLR_TXEMPTY_W < INT_EVENT0_ICLR_SPEC , 5 > { INT_EVENT0_ICLR_TXEMPTY_W :: new (self) } # [doc = "Bit 6 - Clear SPI IDLE mode event."] # [inline (always)] # [must_use] pub fn int_event0_iclr_idle (& mut self) -> INT_EVENT0_ICLR_IDLE_W < INT_EVENT0_ICLR_SPEC , 6 > { INT_EVENT0_ICLR_IDLE_W :: new (self) } # [doc = "Bit 7 - Clear DMA Done 1 event for RX."] # [inline (always)] # [must_use] pub fn int_event0_iclr_dma_done_rx (& mut self) -> INT_EVENT0_ICLR_DMA_DONE_RX_W < INT_EVENT0_ICLR_SPEC , 7 > { INT_EVENT0_ICLR_DMA_DONE_RX_W :: new (self) } # [doc = "Bit 8 - Clear DMA Done 1 event for TX."] # [inline (always)] # [must_use] pub fn int_event0_iclr_dma_done_tx (& mut self) -> INT_EVENT0_ICLR_DMA_DONE_TX_W < INT_EVENT0_ICLR_SPEC , 8 > { INT_EVENT0_ICLR_DMA_DONE_TX_W :: new (self) } # [doc = "Bit 9 - Clear TXFIFO underflow event"] # [inline (always)] # [must_use] pub fn int_event0_iclr_txfifo_unf (& mut self) -> INT_EVENT0_ICLR_TXFIFO_UNF_W < INT_EVENT0_ICLR_SPEC , 9 > { INT_EVENT0_ICLR_TXFIFO_UNF_W :: new (self) } # [doc = "Bit 10 - Clear RX FIFO underflow event"] # [inline (always)] # [must_use] pub fn int_event0_iclr_rxfull (& mut self) -> INT_EVENT0_ICLR_RXFULL_W < INT_EVENT0_ICLR_SPEC , 10 > { INT_EVENT0_ICLR_RXFULL_W :: new (self) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`int_event0_iclr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_EVENT0_ICLR_SPEC ; impl crate :: RegisterSpec for INT_EVENT0_ICLR_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`int_event0_iclr::W`](W) writer structure"] impl crate :: Writable for INT_EVENT0_ICLR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets INT_EVENT0_ICLR to value 0"] impl crate :: Resettable for INT_EVENT0_ICLR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }