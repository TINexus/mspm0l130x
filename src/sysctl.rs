# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { _reserved0 : [u8 ; 0x1020] , # [doc = "0x1020 - SYSCTL interrupt index"] pub iidx : IIDX , _reserved1 : [u8 ; 0x04] , # [doc = "0x1028 - SYSCTL interrupt mask"] pub imask : IMASK , _reserved2 : [u8 ; 0x04] , # [doc = "0x1030 - SYSCTL raw interrupt status"] pub ris : RIS , _reserved3 : [u8 ; 0x04] , # [doc = "0x1038 - SYSCTL masked interrupt status"] pub mis : MIS , _reserved4 : [u8 ; 0x04] , # [doc = "0x1040 - SYSCTL interrupt set"] pub iset : ISET , _reserved5 : [u8 ; 0x04] , # [doc = "0x1048 - SYSCTL interrupt clear"] pub iclr : ICLR , _reserved6 : [u8 ; 0x04] , # [doc = "0x1050 - NMI interrupt index"] pub nmiiidx : NMIIIDX , _reserved7 : [u8 ; 0x0c] , # [doc = "0x1060 - NMI raw interrupt status"] pub nmiris : NMIRIS , _reserved8 : [u8 ; 0x0c] , # [doc = "0x1070 - NMI interrupt set"] pub nmiiset : NMIISET , _reserved9 : [u8 ; 0x04] , # [doc = "0x1078 - NMI interrupt clear"] pub nmiiclr : NMIICLR , _reserved10 : [u8 ; 0x84] , # [doc = "0x1100 - SYSOSC configuration"] pub sysosccfg : SYSOSCCFG , # [doc = "0x1104 - Main clock (MCLK) configuration"] pub mclkcfg : MCLKCFG , _reserved12 : [u8 ; 0x30] , # [doc = "0x1138 - General clock configuration"] pub genclkcfg : GENCLKCFG , # [doc = "0x113c - General clock enable control"] pub genclken : GENCLKEN , # [doc = "0x1140 - Power mode configuration"] pub pmodecfg : PMODECFG , _reserved15 : [u8 ; 0x0c] , # [doc = "0x1150 - Frequency clock counter (FCC) count"] pub fcc : FCC , _reserved16 : [u8 ; 0x1c] , # [doc = "0x1170 - SYSOSC user-specified trim"] pub sysosctrimuser : SYSOSCTRIMUSER , _reserved17 : [u8 ; 0x04] , # [doc = "0x1178 - SRAM Write Boundary"] pub sramboundary : SRAMBOUNDARY , _reserved18 : [u8 ; 0x04] , # [doc = "0x1180 - System configuration"] pub systemcfg : SYSTEMCFG , _reserved19 : [u8 ; 0x7c] , # [doc = "0x1200 - SYSCTL register write lockout"] pub writelock : WRITELOCK , _reserved20 : [u8 ; 0x1c] , # [doc = "0x1220 - Reset cause"] pub rstcause : RSTCAUSE , _reserved21 : [u8 ; 0xdc] , # [doc = "0x1300 - Reset level for application-triggered reset command"] pub resetlevel : RESETLEVEL , # [doc = "0x1304 - Execute an application-triggered reset command"] pub resetcmd : RESETCMD , # [doc = "0x1308 - BOR threshold selection"] pub borthreshold : BORTHRESHOLD , # [doc = "0x130c - Set the BOR threshold"] pub borclrcmd : BORCLRCMD , # [doc = "0x1310 - SYSOSC frequency correction loop (FCL) ROSC enable"] pub sysoscfclctl : SYSOSCFCLCTL , _reserved26 : [u8 ; 0x08] , # [doc = "0x131c - SHUTDOWN IO release control"] pub shdniorel : SHDNIOREL , # [doc = "0x1320 - Disable the reset function of the NRST pin"] pub exrstpin : EXRSTPIN , _reserved28 : [u8 ; 0x04] , # [doc = "0x1328 - Disable the SWD function on the SWD pins"] pub swdcfg : SWDCFG , # [doc = "0x132c - Frequency clock counter start capture"] pub fcccmd : FCCCMD , _reserved30 : [u8 ; 0x50] , # [doc = "0x1380 - GPAMP control"] pub pmuopamp : PMUOPAMP , _reserved31 : [u8 ; 0x7c] , # [doc = "0x1400 - Shutdown storage memory (byte 0)"] pub shutdnstore0 : SHUTDNSTORE0 , # [doc = "0x1404 - Shutdown storage memory (byte 1)"] pub shutdnstore1 : SHUTDNSTORE1 , # [doc = "0x1408 - Shutdown storage memory (byte 2)"] pub shutdnstore2 : SHUTDNSTORE2 , # [doc = "0x140c - Shutdown storage memory (byte 3)"] pub shutdnstore3 : SHUTDNSTORE3 , } # [doc = "IIDX (r) register accessor: SYSCTL interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`iidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@iidx`]
module"] pub type IIDX = crate :: Reg < iidx :: IIDX_SPEC > ; # [doc = "SYSCTL interrupt index"] pub mod iidx ; # [doc = "IMASK (rw) register accessor: SYSCTL interrupt mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`imask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`imask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@imask`]
module"] pub type IMASK = crate :: Reg < imask :: IMASK_SPEC > ; # [doc = "SYSCTL interrupt mask"] pub mod imask ; # [doc = "RIS (r) register accessor: SYSCTL raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ris`]
module"] pub type RIS = crate :: Reg < ris :: RIS_SPEC > ; # [doc = "SYSCTL raw interrupt status"] pub mod ris ; # [doc = "MIS (r) register accessor: SYSCTL masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mis::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mis`]
module"] pub type MIS = crate :: Reg < mis :: MIS_SPEC > ; # [doc = "SYSCTL masked interrupt status"] pub mod mis ; # [doc = "ISET (w) register accessor: SYSCTL interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`iset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@iset`]
module"] pub type ISET = crate :: Reg < iset :: ISET_SPEC > ; # [doc = "SYSCTL interrupt set"] pub mod iset ; # [doc = "ICLR (w) register accessor: SYSCTL interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`iclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@iclr`]
module"] pub type ICLR = crate :: Reg < iclr :: ICLR_SPEC > ; # [doc = "SYSCTL interrupt clear"] pub mod iclr ; # [doc = "NMIIIDX (r) register accessor: NMI interrupt index\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`nmiiidx::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@nmiiidx`]
module"] pub type NMIIIDX = crate :: Reg < nmiiidx :: NMIIIDX_SPEC > ; # [doc = "NMI interrupt index"] pub mod nmiiidx ; # [doc = "NMIRIS (r) register accessor: NMI raw interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`nmiris::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@nmiris`]
module"] pub type NMIRIS = crate :: Reg < nmiris :: NMIRIS_SPEC > ; # [doc = "NMI raw interrupt status"] pub mod nmiris ; # [doc = "NMIISET (w) register accessor: NMI interrupt set\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`nmiiset::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@nmiiset`]
module"] pub type NMIISET = crate :: Reg < nmiiset :: NMIISET_SPEC > ; # [doc = "NMI interrupt set"] pub mod nmiiset ; # [doc = "NMIICLR (w) register accessor: NMI interrupt clear\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`nmiiclr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@nmiiclr`]
module"] pub type NMIICLR = crate :: Reg < nmiiclr :: NMIICLR_SPEC > ; # [doc = "NMI interrupt clear"] pub mod nmiiclr ; # [doc = "SYSOSCCFG (rw) register accessor: SYSOSC configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sysosccfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sysosccfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sysosccfg`]
module"] pub type SYSOSCCFG = crate :: Reg < sysosccfg :: SYSOSCCFG_SPEC > ; # [doc = "SYSOSC configuration"] pub mod sysosccfg ; # [doc = "MCLKCFG (rw) register accessor: Main clock (MCLK) configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mclkcfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mclkcfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mclkcfg`]
module"] pub type MCLKCFG = crate :: Reg < mclkcfg :: MCLKCFG_SPEC > ; # [doc = "Main clock (MCLK) configuration"] pub mod mclkcfg ; # [doc = "GENCLKCFG (rw) register accessor: General clock configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`genclkcfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`genclkcfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@genclkcfg`]
module"] pub type GENCLKCFG = crate :: Reg < genclkcfg :: GENCLKCFG_SPEC > ; # [doc = "General clock configuration"] pub mod genclkcfg ; # [doc = "GENCLKEN (rw) register accessor: General clock enable control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`genclken::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`genclken::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@genclken`]
module"] pub type GENCLKEN = crate :: Reg < genclken :: GENCLKEN_SPEC > ; # [doc = "General clock enable control"] pub mod genclken ; # [doc = "PMODECFG (rw) register accessor: Power mode configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pmodecfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pmodecfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pmodecfg`]
module"] pub type PMODECFG = crate :: Reg < pmodecfg :: PMODECFG_SPEC > ; # [doc = "Power mode configuration"] pub mod pmodecfg ; # [doc = "FCC (r) register accessor: Frequency clock counter (FCC) count\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fcc::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fcc`]
module"] pub type FCC = crate :: Reg < fcc :: FCC_SPEC > ; # [doc = "Frequency clock counter (FCC) count"] pub mod fcc ; # [doc = "SYSOSCTRIMUSER (rw) register accessor: SYSOSC user-specified trim\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sysosctrimuser::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sysosctrimuser::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sysosctrimuser`]
module"] pub type SYSOSCTRIMUSER = crate :: Reg < sysosctrimuser :: SYSOSCTRIMUSER_SPEC > ; # [doc = "SYSOSC user-specified trim"] pub mod sysosctrimuser ; # [doc = "SRAMBOUNDARY (rw) register accessor: SRAM Write Boundary\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sramboundary::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sramboundary::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sramboundary`]
module"] pub type SRAMBOUNDARY = crate :: Reg < sramboundary :: SRAMBOUNDARY_SPEC > ; # [doc = "SRAM Write Boundary"] pub mod sramboundary ; # [doc = "SYSTEMCFG (rw) register accessor: System configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`systemcfg::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`systemcfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@systemcfg`]
module"] pub type SYSTEMCFG = crate :: Reg < systemcfg :: SYSTEMCFG_SPEC > ; # [doc = "System configuration"] pub mod systemcfg ; # [doc = "WRITELOCK (rw) register accessor: SYSCTL register write lockout\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`writelock::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`writelock::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@writelock`]
module"] pub type WRITELOCK = crate :: Reg < writelock :: WRITELOCK_SPEC > ; # [doc = "SYSCTL register write lockout"] pub mod writelock ; # [doc = "RSTCAUSE (r) register accessor: Reset cause\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rstcause::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rstcause`]
module"] pub type RSTCAUSE = crate :: Reg < rstcause :: RSTCAUSE_SPEC > ; # [doc = "Reset cause"] pub mod rstcause ; # [doc = "RESETLEVEL (rw) register accessor: Reset level for application-triggered reset command\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`resetlevel::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`resetlevel::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resetlevel`]
module"] pub type RESETLEVEL = crate :: Reg < resetlevel :: RESETLEVEL_SPEC > ; # [doc = "Reset level for application-triggered reset command"] pub mod resetlevel ; # [doc = "RESETCMD (w) register accessor: Execute an application-triggered reset command\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`resetcmd::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resetcmd`]
module"] pub type RESETCMD = crate :: Reg < resetcmd :: RESETCMD_SPEC > ; # [doc = "Execute an application-triggered reset command"] pub mod resetcmd ; # [doc = "BORTHRESHOLD (rw) register accessor: BOR threshold selection\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`borthreshold::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`borthreshold::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@borthreshold`]
module"] pub type BORTHRESHOLD = crate :: Reg < borthreshold :: BORTHRESHOLD_SPEC > ; # [doc = "BOR threshold selection"] pub mod borthreshold ; # [doc = "BORCLRCMD (w) register accessor: Set the BOR threshold\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`borclrcmd::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@borclrcmd`]
module"] pub type BORCLRCMD = crate :: Reg < borclrcmd :: BORCLRCMD_SPEC > ; # [doc = "Set the BOR threshold"] pub mod borclrcmd ; # [doc = "SYSOSCFCLCTL (w) register accessor: SYSOSC frequency correction loop (FCL) ROSC enable\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sysoscfclctl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sysoscfclctl`]
module"] pub type SYSOSCFCLCTL = crate :: Reg < sysoscfclctl :: SYSOSCFCLCTL_SPEC > ; # [doc = "SYSOSC frequency correction loop (FCL) ROSC enable"] pub mod sysoscfclctl ; # [doc = "SHDNIOREL (w) register accessor: SHUTDOWN IO release control\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`shdniorel::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shdniorel`]
module"] pub type SHDNIOREL = crate :: Reg < shdniorel :: SHDNIOREL_SPEC > ; # [doc = "SHUTDOWN IO release control"] pub mod shdniorel ; # [doc = "EXRSTPIN (w) register accessor: Disable the reset function of the NRST pin\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`exrstpin::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@exrstpin`]
module"] pub type EXRSTPIN = crate :: Reg < exrstpin :: EXRSTPIN_SPEC > ; # [doc = "Disable the reset function of the NRST pin"] pub mod exrstpin ; # [doc = "SWDCFG (w) register accessor: Disable the SWD function on the SWD pins\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`swdcfg::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swdcfg`]
module"] pub type SWDCFG = crate :: Reg < swdcfg :: SWDCFG_SPEC > ; # [doc = "Disable the SWD function on the SWD pins"] pub mod swdcfg ; # [doc = "FCCCMD (w) register accessor: Frequency clock counter start capture\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fcccmd::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fcccmd`]
module"] pub type FCCCMD = crate :: Reg < fcccmd :: FCCCMD_SPEC > ; # [doc = "Frequency clock counter start capture"] pub mod fcccmd ; # [doc = "PMUOPAMP (rw) register accessor: GPAMP control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`pmuopamp::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`pmuopamp::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pmuopamp`]
module"] pub type PMUOPAMP = crate :: Reg < pmuopamp :: PMUOPAMP_SPEC > ; # [doc = "GPAMP control"] pub mod pmuopamp ; # [doc = "SHUTDNSTORE0 (rw) register accessor: Shutdown storage memory (byte 0)\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`shutdnstore0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`shutdnstore0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shutdnstore0`]
module"] pub type SHUTDNSTORE0 = crate :: Reg < shutdnstore0 :: SHUTDNSTORE0_SPEC > ; # [doc = "Shutdown storage memory (byte 0)"] pub mod shutdnstore0 ; # [doc = "SHUTDNSTORE1 (rw) register accessor: Shutdown storage memory (byte 1)\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`shutdnstore1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`shutdnstore1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shutdnstore1`]
module"] pub type SHUTDNSTORE1 = crate :: Reg < shutdnstore1 :: SHUTDNSTORE1_SPEC > ; # [doc = "Shutdown storage memory (byte 1)"] pub mod shutdnstore1 ; # [doc = "SHUTDNSTORE2 (rw) register accessor: Shutdown storage memory (byte 2)\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`shutdnstore2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`shutdnstore2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shutdnstore2`]
module"] pub type SHUTDNSTORE2 = crate :: Reg < shutdnstore2 :: SHUTDNSTORE2_SPEC > ; # [doc = "Shutdown storage memory (byte 2)"] pub mod shutdnstore2 ; # [doc = "SHUTDNSTORE3 (rw) register accessor: Shutdown storage memory (byte 3)\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`shutdnstore3::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`shutdnstore3::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shutdnstore3`]
module"] pub type SHUTDNSTORE3 = crate :: Reg < shutdnstore3 :: SHUTDNSTORE3_SPEC > ; # [doc = "Shutdown storage memory (byte 3)"] pub mod shutdnstore3 ;