# [doc = "Register `INT_GROUP0_MIS` reader"] pub type R = crate :: R < INT_GROUP0_MIS_SPEC > ; # [doc = "Field `INT_GROUP0_MIS_INT` reader - Masked interrupt status for INT0"] pub type INT_GROUP0_MIS_INT_R = crate :: BitReader < INT_GROUP0_MIS_INT_A > ; # [doc = "Masked interrupt status for INT0\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum INT_GROUP0_MIS_INT_A { # [doc = "0: CLR"] INT_GROUP0_MIS_INT_CLR = 0 , # [doc = "1: SET"] INT_GROUP0_MIS_INT_SET = 1 , } impl From < INT_GROUP0_MIS_INT_A > for bool { # [inline (always)] fn from (variant : INT_GROUP0_MIS_INT_A) -> Self { variant as u8 != 0 } } impl INT_GROUP0_MIS_INT_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> INT_GROUP0_MIS_INT_A { match self . bits { false => INT_GROUP0_MIS_INT_A :: INT_GROUP0_MIS_INT_CLR , true => INT_GROUP0_MIS_INT_A :: INT_GROUP0_MIS_INT_SET , } } # [doc = "CLR"] # [inline (always)] pub fn is_int_group0_mis_int_clr (& self) -> bool { * self == INT_GROUP0_MIS_INT_A :: INT_GROUP0_MIS_INT_CLR } # [doc = "SET"] # [inline (always)] pub fn is_int_group0_mis_int_set (& self) -> bool { * self == INT_GROUP0_MIS_INT_A :: INT_GROUP0_MIS_INT_SET } } impl R { # [doc = "Bit 0 - Masked interrupt status for INT0"] # [inline (always)] pub fn int_group0_mis_int (& self) -> INT_GROUP0_MIS_INT_R { INT_GROUP0_MIS_INT_R :: new ((self . bits & 1) != 0) } } # [doc = "Masked interrupt status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`int_group0_mis::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct INT_GROUP0_MIS_SPEC ; impl crate :: RegisterSpec for INT_GROUP0_MIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`int_group0_mis::R`](R) reader structure"] impl crate :: Readable for INT_GROUP0_MIS_SPEC { } # [doc = "`reset()` method sets INT_GROUP0_MIS to value 0"] impl crate :: Resettable for INT_GROUP0_MIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }