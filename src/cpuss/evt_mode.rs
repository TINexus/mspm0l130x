# [doc = "Register `EVT_MODE` reader"] pub type R = crate :: R < EVT_MODE_SPEC > ; # [doc = "Field `EVT_MODE_INT_CFG` reader - Event line mode select"] pub type EVT_MODE_INT_CFG_R = crate :: FieldReader < EVT_MODE_INT_CFG_A > ; # [doc = "Event line mode select\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum EVT_MODE_INT_CFG_A { # [doc = "0: DISABLE"] EVT_MODE_INT_CFG_DISABLE = 0 , # [doc = "1: SOFTWARE"] EVT_MODE_INT_CFG_SOFTWARE = 1 , # [doc = "2: HARDWARE"] EVT_MODE_INT_CFG_HARDWARE = 2 , } impl From < EVT_MODE_INT_CFG_A > for u8 { # [inline (always)] fn from (variant : EVT_MODE_INT_CFG_A) -> Self { variant as _ } } impl crate :: FieldSpec for EVT_MODE_INT_CFG_A { type Ux = u8 ; } impl EVT_MODE_INT_CFG_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < EVT_MODE_INT_CFG_A > { match self . bits { 0 => Some (EVT_MODE_INT_CFG_A :: EVT_MODE_INT_CFG_DISABLE) , 1 => Some (EVT_MODE_INT_CFG_A :: EVT_MODE_INT_CFG_SOFTWARE) , 2 => Some (EVT_MODE_INT_CFG_A :: EVT_MODE_INT_CFG_HARDWARE) , _ => None , } } # [doc = "DISABLE"] # [inline (always)] pub fn is_evt_mode_int_cfg_disable (& self) -> bool { * self == EVT_MODE_INT_CFG_A :: EVT_MODE_INT_CFG_DISABLE } # [doc = "SOFTWARE"] # [inline (always)] pub fn is_evt_mode_int_cfg_software (& self) -> bool { * self == EVT_MODE_INT_CFG_A :: EVT_MODE_INT_CFG_SOFTWARE } # [doc = "HARDWARE"] # [inline (always)] pub fn is_evt_mode_int_cfg_hardware (& self) -> bool { * self == EVT_MODE_INT_CFG_A :: EVT_MODE_INT_CFG_HARDWARE } } impl R { # [doc = "Bits 0:1 - Event line mode select"] # [inline (always)] pub fn evt_mode_int_cfg (& self) -> EVT_MODE_INT_CFG_R { EVT_MODE_INT_CFG_R :: new ((self . bits & 3) as u8) } } # [doc = "Event Mode\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evt_mode::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EVT_MODE_SPEC ; impl crate :: RegisterSpec for EVT_MODE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`evt_mode::R`](R) reader structure"] impl crate :: Readable for EVT_MODE_SPEC { } # [doc = "`reset()` method sets EVT_MODE to value 0"] impl crate :: Resettable for EVT_MODE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }